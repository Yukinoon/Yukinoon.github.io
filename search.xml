<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SpringBoot与Web开发</title>
      <link href="/2018/12/25/SpringBoot%E4%B8%8EWeb%E5%BC%80%E5%8F%91/"/>
      <url>/2018/12/25/SpringBoot%E4%B8%8EWeb%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><p>[TOC]</p><p>使用SpringBoot：</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码</strong></p><h2 id="1-起步"><a href="#1-起步" class="headerlink" title="1 起步"></a>1 起步</h2><h3 id="1-1-SpringBoot对静态资源的映射规则"><a href="#1-1-SpringBoot对静态资源的映射规则" class="headerlink" title="1.1 SpringBoot对静态资源的映射规则"></a>1.1 SpringBoot对静态资源的映射规则</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(<br>    prefix = <span class="hljs-string">"spring.resources"</span>,<br>    ignoreUnknownFields = <span class="hljs-keyword">false</span><br>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceProperties</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ResourceLoaderAware</span>, <span class="hljs-title">InitializingBean</span> </span>&#123;<br>    <span class="hljs-comment">//可以设置与静态资源有关的参数，缓存时间等</span><br></code></pre></td></tr></table></figure><a id="more"></a><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) &#123;<br>                logger.debug(<span class="hljs-string">"Default resource handling disabled"</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Integer cachePeriod = <span class="hljs-keyword">this</span>.resourceProperties.getCachePeriod();<br>                <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">"/webjars/**"</span>)) &#123;<br>                    <span class="hljs-keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(cachePeriod));<br>                &#125;<br><br>                String staticPathPattern = <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern();<br>                <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>                    <span class="hljs-keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations()).setCachePeriod(cachePeriod));<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>       <span class="hljs-comment">//配置喜欢的图标</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnProperty</span>(value = <span class="hljs-string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="hljs-keyword">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaviconConfiguration</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResourceProperties resourceProperties;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FaviconConfiguration</span><span class="hljs-params">(ResourceProperties resourceProperties)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.resourceProperties = resourceProperties;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> SimpleUrlHandlerMapping <span class="hljs-title">faviconHandlerMapping</span><span class="hljs-params">()</span> </span>&#123;<br>SimpleUrlHandlerMapping mapping = <span class="hljs-keyword">new</span> SimpleUrlHandlerMapping();<br>mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="hljs-number">1</span>);<br>              <span class="hljs-comment">//所有  **/favicon.ico </span><br>mapping.setUrlMap(Collections.singletonMap(<span class="hljs-string">"**/favicon.ico"</span>,<br>faviconRequestHandler()));<br><span class="hljs-keyword">return</span> mapping;<br>&#125;<br><br><br><span class="hljs-comment">//配置欢迎页映射</span><br> <span class="hljs-meta">@Bean</span><br>        <span class="hljs-keyword">public</span> WebMvcAutoConfiguration.<span class="hljs-function">WelcomePageHandlerMapping <span class="hljs-title">welcomePageHandlerMapping</span><span class="hljs-params">(ResourceProperties resourceProperties)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WebMvcAutoConfiguration.WelcomePageHandlerMapping(resourceProperties.getWelcomePage(), <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern());<br>        &#125;<br></code></pre></td></tr></table></figure><p>1）、所有/webjars/**，都去 classpath:/META-INF/resources/webjars/找资源</p><p>webjars：以jar包的方式引入静态资源；</p><p><a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p><p><img src="/images/pageImg/10.png" alt="路径图"></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）、”/**”访问当前项目的任何资源，（静态资源文件夹）</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&quot;classpath:/META-INF/resources/&quot;, <br>&quot;classpath:/resources/&quot;,<br>&quot;classpath:/static/&quot;, <br>&quot;classpath:/public/&quot;,<br>&quot;/&quot;：当前项目的根路径<br></code></pre></td></tr></table></figure><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p>3）、欢迎页： 静态资源文件夹下的所有index.html页面；被”/**”映射；</p><p>​    localhost:8080/   找index页面</p><p>4）、所有的 **/favicon.ico  都是在静态资源文件下找；</p><p>可以用<strong>spring.resources.staticLocations=classpath:/hello/,classpath:/demo/</strong>来定义静态资源存放的位置</p><h2 id="2-模板引擎"><a href="#2-模板引擎" class="headerlink" title="2 模板引擎"></a>2 模板引擎</h2><h3 id="2-1-引入Thymeleaf"><a href="#2-1-引入Thymeleaf" class="headerlink" title="2.1 引入Thymeleaf"></a>2.1 引入Thymeleaf</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认版本2.1.6 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">thymeleaf.version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span><br><span class="hljs-comment">&lt;!-- thymeleaf2   layout1--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">thymeleaf-layout-dialect.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-Thymeleaf使用"><a href="#2-2-Thymeleaf使用" class="headerlink" title="2.2 Thymeleaf使用"></a>2.2 Thymeleaf使用</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.thymeleaf"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafProperties</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="hljs-string">"UTF-8"</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="hljs-string">"text/html"</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_PREFIX = <span class="hljs-string">"classpath:/templates/"</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SUFFIX = <span class="hljs-string">".html"</span>;<br></code></pre></td></tr></table></figure><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、使用thymeleaf语法；</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>成功！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-语法规则"><a href="#2-3-语法规则" class="headerlink" title="2.3 语法规则"></a>2.3 语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="/images/pageImg/11.png" alt=""></p><p>2）、表达式</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs properties">Simple expressions:（表达式语法）<br>    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；<br>    1）、获取对象的属性、调用方法<br>    2）、使用内置的基本对象：<br>    #ctx : the context object.<br>    #vars: the context variables.<br>                #locale : the context locale.<br>                #request : (only in Web Contexts) the HttpServletRequest object.<br>                #response : (only in Web Contexts) the HttpServletResponse object.<br>                #session : (only in Web Contexts) the HttpSession object.<br>                #servletContext : (only in Web Contexts) the ServletContext object.<br>                <br>                $&#123;session.foo&#125;<br>            3）、内置的一些工具对象：<br>#execInfo : information about the template being processed.<br>#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.<br>#uris : methods for escaping parts of URLs/URIs<br>#conversions : methods for executing the configured conversion service (if any).<br>#dates : methods for java.util.Date objects: formatting, component extraction, etc.<br>#calendars : analogous to #dates , but for java.util.Calendar objects.<br>#numbers : methods for formatting numeric objects.<br>#strings : methods for String objects: contains, startsWith, prepending/appending, etc.<br>#objects : methods for objects in general.<br>#bools : methods for boolean evaluation.<br>#arrays : methods for arrays.<br>#lists : methods for lists.<br>#sets : methods for sets.<br>#maps : methods for maps.<br>#aggregates : methods for creating aggregates on arrays or collections.<br>#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).<br><br>    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；<br>    补充：配合 th:object=&quot;$&#123;session.user&#125;：<br>   &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;<br>    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br>    &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br>    &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br>    &lt;/div&gt;<br>    <br>    Message Expressions: #&#123;...&#125;：获取国际化内容<br>    Link URL Expressions: @&#123;...&#125;：定义URL；<br>    @&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125;<br>    Fragment Expressions: ~&#123;...&#125;：片段引用表达式<br>    &lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;<br>    <br>Literals（字面量）<br>      Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,…<br>      Number literals: 0 , 34 , 3.0 , 12.3 ,…<br>      Boolean literals: true , false<br>      Null literal: null<br>      Literal tokens: one , sometext , main ,…<br>Text operations:（文本操作）<br>    String concatenation: +<br>    Literal substitutions: |The name is $&#123;name&#125;|<br>Arithmetic operations:（数学运算）<br>    Binary operators: + , - , * , / , %<br>    Minus sign (unary operator): -<br>Boolean operations:（布尔运算）<br>    Binary operators: and , or<br>    Boolean negation (unary operator): ! , not<br>Comparisons and equality:（比较运算）<br>    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )<br>    Equality operators: == , != ( eq , ne )<br>Conditional operators:条件运算（三元运算符）<br>    If-then: (if) ? (then)<br>    If-then-else: (if) ? (then) : (else)<br>    Default: (value) ?: (defaultvalue)<br>Special tokens:<br>    No-Operation: _<br></code></pre></td></tr></table></figure><h2 id="3-SpringMVC的配置"><a href="#3-SpringMVC的配置" class="headerlink" title="3 SpringMVC的配置"></a>3 SpringMVC的配置</h2><h3 id="3-1-自动配置"><a href="#3-1-自动配置" class="headerlink" title="3.1 自动配置"></a>3.1 自动配置</h3><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>（WebMvcAutoConfiguration）</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li><strong>如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来</strong></li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnProperty</span>(prefix = <span class="hljs-string">"spring.mvc"</span>, name = <span class="hljs-string">"date-format"</span>)<span class="hljs-comment">//在文件中配置日期格式化的规则</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Formatter&lt;Date&gt; <span class="hljs-title">dateFormatter</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DateFormatter(<span class="hljs-keyword">this</span>.mvcProperties.getDateFormat());<span class="hljs-comment">//日期格式化组件</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自己添加的格式化器转换器，我们只需要放在容器中即可</strong></p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p><p>​</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">初始化WebDataBinder；<br>请求数据=====JavaBean；<br></code></pre></td></tr></table></figure></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="3-2-扩展SpringMVC"><a href="#3-2-扩展SpringMVC" class="headerlink" title="3.2 扩展SpringMVC"></a>3.2 扩展SpringMVC</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/hello"</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">"success"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/hello"</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc</strong></p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>       <span class="hljs-comment">// super.addViewControllers(registry);</span><br>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span><br>        registry.addViewController(<span class="hljs-string">"/demo"</span>).setViewName(<span class="hljs-string">"success"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> </span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WebMvcConfigurerComposite configurers = <span class="hljs-keyword">new</span> WebMvcConfigurerComposite();<br><br> <span class="hljs-comment">//从容器中获取所有的WebMvcConfigurer</span><br>     <span class="hljs-meta">@Autowired</span>(required = <span class="hljs-keyword">false</span>)<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;<br>             <span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);<br>           <span class="hljs-comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span><br>           <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br>             <span class="hljs-comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span><br>              <span class="hljs-comment">//       delegate.addViewControllers(registry);</span><br>              <span class="hljs-comment">//   &#125;</span><br>             &#125;<br>         &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>       <span class="hljs-comment">// super.addViewControllers(registry);</span><br>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span><br>        registry.addViewController(<span class="hljs-string">"/atguigu"</span>).setViewName(<span class="hljs-string">"success"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import</span>(DelegatingWebMvcConfiguration.class)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;<br></code></pre></td></tr></table></figure><p>2）、</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br></code></pre></td></tr></table></figure><p>3）、</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnWebApplication</span><br><span class="hljs-meta">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class,<br>WebMvcConfigurerAdapter.class &#125;)<br><span class="hljs-comment">//容器中没有这个组件的时候，这个自动配置类才生效</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)<br><span class="hljs-meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class="hljs-number">10</span>)<br><span class="hljs-meta">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class,<br>ValidationAutoConfiguration.class &#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfiguration</span> </span>&#123;<br></code></pre></td></tr></table></figure><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringBoot与日志</title>
      <link href="/2018/12/20/SpringBoot%E4%B8%8E%E6%97%A5%E5%BF%97/"/>
      <url>/2018/12/20/SpringBoot%E4%B8%8E%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot与日志"><a href="#SpringBoot与日志" class="headerlink" title="SpringBoot与日志"></a>SpringBoot与日志</h1><p>[TOC]</p><h2 id="1-SLF4j使用"><a href="#1-SLF4j使用" class="headerlink" title="1.SLF4j使用"></a>1.SLF4j使用</h2><h3 id="1-1-如何在系统中使用SLF4j"><a href="#1-1-如何在系统中使用SLF4j" class="headerlink" title="1.1 如何在系统中使用SLF4j"></a>1.1 如何在系统中使用SLF4j</h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层的方法；</p><p>给系统导入slf4j的jar和logback的实现jar</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Logger logger = LoggerFactory.getLogger(HelloWorld.class);<br>    logger.info(<span class="hljs-string">"Hello World"</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2遗留问题"><a href="#1-2遗留问题" class="headerlink" title="1.2遗留问题"></a>1.2遗留问题</h3><p>a(slf4j+logback),Spring(commons-logging),Hibernate(jboss-logging)…</p><p>统一日志记录，即使是别的框架和我一起用slf4j输出？</p><p><img src="/images/pageImg/08.png" alt="统一日志"></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>1、将系统中其他日志框架排除出去；</p><p>2、用中间包来替换原有的日志框架；</p><p>3、再导入slf4j其他的实现；</p><h2 id="2-SpringBoot日志关系"><a href="#2-SpringBoot日志关系" class="headerlink" title="2. SpringBoot日志关系"></a>2. SpringBoot日志关系</h2><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能；</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>依赖关系</strong></p><p><img src="/images/pageImg/09.png" alt="startlog"></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他日志转成了slf4j</p><p>​    3）、中间替换包？</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFactory</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="hljs-string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;<br>    <span class="hljs-keyword">static</span> LogFactory logFactory = <span class="hljs-keyword">new</span> SLF4JLogFactory();<br></code></pre></td></tr></table></figure><p>​    4）、如果我们要引入其他框架。一定要把这个框架的默认日志依赖移除掉</p><p>​        Spring框架使用的是commons-logging；</p><p>SpringBoot排除了commons-logging</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>SpringBoot能自动适配所以的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉</strong></p><h2 id="3-日志使用"><a href="#3-日志使用" class="headerlink" title="3.日志使用"></a>3.日志使用</h2><h3 id="3-1-默认配置"><a href="#3-1-默认配置" class="headerlink" title="3.1 默认配置"></a>3.1 默认配置</h3><p>SpringBoot默认帮我们配置好了日志</p><p>java代码：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Logger logger = LoggerFactory.getLogger(getClass());<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br><br><span class="hljs-comment">//日志的级别，由低到高</span><br>logger.trace(<span class="hljs-string">"这是trace日志"</span>);<br>logger.debug(<span class="hljs-string">"这是debug日志"</span>);<br><span class="hljs-comment">//SpringBoot默认给我们使用info级别,没有指定基本就用SpringBoot默认级别；root级别</span><br>logger.info(<span class="hljs-string">"这是info日志"</span>);<br>logger.warn(<span class="hljs-string">"这是warn日志"</span>);<br>logger.error(<span class="hljs-string">"这是error日志"</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>propertices的配置</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties">logging.level.com.example=trace<br><br>#不指定路径在当前项目下生成springboot.log日志<br>#可指定完整路径<br>logging.file=G:/springboot.log<br>#在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用spring.log作为默认文件<br>logging.path=/spring/log<br><br>#在控制台输出日志的格式<br>logging.pattern.console=<br>#在文件输出日志的格式<br>logging.pattern.file=<br></code></pre></td></tr></table></figure><p>配置文件官方说明：<a href="https://docs.spring.io/spring-boot/docs/1.5.18.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">日志配置</a></p><h3 id="3-2指定配置"><a href="#3-2指定配置" class="headerlink" title="3.2指定配置"></a>3.2指定配置</h3><p>给类路径下放上每个日志框架的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p>logback.xml：直接被日志框架识别了</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能，否则就会报错</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"staging"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dev, staging"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"!production"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-切换日志框架"><a href="#4-切换日志框架" class="headerlink" title="4.切换日志框架"></a>4.切换日志框架</h2><p>slf4j+log4j的方式</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>切换到log4j2</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringBoot配置文件</title>
      <link href="/2018/12/16/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2018/12/16/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="4-SpringBoot的配置"><a href="#4-SpringBoot的配置" class="headerlink" title="4 SpringBoot的配置"></a>4 SpringBoot的配置</h2><h3 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1.配置文件"></a>4.1.配置文件</h3><p>Springboot使用一个全局配置文件，配置文件名字是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用：修改SpringBoot自动配置的默认值；</p><h3 id="4-2-yml语法"><a href="#4-2-yml语法" class="headerlink" title="4.2 yml语法"></a>4.2 yml语法</h3><p><strong>基本语法</strong></p><p>k:(空格)v    表示一对键值对（空格必须有）；</p><p>​    以空格缩进来控制层级关系；只要是左对齐的一列数据都是同一层级的</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sercer:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">/hello</span><br></code></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><p><strong>值的写法</strong></p><p><strong>字面量：普通的值（数字，字符串，布尔</strong></p><p>​    k: v    字面量直接来写，默认不用加单引号或者双引号；</p><p>​    “”：双引号；不会转义字符串里的特殊字符；特殊字符作为本身想表示的意思</p><p>​        name: “张三 \n lisi”    输出为：zhangsan 换行 lisi</p><p>​    ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串</p><p>​        name: ‘张三 \n lisi’    输出为：zhangsan \n lisi</p><p><strong>对象（属性和值）（键值对）</strong></p><p>​    k: v     在下一行写来写对象属性和值的关系</p><p>​        对象还是k: v的方式</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">friends:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">zhangsan</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>行内写法：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">friends:</span> <span class="hljs-string">&#123;name:</span> <span class="hljs-string">zhangsan,age:</span> <span class="hljs-number">20</span><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><a id="more"></a><p>数组（List、Set:）**</p><p>用- 值表示数组中的一个元素</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span><br><span class="hljs-bullet"> -</span> <span class="hljs-string">cat</span><br><span class="hljs-bullet"> -</span> <span class="hljs-string">dag</span><br><span class="hljs-bullet"> -</span> <span class="hljs-string">pig</span><br></code></pre></td></tr></table></figure><p>行内写法</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> <span class="hljs-string">[cat,dog,pig]</span><br></code></pre></td></tr></table></figure><h3 id="4-3配置文件值注入"><a href="#4-3配置文件值注入" class="headerlink" title="4.3配置文件值注入"></a>4.3配置文件值注入</h3><p>配置文件</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br><span class="hljs-attr">  lastName:</span> <span class="hljs-string">zhangsan</span><br><span class="hljs-attr">  age:</span> <span class="hljs-number">18</span><br><span class="hljs-attr">  boss:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  birth:</span> <span class="hljs-number">2018</span><span class="hljs-string">/12/16</span><br><span class="hljs-attr">  maps:</span> <span class="hljs-string">&#123;k1:</span> <span class="hljs-string">v1,k2:</span> <span class="hljs-number">12</span><span class="hljs-string">&#125;</span><br><span class="hljs-attr">  lists:</span> <span class="hljs-string">[lisi,zhaoliu]</span><br><span class="hljs-attr">  dog:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">小狗</span><br><span class="hljs-attr">    age:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>javaBean:</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 将配置文件中配置的每一个属性的值，映射到这个组中<br> * <span class="hljs-doctag">@ConfigurationProperties</span>：告诉Springboot将本类所有属性和配置文件中的相关配置进行绑定<br> * prefix = "person"：配置文件中哪个下面的所有属性进行一一映射<br> * 只有这个组件是容器中的组件，才能使用<span class="hljs-doctag">@ConfigurationProperties</span>功能<br> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置文件就有提示了</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>properties配置文件的编码问题</strong></p><p><img src="/images/pageImg/03.png" alt="idea设置"></p><h3 id="4-4-Value获取值与-ConfigurationProperties获取值的比较"><a href="#4-4-Value获取值与-ConfigurationProperties获取值的比较" class="headerlink" title="4.4 @Value获取值与@ConfigurationProperties获取值的比较"></a>4.4 @Value获取值与@ConfigurationProperties获取值的比较</h3><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>JSR303数据校验：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Email</span><br>    <span class="hljs-comment">//意思必须是邮箱格式</span><br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Integer age;<br></code></pre></td></tr></table></figure><p>如果说，只需要获取配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h3 id="4-5-PropertySource和-ImportResource"><a href="#4-5-PropertySource和-ImportResource" class="headerlink" title="4.5 @PropertySource和@ImportResource"></a>4.5 @PropertySource和@ImportResource</h3><p><strong>@PropertySource：</strong>加载指定的配置文件</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 将配置文件中配置的每一个属性的值，映射到这个组中<br> * <span class="hljs-doctag">@ConfigurationProperties</span>：告诉Springboot将本类所有属性和配置文件中的相关配置进行绑定(默认从全局配置文件获取值)<br> * prefix = "person"：配置文件中哪个下面的所有属性进行一一映射<br> * 只有这个组件是容器中的组件，才能使用<span class="hljs-doctag">@ConfigurationProperties</span>功能<br> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<br><span class="hljs-meta">@Validated</span><br><span class="hljs-meta">@PropertySource</span>(value = &#123;<span class="hljs-string">"classpath:person.properties"</span>&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br><br><span class="hljs-comment">//    @Email</span><br>    <span class="hljs-comment">//意思必须是邮箱格式</span><br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><p>person.properties：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">person.last-name=李四<br>person.age=18<br>person.boss=false<br>person.birth=2017/12/17<br>person.maps.k1=v1<br>person.maps.k2=v2<br>person.lists=a,b,c<br>person.dog.name=dog<br>person.dog.age=4<br></code></pre></td></tr></table></figure><p><strong>@ImportResource：</strong>导入Spring的配置文件，让配置文件里的内容生效；</p><p>SpringBoot里没有我们自己编写的配置文件，不能自动识别，想让自己编写的Spring配置文件生效；要把@ImportResource标注在一个配置类上</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource</span>(locations = &#123;<span class="hljs-string">"classpath:beans.xml"</span>&#125;)<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootConfigApplication</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(SpringBootConfigApplication.class, args);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"helloService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.yukino.config.service.HelloService"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringBoot推荐给容器中添加组件的方式；推荐全注解的方式</p><p>1.配置类===Spring配置文件</p><p>2.@Bean给容器中添加组件</p><p>配置类：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.yukino.config.service.HelloService;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@Configuration</span>：指明当前类是一个配置类，用来代替之前的Spring配置文件<br> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAppConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//将方法的返回值添加到容器中，默认id是这个方法名</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloService <span class="hljs-title">helloService</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"添加了helloService组件-16"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HelloService();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ApplicationContext ioc;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHello</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">boolean</span> b  = ioc.containsBean(<span class="hljs-string">"helloService"</span>);<br>System.out.println(b);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-配置文件的随机数和占位符"><a href="#4-6-配置文件的随机数和占位符" class="headerlink" title="4.6 配置文件的随机数和占位符"></a>4.6 配置文件的随机数和占位符</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties">person.last-name=张三$&#123;random.uuid&#125;<br>person.age=$&#123;random.int&#125;<br>person.boss=false<br>person.birth=2017/12/17<br>person.maps.k1=v1<br>person.maps.k2=v2<br>person.lists=a,b,c<br>person.dog.name=$&#123;person.last-name&#125;_dog<br>person.dog.age=$&#123;person.hello:1&#125;4<br></code></pre></td></tr></table></figure><p>占位符获取之前配置的值，如果没有，可以用:指定默认值</p><h3 id="4-7-配置-Profile多环境支持"><a href="#4-7-配置-Profile多环境支持" class="headerlink" title="4.7 配置-Profile多环境支持"></a>4.7 配置-Profile多环境支持</h3><p>我们编写主配置文件时，文件名可以是application-${profile}.propertice/yml    </p><p>默认使用application.properties</p><p><strong>激活指定profile</strong></p><p>​    1.在配置文件中指定：spring.profiles.active=dev</p><p>​    2.命令行：</p><p>​        –spring.profiles.active=dev</p><p>​    或者：java -jar xxx.jar –spring.profiles.active=dev</p><p><img src="/images/pageImg/04.png" alt="命令行"></p><p>3.虚拟机参数</p><p>-Dspring.profiles.active=prod</p><p><img src="/images/pageImg/05.png" alt="命令行"></p><p><strong>yml支持多文档块方式</strong></p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  profiles:</span><br><span class="hljs-attr">    active:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  profiles:</span> <span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><h3 id="4-8-配置文件的加载位置"><a href="#4-8-配置文件的加载位置" class="headerlink" title="4.8 配置文件的加载位置"></a>4.8 配置文件的加载位置</h3><p>优先级从高到低，高优先级的配置会覆盖低优先级的配置；</p><p>springBoot会从这四个位置加载配置文件；互补配置</p><p>- file:./config/</p><p>- file:./</p><p>- classpath:/config/</p><p>- classpath:/</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties">server.servlet.context-path=/boot02 #配置项目名<br>spring.config.location=G:/application.properties #定义配置文件位置<br></code></pre></td></tr></table></figure><p>项目打包好后，可以用命令行参数的形式，启动项目的时候来指定配置文件的新位置：</p><p><strong>java -jar xxx.jar –spring.config.location=G:/application.properties</strong></p><p><strong>外部配置的加载顺序</strong></p><p><img src="/images/pageImg/06.png" alt="顺序"></p><p>由jar包外向jar包内进行寻找，优先加载带profile的，再来加载不带profile的</p><p>具体参考官方文档：<a href="https://docs.spring.io/spring-boot/docs/1.5.19.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">配置官方文档</a></p><h3 id="4-9-自动配置原理"><a href="#4-9-自动配置原理" class="headerlink" title="4.9 自动配置原理"></a>4.9 自动配置原理</h3><p>能配置哪些属性：<a href="https://docs.spring.io/spring-boot/docs/1.5.18.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">官方文档</a></p><p>自动配置原理：</p><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能<strong>@EnableAutoConfiguration</strong><br>2）、@EnableAutoConfiguration的作用：</p><ul><li><p>利用EnableAutoConfigurationImportSelector给容器导入一些组件</p></li><li><p>可以查看selectImports()的内容</p></li><li><p>List<string> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);//获取候选的配置</string></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringFactoriesLoader.loadFactoryNames();<br>扫描所以jar包类路径下的META-INF/spring.factories<br>扫描到的这些内容包装成Properties对象，<br>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中<br></code></pre></td></tr></table></figure><p>将类路径下    META-INF/spring.factories里面配置的所有EnableAutoConfiguration的值加到了容器中；</p><p>以下所有配置文件都在spring-boot-autoconfigure-1.5.18.RELEASE.jar内</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\<br>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\<br>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\<br>org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\<br>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\<br>...<br></code></pre></td></tr></table></figure></li></ul><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//表示这是一个配置类，和以前的配置文件一样，也可以给容器中添加组件</span><br><span class="hljs-meta">@EnableConfigurationProperties</span>(&#123;HttpEncodingProperties.class&#125;) <br><span class="hljs-comment">//启用指定类ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来，并把HttpEncodingProperties.class加入到ioc容器中</span><br><br><span class="hljs-meta">@ConditionalOnWebApplication</span> <span class="hljs-comment">//Spring底层@Conditional注解，根据不同的条件，如果满足知道条件，整个配置类里面的配置才会生效；判断当前应用是否是web应用</span><br><br><span class="hljs-meta">@ConditionalOnClass</span>(&#123;CharacterEncodingFilter.class&#125;) <span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中解决乱码的过滤器；</span><br><br><span class="hljs-meta">@ConditionalOnProperty</span>(<br>    prefix = <span class="hljs-string">"spring.http.encoding"</span>,<br>    value = &#123;<span class="hljs-string">"enabled；"</span>&#125;,<br>    matchIfMissing = <span class="hljs-keyword">true</span><br>)<br><span class="hljs-comment">//判断配置文件中是否存在某个配置spring.http.encoding.enabled；matchIfMissing = true如果不存在，判断也是成立的，即使我们不配置spring.http.encoding.enabled=true，也是默认生效的</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span> </span>&#123;<br>   <br>    <span class="hljs-comment">//他已经和springBoot的配置文件映射了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HttpEncodingProperties properties;<br><br>    <span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span><span class="hljs-params">(HttpEncodingProperties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值从propertices中获取</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter.class&#125;) <span class="hljs-comment">//判断容器中没有这个组件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title">characterEncodingFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        CharacterEncodingFilter filter = <span class="hljs-keyword">new</span> OrderedCharacterEncodingFilter();<br>        filter.setEncoding(<span class="hljs-keyword">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(Type.REQUEST));<br>        filter.setForceResponseEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(Type.RESPONSE));<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br></code></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效</p><p>一旦这个配置类生效；这个配置类会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的。</p><p>5）、所有配置文件中能配置的属性都是在xxxPropertices类中封装着；配置文件能配置什么功能就可以参照着某个功能对应的属性类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.http.encoding"</span>) <span class="hljs-comment">//从配置文件中获取指定的值和bean的属性进行绑定</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingProperties</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="hljs-string">"UTF-8"</span>);<br></code></pre></td></tr></table></figure><p>精髓：</p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类；</strong></p><p>​    <strong>2）、看我们的需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，就不用再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们可以在配置文件中指定这些属性的值；</strong></p><p>​        </p><p>xxxAutoConfiguration：自动配置类；</p><p>给容器中添加组件</p><p>xxxProperties：封装配置文件中相关属性；</p><h4 id="4-9-1-细节"><a href="#4-9-1-细节" class="headerlink" title="4.9.1 细节"></a>4.9.1 细节</h4><p><strong>1、@Conditional派生注解</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置里的所有内容才会生效</p><p><img src="/images/pageImg/07.png" alt="派生注解"></p><p>我们怎么知道哪些自动配置类生效了，我们可以启动debug=true属性，来让控制台打印自动配置报告</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">=========================<br>AUTO-CONFIGURATION REPORT<br>=========================<br><br><br>Positive matches:(启用的)<br>-----------------<br><br>   DispatcherServletAutoConfiguration matched:<br>      - <span class="hljs-meta">@ConditionalOnClass</span> found required <span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">DispatcherServlet</span>'</span>; <span class="hljs-meta">@ConditionalOnMissingClass</span> <span class="hljs-function">did not find unwanted <span class="hljs-title">class</span> <span class="hljs-params">(OnClassCondition)</span><br>      - @<span class="hljs-title">ConditionalOnWebApplication</span> <span class="hljs-params">(required)</span> found 'session' <span class="hljs-title">scope</span> <span class="hljs-params">(OnWebApplicationCondition)</span><br><br>...<br><br>Negative matches:<span class="hljs-params">(未启用的)</span><br>-----------------<br><br>   ActiveMQAutoConfiguration:<br>      Did not match:<br>         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="hljs-params">(OnClassCondition)</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringBoot学习</title>
      <link href="/2018/12/12/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/12/12/SpringBoot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot学习笔记"><a href="#SpringBoot学习笔记" class="headerlink" title="SpringBoot学习笔记"></a>SpringBoot学习笔记</h1><p>[TOC]</p><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1 配置"></a>1 配置</h2><h3 id="1-1-配置maven"><a href="#1-1-配置maven" class="headerlink" title="1.1 配置maven"></a>1.1 配置maven</h3><ul><li><p>给maven的setting.xml加上以下</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-SpringBoot-HelloWorld"><a href="#2-SpringBoot-HelloWorld" class="headerlink" title="2 SpringBoot HelloWorld"></a>2 SpringBoot HelloWorld</h2><h3 id="2-1-创建maven工程；（jar）"><a href="#2-1-创建maven工程；（jar）" class="headerlink" title="2.1 创建maven工程；（jar）"></a>2.1 创建maven工程；（jar）</h3><h3 id="2-2-导入SpringBoot相关依赖"><a href="#2-2-导入SpringBoot相关依赖" class="headerlink" title="2.2 导入SpringBoot相关依赖"></a>2.2 导入SpringBoot相关依赖</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-编写一个主程序"><a href="#2-3-编写一个主程序" class="headerlink" title="2.3 编写一个主程序"></a>2.3 编写一个主程序</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**<br> *  <span class="hljs-doctag">@SpringBootApplication</span> 来标注一个主程序类，来说明这是一个SpringBoot应用<br> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//启动应用</span><br>        SpringApplication.run(HelloWorldMainApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="2-4-编写相关的Controller，Service"><a href="#2-4-编写相关的Controller，Service" class="headerlink" title="2.4 编写相关的Controller，Service"></a>2.4 编写相关的Controller，Service</h3>  <figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello World"</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-启动和访问"><a href="#2-5-启动和访问" class="headerlink" title="2.5 启动和访问"></a>2.5 启动和访问</h3><p>  <img src="/images/pageImg/01.png" alt="访问"></p><h3 id="2-6-简化部署"><a href="#2-6-简化部署" class="headerlink" title="2.6 简化部署"></a>2.6 简化部署</h3><p>  pom.xml增加插件</p>  <figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这个插件可以将应用打成一个可执行的jar包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  <img src="/images/pageImg/02.png" alt="访问"></p><p>  然后执行：</p><p>  java -jar SpringBoot01-1.0-SNAPSHOT.jar</p><h2 id="3-HelloWorld-研究"><a href="#3-HelloWorld-研究" class="headerlink" title="3 HelloWorld 研究"></a>3 HelloWorld 研究</h2><h3 id="3-1-pom文件"><a href="#3-1-pom文件" class="headerlink" title="3.1 pom文件"></a>3.1 pom文件</h3><p><strong>父项目</strong></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>他的父项目：SpringBoot的版本仲裁中心<br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>导入的启动器</strong></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong><em>-web</em></p><p>spring-boot-starter：SpringBoot场景启动器（WEB项目正常运行的依赖），starters，SpringBoot根据各个场景做成的各种启动器</p><h3 id="3-2-主程序类，主入口类"><a href="#3-2-主程序类，主入口类" class="headerlink" title="3.2 主程序类，主入口类"></a>3.2 主程序类，主入口类</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**<br> *  <span class="hljs-doctag">@SpringBootApplication</span> 来标注一个主程序类，来说明这是一个SpringBoot应用<br> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//启动应用</span><br>        SpringApplication.run(HelloWorldMainApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@SpringBootApplication</strong>：表明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target</span>(&#123;ElementType.TYPE&#125;)<br><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan</span>(<br>    excludeFilters = &#123;<span class="hljs-meta">@Filter</span>(<br>    type = FilterType.CUSTOM,<br>    classes = &#123;TypeExcludeFilter.class&#125;<br>), <span class="hljs-meta">@Filter</span>(<br>    type = FilterType.CUSTOM,<br>    classes = &#123;AutoConfigurationExcludeFilter.class&#125;<br>)&#125;<br>)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br></code></pre></td></tr></table></figure><p>@SpringBootConfiguration：SpringBoot的配置类；</p><p>​    标注在某个类上，表示该类是SpringBoot的配置类</p><p>​    @Configuration：配置类上标注这个注解</p><p>​        配置类—-配置文件；配置类也是容器中的一个组件@Component</p><p>@EnableAutoConfiguration：开启自动配置功能；</p><p>​    告诉SpringBoot开启自动配置功能，这样自动配置才能生效</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector.class&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br></code></pre></td></tr></table></figure><p><strong>@AutoConfigurationPackage</strong>：自动配置包    </p><p>​    @Import({AutoConfigurationPackages.Registrar.class})：</p><p>​    Spring的底层注解@Import，给容器导入一个组件；由AutoConfigurationPackages.Registrar.class指定</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">将主配置类（@SpringBootApplication标注的类）所在的包及下面所有的子包里面的所有组件扫描到Spring容器中。<br></code></pre></td></tr></table></figure><p><strong>@Import({EnableAutoConfigurationImportSelector.class})</strong></p><p>EnableAutoConfigurationImportSelector：导入哪些组件的选择器；</p><p>​    将所有要导入的组件以全类名的方式返回；这些组件就会添加到容器中</p><p>​    会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给这个容器导入这个场景所需要的所有组件，并配置好这些组件。有了自动配置类，免去了我们手动编写配置注入组件等工作；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader)<br></code></pre></td></tr></table></figure><p>从类路径下META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就会生效，帮我们做自动配置工作；</p><p>J2EE的整体解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2018/12/11/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/12/11/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h5 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h5><p>​    类似于html中的<code>&lt;h1</code>到<code>&lt;h6&gt;</code>标签，要想把一段文字定义为标题，只需在前面加上若干的#号即可。</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># h1</span><br><br><span class="hljs-section">## h2</span><br><br><span class="hljs-section">### h3</span><br></code></pre></td></tr></table></figure><h5 id="2-区块"><a href="#2-区块" class="headerlink" title="2.区块"></a>2.区块</h5><blockquote><p>区块</p><blockquote><p>区块2</p></blockquote></blockquote><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块</span><br><span class="hljs-quote">&gt; 区块2</span><br></code></pre></td></tr></table></figure><a id="more"></a><h5 id="3-修饰与强调"><a href="#3-修饰与强调" class="headerlink" title="3.修饰与强调"></a>3.修饰与强调</h5><p><em>倾斜</em>     Some of these words <em>are emphasized</em>.<br>_倾斜_    Some of these words <em>are emphasized also</em>.<br><strong>加粗</strong>    Use two asterisks for <strong>strong emphasis</strong>.<br><strong>加粗</strong>    Or, if you prefer, <strong>use two underscores instead</strong>.    </p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Some of these words <span class="hljs-emphasis">*are emphasized*</span>.<br>Some of these words <span class="hljs-emphasis">_are emphasized also_</span>.<br>Use two asterisks for <span class="hljs-strong">**strong emphasis**</span>.<br>Or, if you prefer, <span class="hljs-strong">__use two underscores instead__</span>.<br></code></pre></td></tr></table></figure><h5 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h5><p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p><ul><li>无序列表</li></ul><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">星号：<br><br><span class="hljs-bullet">* </span>无序列表<br><span class="hljs-bullet">* </span>无序列表2<br><span class="hljs-bullet">* </span>无序列表3<br>加号：<br><br><span class="hljs-bullet">+ </span>无序列表<br><span class="hljs-bullet">+ </span>无序列表2<br><span class="hljs-bullet">+ </span>无序列表3<br>和减号<br><br><span class="hljs-bullet">- </span>无序列表<br><span class="hljs-bullet">- </span>无序列表2<br><span class="hljs-bullet">- </span>无序列表3<br></code></pre></td></tr></table></figure><p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p><ol><li>有序列表1</li><li>有序列表2</li></ol><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1. </span>Red<br><span class="hljs-bullet">2. </span>Green<br><span class="hljs-bullet">3. </span>Blue<br></code></pre></td></tr></table></figure><h5 id="5-链接"><a href="#5-链接" class="headerlink" title="5.链接"></a>5.链接</h5><p>分为<strong>行内</strong>和<strong>参考</strong>两种形式，两种都是使用角括号来把文字转成链接。</p><p>​    <strong>行内</strong></p><p>​        This is an <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>.</p><p>​    加上title属性:</p><p>​        This is an <a href="http://example.com/" title="With a Title" target="_blank" rel="noopener">example link</a>.</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is an [<span class="hljs-string">GitHub</span>](<span class="hljs-link">http://github.com/</span>).<br>This is an [<span class="hljs-string">example link</span>](<span class="hljs-link">http://example.com/ "With a Title"</span>).<br></code></pre></td></tr></table></figure><p>​    <strong>参考</strong></p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">I get 10 times more traffic from [<span class="hljs-string">Google</span>][<span class="hljs-symbol">1</span>] than from [<span class="hljs-string">Yahoo</span>][<span class="hljs-symbol">2</span>] or [<span class="hljs-string">MSN</span>][<span class="hljs-symbol">3</span>].<br><br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">http://google.com/ "Google"</span><br>[<span class="hljs-symbol">2</span>]: <span class="hljs-link">http://search.yahoo.com/ "Yahoo Search"</span><br>[<span class="hljs-symbol">3</span>]: <span class="hljs-link">http://search.msn.com/ "MSN Search"</span><br></code></pre></td></tr></table></figure><p>​    <strong>自动链接</strong></p><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><p><a href="mailto:&#x61;&#100;&#100;&#x72;&#101;&#x73;&#115;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x61;&#100;&#100;&#x72;&#101;&#x73;&#115;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#109;</a></p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;http://example.com/&gt;<br>&lt;address@example.com&gt;<br></code></pre></td></tr></table></figure><h5 id="6-图片"><a href="#6-图片" class="headerlink" title="6.图片"></a>6.图片</h5><p>​    图片的语法和链接很像。</p><p>​        <strong>行内</strong></p><p><img src="http://css.photophoto.cn/img/logo.gif" alt="alt text" title="Title"></p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt text</span>](<span class="hljs-link">http://css.photophoto.cn/img/logo.gif "Title"</span>)<br></code></pre></td></tr></table></figure><p>​        <strong>参考形式</strong></p><p><img src="http://css.photophoto.cn/img/logo.gif" alt="alt text" title="Title"></p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt text</span>][<span class="hljs-symbol">id</span>]<br><br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://css.photophoto.cn/img/logo.gif "Title"</span><br></code></pre></td></tr></table></figure><h5 id="7-代码"><a href="#7-代码" class="headerlink" title="7.代码"></a>7.代码</h5><p>\<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 表示代码块"><br>\``表示代码区块<br><br>如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 `&amp;`、`&lt;` 和 `&gt;` 也一样会自动转成 HTML 实体。<br><br>**Markdown 语法:**<br><br>```markdown<br>If you want your page to validate under XHTML 1.0 Strict,<br>you&apos;ve got to put paragraph tags in your blockquotes:<br><br>&lt;blockquote&gt;<br>&lt;p&gt;For example.&lt;/p&gt;<br>&lt;/blockquote&gt;<br></code></pre></td></tr></table></figure></p><h5 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h5><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">* </span><span class="hljs-bullet">* *</span><br><br><span class="hljs-emphasis">***</span><br><br><span class="hljs-strong">*****</span><br><br><span class="hljs-bullet">- </span>- -<br><br>---------------------------------------<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index-1.html"/>
      <url>/categories/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>about</title>
      <link href="/about/index-1.html"/>
      <url>/about/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>page title</title>
      <link href="/page-title/index.html"/>
      <url>/page-title/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
