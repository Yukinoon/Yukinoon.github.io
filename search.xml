<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>线程池和多线程工具类</title>
      <link href="/2019/06/05/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2019/06/05/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>静态内部类普通同步代码块和静态同步方法所公用的锁对象是 类.class</p><p>[TOC]</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="创建线程的两种传统方式"><a href="#创建线程的两种传统方式" class="headerlink" title="创建线程的两种传统方式"></a>创建线程的两种传统方式</h4><p>建议使用第二种，因为第二种更能体现面向对象的思想</p><a id="more"></a><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TraditionalThread</span> </span>&#123;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@param</span> args<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Thread thread = <span class="hljs-keyword">new</span> Thread()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br> &#125;<br>System.out.println(<span class="hljs-string">"1:"</span> + Thread.currentThread().getName());<br>System.out.println(<span class="hljs-string">"2:"</span> + <span class="hljs-keyword">this</span>.getName());<br>&#125;<br>&#125;<br>&#125;;<br>thread.start();<br><br><br>Thread thread2 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">"1:"</span> + Thread.currentThread().getName());<br><br>&#125;<br><br>&#125;<br>&#125;);<br>thread2.start();<br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="测试运行的是谁的run-方法"><a href="#测试运行的是谁的run-方法" class="headerlink" title="测试运行的是谁的run()方法"></a>测试运行的是谁的run()方法</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Thread(<br><span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">"runnable :"</span> + Thread.currentThread().getName());<br><br>&#125;<br>&#125;<br>&#125;<br>)&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">"thread :"</span> + Thread.currentThread().getName());<br><br>&#125;<br>&#125;<br>&#125;.start();<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>结论：运行的是Thread的run方法，原因是Thread子类若覆盖了父类的run（）方法则执行子类的run（）方法，若没有覆盖父类的run()方法，则寻找target（就是Runnable）的run（）方法。</p><h4 id="测试定时器"><a href="#测试定时器" class="headerlink" title="测试定时器"></a>测试定时器</h4><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TraditionalTimerTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//设定10S后爆炸</span><br><span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">new</span> TimerTask() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"bombing"</span>);<br>&#125;<br>&#125;, <span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">//每秒在控制台打印时间</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>System.out.println(<span class="hljs-keyword">new</span> Date().getSeconds() );<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>新需求：每隔两秒爆炸</p><p>错误示范：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">new</span> TimerTask() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"bombing"</span>);<br><span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">this</span>, <span class="hljs-number">2000</span>);<br>&#125;<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>控制台报错</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Exception in thread &quot;Timer-0&quot; java.lang.IllegalStateException: Task already scheduled or cancelled<br></code></pre></td></tr></table></figure><p>原因：任务已经被调度了，不能再次调度（子母弹也是不同的炸弹）。解决方法：将TimerTask定义成一个真正的类，不使用匿名内部类形式。</p><p>正确示范:</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTimerTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TimerTask</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"bombing!"</span>);<br><span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">new</span> MyTimerTask(), <span class="hljs-number">2000</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">new</span> MyTimerTask(),<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>2秒，4秒间隔爆炸（内部类中不能定义静态变量）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTimerTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TimerTask</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>count = (count+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<br>System.out.println(<span class="hljs-string">"bombing!"</span>);<br><span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">new</span> MyTimerTask(),<span class="hljs-number">2000</span>+<span class="hljs-number">2000</span>*count);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> Timer().schedule(<span class="hljs-keyword">new</span> MyTimerTask(), <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><h4 id="线程间的互斥和同步通讯"><a href="#线程间的互斥和同步通讯" class="headerlink" title="线程间的互斥和同步通讯"></a>线程间的互斥和同步通讯</h4><p>在外部类的静态方法中不能new 内部类的实例对象</p><p>会出现冲突的情况</p><h5 id="使用synchronized代码块"><a href="#使用synchronized代码块" class="headerlink" title="使用synchronized代码块"></a>使用synchronized代码块</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TraditionalThreadSynchronized</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> TraditionalThreadSynchronized().init();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">final</span> Outputer outputer = <span class="hljs-keyword">new</span> Outputer();<br><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>outputer.output(<span class="hljs-string">"zhangxiaoxiang"</span>);<br>&#125;<br><br>&#125;<br>&#125;).start();<br><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>outputer.output(<span class="hljs-string">"huangzhuo"</span>);<br>&#125;<br><br>&#125;<br>&#125;).start();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outputer</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(String name)</span></span>&#123;<br><span class="hljs-keyword">int</span> len = name.length();<br><span class="hljs-keyword">synchronized</span> (Outputer.class) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>System.out.print(name.charAt(i));<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output2</span><span class="hljs-params">(String name)</span></span>&#123;<br><span class="hljs-keyword">int</span> len = name.length();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>System.out.print(name.charAt(i));<br>&#125;<br>System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="静态同步方法"><a href="#静态同步方法" class="headerlink" title="静态同步方法"></a>静态同步方法</h5><p>静态方法只能写在外部类中，或者静态内部类，内部类加了statiic修饰就相当于外部类</p><p>想要output和output3同步，只能把同步代码块的锁由this 改为 “Outputer.class”，静态方法和字节码对象相关联。</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outputer</span> </span>&#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output3</span><span class="hljs-params">(String name)</span></span>&#123;<br>                   <span class="hljs-keyword">int</span> len = name.length();<br>                   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>                           System.out.print(name.charAt(i));<br>                   &#125;<br>                   System.out.println();<br>               &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="线程等待wait-和唤醒notify"><a href="#线程等待wait-和唤醒notify" class="headerlink" title="线程等待wait()和唤醒notify()"></a>线程等待wait()和唤醒notify()</h4><p>子线程循环10次，接着主线程循环100，接着又回到子线程循环10次，接着再主线程循环100次，如此循环50次    </p><p>经验：要用到共同数据（包括同步锁）的若干个方法应该归在同一个类上，这种设计正好体现了高类聚和程序的健壮性。</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TraditionalThreadCommunication</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">final</span> Business business = <span class="hljs-keyword">new</span> Business();<br><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++) &#123;<br>business.sub(i);<br>&#125;<br>&#125;<br><br>&#125;).start();<br><br><span class="hljs-comment">//main本身也是一个线程</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++) &#123;<br>business.main(i);<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Business</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> bShouldSub = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">while</span>(!bShouldSub) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//等待</span><br><span class="hljs-keyword">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++) &#123;<br>System.out.println(<span class="hljs-string">"子线程循环："</span>+j+<span class="hljs-string">"，"</span>+<span class="hljs-string">"重复第："</span>+i);<br>&#125;<br>bShouldSub = <span class="hljs-keyword">false</span>;<br><span class="hljs-comment">//唤醒</span><br><span class="hljs-keyword">this</span>.notify();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br><span class="hljs-keyword">while</span>(bShouldSub) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//等待</span><br><span class="hljs-keyword">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">100</span>;j++) &#123;<br>System.out.println(<span class="hljs-string">"主线程循环："</span>+j+<span class="hljs-string">"，"</span>+<span class="hljs-string">"重复第："</span>+i);<br>&#125;<br>bShouldSub = <span class="hljs-keyword">true</span>;<br><span class="hljs-comment">//唤醒</span><br><span class="hljs-keyword">this</span>.notify();<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>判断条件，if改为while更好，因为有时候没有被notify()，线程也有可能被唤醒，这种被称之为伪唤醒，使用while可以防止这种伪唤醒的情况。</strong></p><h4 id="ThreadLocal实现线程范围内共享变量"><a href="#ThreadLocal实现线程范围内共享变量" class="headerlink" title="ThreadLocal实现线程范围内共享变量"></a>ThreadLocal实现线程范围内共享变量</h4><h5 id="模拟ThreadLocal"><a href="#模拟ThreadLocal" class="headerlink" title="模拟ThreadLocal"></a>模拟ThreadLocal</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadScopeShareData</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> data = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Thread, Integer&gt; threadMap = <span class="hljs-keyword">new</span> HashMap&lt;Thread, Integer&gt;();<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> ; i++ ) &#123;<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> data = <span class="hljs-keyword">new</span> Random().nextInt();<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">" has put data :"</span>+data);<br>threadMap.put(Thread.currentThread(), data);<br><span class="hljs-keyword">new</span> A().get();<br><span class="hljs-keyword">new</span> B().get();<br><br>&#125;<br>&#125;).start();<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> data = threadMap.get(Thread.currentThread());<br>System.out.println(<span class="hljs-string">"A from :"</span> + Thread.currentThread().getName()+<span class="hljs-string">" get data :"</span>+data);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> data = threadMap.get(Thread.currentThread());<br>System.out.println(<span class="hljs-string">"B from :"</span> + Thread.currentThread().getName()+<span class="hljs-string">" get data :"</span>+data);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>控制台</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Thread-0 has put data :-1260710758<br>Thread-1 has put data :-1606794828<br>A from :Thread-0 get data :-1260710758<br>A from :Thread-1 get data :-1606794828<br>B from :Thread-0 get data :-1260710758<br>B from :Thread-1 get data :-1606794828<br></code></pre></td></tr></table></figure><h5 id="改造成ThreadLocal"><a href="#改造成ThreadLocal" class="headerlink" title="改造成ThreadLocal"></a>改造成ThreadLocal</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalTest</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Integer&gt; x = <span class="hljs-keyword">new</span> ThreadLocal&lt;Integer&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> ; i++ ) &#123;<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> data = <span class="hljs-keyword">new</span> Random().nextInt();<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">" has put data :"</span>+data);<br>x.set(data);<br><span class="hljs-keyword">new</span> A().get();<br><span class="hljs-keyword">new</span> B().get();<br><br>&#125;<br>&#125;).start();<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> data = x.get();<br>System.out.println(<span class="hljs-string">"A from :"</span> + Thread.currentThread().getName()+<span class="hljs-string">" get data :"</span>+data);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> data = x.get();<br>System.out.println(<span class="hljs-string">"B from :"</span> + Thread.currentThread().getName()+<span class="hljs-string">" get data :"</span>+data);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：一个ThreadLocal只能存一个变量，存多个变量就要创建多个ThreadLocal。存多个对象可以定义一个pojo对象，封装起来。</p><h5 id="设计单个线程内共享变量"><a href="#设计单个线程内共享变量" class="headerlink" title="设计单个线程内共享变量"></a>设计单个线程内共享变量</h5><p>精髓</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadScopeData</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MyThreadScopeData</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-comment">/*synchronized*/</span> <span class="hljs-function">MyThreadScopeData <span class="hljs-title">getThreadInstance</span><span class="hljs-params">()</span></span>&#123;<br>MyThreadScopeData instance = map.get();<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> MyThreadScopeData();<br>map.set(instance);<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;MyThreadScopeData&gt; map = <span class="hljs-keyword">new</span> ThreadLocal&lt;MyThreadScopeData&gt;();<br></code></pre></td></tr></table></figure><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.heima2;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalTest</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Integer&gt; x = <span class="hljs-keyword">new</span> ThreadLocal&lt;Integer&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;MyThreadScopeData&gt; myThreadScopeData = <span class="hljs-keyword">new</span> ThreadLocal&lt;MyThreadScopeData&gt;();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)&#123;<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> data = <span class="hljs-keyword">new</span> Random().nextInt();<br>System.out.println(Thread.currentThread().getName() <br>+ <span class="hljs-string">" has put data :"</span> + data);<br>x.set(data);<br>MyThreadScopeData.getThreadInstance().setName(<span class="hljs-string">"name"</span> + data);<br>MyThreadScopeData.getThreadInstance().setAge(data);<br><span class="hljs-keyword">new</span> A().get();<br><span class="hljs-keyword">new</span> B().get();<br>&#125;<br>&#125;).start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> data = x.get();<br>System.out.println(<span class="hljs-string">"A from "</span> + Thread.currentThread().getName() <br>+ <span class="hljs-string">" get data :"</span> + data);<br>MyThreadScopeData myData = MyThreadScopeData.getThreadInstance();<br>System.out.println(<span class="hljs-string">"A from "</span> + Thread.currentThread().getName() <br>+ <span class="hljs-string">" getMyData: "</span> + myData.getName() + <span class="hljs-string">","</span> +<br>myData.getAge());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> data = x.get();<br>System.out.println(<span class="hljs-string">"B from "</span> + Thread.currentThread().getName() <br>+ <span class="hljs-string">" get data :"</span> + data);<br>MyThreadScopeData myData = MyThreadScopeData.getThreadInstance();<br>System.out.println(<span class="hljs-string">"B from "</span> + Thread.currentThread().getName() <br>+ <span class="hljs-string">" getMyData: "</span> + myData.getName() + <span class="hljs-string">","</span> +<br>myData.getAge());<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadScopeData</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MyThreadScopeData</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-comment">/*synchronized*/</span> <span class="hljs-function">MyThreadScopeData <span class="hljs-title">getThreadInstance</span><span class="hljs-params">()</span></span>&#123;<br>MyThreadScopeData instance = map.get();<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> MyThreadScopeData();<br>map.set(instance);<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;MyThreadScopeData&gt; map = <span class="hljs-keyword">new</span> ThreadLocal&lt;MyThreadScopeData&gt;();<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="线程并发库"><a href="#线程并发库" class="headerlink" title="线程并发库"></a>线程并发库</h5><h5 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h5><p>AtomicInteger,AtomicIntegerArray,AtomicIntegerFieldUpdater</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.heima2;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolTest</span> </span>&#123;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@param</span> args<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//ExecutorService threadPool = Executors.newFixedThreadPool(3);</span><br><span class="hljs-comment">//ExecutorService threadPool = Executors.newCachedThreadPool();//缓存线程池，线程数量不定</span><br>ExecutorService threadPool = Executors.newSingleThreadExecutor();<span class="hljs-comment">//只有一个线程的线程池</span><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span> ;i&lt;<span class="hljs-number">6</span>;i++) &#123;<br> <span class="hljs-keyword">int</span> task = i;<br><br>threadPool.execute(<span class="hljs-keyword">new</span> Runnable() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span> ;j&lt;<span class="hljs-number">3</span>;j++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">20</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">" loop of "</span>+j+<span class="hljs-string">" for task of "</span>+ task ) ;<br>&#125;<br><br>&#125;<br>&#125;);<br><br>&#125;<br><br>threadPool.shutdown();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>控制台</p><p>newFixedThreadPool（每次只有三个task被线程拿去服务）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>newCachedThreadPool（多少个任务就多少个线程）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">6</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">6</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">4</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">5</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">6</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>newSingleThreadExecutor(如果这个线程死了会重新创建一个出来)</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">0</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">1</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">2</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">3</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">4</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br>pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span> loop of <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> task of <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h5 id="用线程池启动定时器"><a href="#用线程池启动定时器" class="headerlink" title="用线程池启动定时器"></a>用线程池启动定时器</h5><p>TimeUnit.SECONDS，定义单位为秒</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Executors.newScheduledThreadPool(<span class="hljs-number">3</span>).schedule(<span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"爆炸！！"</span>);<br>&#125;<br>&#125;, <span class="hljs-number">2</span>, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure><p>重复运行</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Executors.newScheduledThreadPool(<span class="hljs-number">3</span>).scheduleAtFixedRate(<br><span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"爆炸！！"</span>);<br><br>&#125;&#125;,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure><h4 id="Callable与Future的应用"><a href="#Callable与Future的应用" class="headerlink" title="Callable与Future的应用"></a>Callable与Future的应用</h4><p>Callable</p><p>Callable执行可以返回一个结果，可以用future.get()去获取</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.heima2;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.Future;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableAndFuture</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ExecutorService threadPool = Executors.newSingleThreadExecutor();<br>Future&lt;String&gt; future = threadPool.submit(<span class="hljs-keyword">new</span> Callable&lt;String&gt;() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;<br>&#125;<br><br>&#125;);<br>System.out.println(<span class="hljs-string">"等待结果"</span>);<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">"拿到结果："</span>+future.get());<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>提交一组任务</p><p> 睡得时间随机，先醒的先获取</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService threadPool2 =  Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>CompletionService&lt;Integer&gt; completionService = <span class="hljs-keyword">new</span> ExecutorCompletionService&lt;Integer&gt;(threadPool2);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> seq = i;<br>completionService.submit(<span class="hljs-keyword">new</span> Callable&lt;Integer&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                    <span class="hljs-comment">//睡得时间随机，先醒的先获取</span><br>Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br><span class="hljs-keyword">return</span> seq;<br>&#125;<br>&#125;);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(completionService.take().get());<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程锁技术"><a href="#线程锁技术" class="headerlink" title="线程锁技术"></a>线程锁技术</h4><h5 id="lock"><a href="#lock" class="headerlink" title="lock()"></a>lock()</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockTest</span> </span>&#123;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@param</span> args<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> LockTest().init();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">final</span> Outputer outputer = <span class="hljs-keyword">new</span> Outputer();<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>outputer.output(<span class="hljs-string">"zhangxiaoxiang"</span>);<br>&#125;<br><br>&#125;<br>&#125;).start();<br><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>outputer.output(<span class="hljs-string">"lihuoming"</span>);<br>&#125;<br><br>&#125;<br>&#125;).start();<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outputer</span></span>&#123;<br>Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(String name)</span></span>&#123;<br><span class="hljs-keyword">int</span> len = name.length();<br>lock.lock();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//防止执行sys发生中止，出现异常</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>System.out.print(name.charAt(i));<br>&#125;<br>System.out.println();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>lock.unlock();<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h5><p>多个读锁不互斥、写锁和读锁互斥、写锁与写锁互斥</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReadWriteLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadWriteLockTest</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">final</span> Queue3 q3 = <span class="hljs-keyword">new</span> Queue3();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++) &#123;<br><span class="hljs-keyword">new</span> Thread()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>q3.get();<br>&#125;<br>&#125;<br><br>&#125;.start();<br><br><span class="hljs-keyword">new</span> Thread()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>q3.put(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">10000</span>));<br>&#125;<br>&#125;<br><br>&#125;.start();<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue3</span></span>&#123;<br><span class="hljs-keyword">private</span> Object data = <span class="hljs-keyword">null</span>;<span class="hljs-comment">//</span><br>ReadWriteLock rwl = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>&#123;<br>rwl.readLock().lock();<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" be ready to read data!"</span>);<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">1000</span>));<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"have read data :"</span> + data);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>rwl.readLock().unlock();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(Object data)</span></span>&#123;<br><br>rwl.writeLock().lock();<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" be ready to write data!"</span>);<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">1000</span>));<br><span class="hljs-keyword">this</span>.data = data;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" have write data: "</span> + data);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>rwl.writeLock().unlock();<br>&#125;<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="锁降级"><a href="#锁降级" class="headerlink" title="锁降级"></a>锁降级</h5><p>锁降级指的是写锁降级成为读锁。锁降级是指把持住当前拥有的写锁的同时，再获取到读锁，随后释放写锁的过程。以下是oracle官网的对于锁降级的示例代码：</p><p>在释放写锁前，去挂读锁，就会把写锁降级为更新锁。</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachedData</span> </span>&#123;<br>   Object data;<br>   <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> cacheValid;<br>   <span class="hljs-keyword">final</span> ReentrantReadWriteLock rwl = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">processCachedData</span><span class="hljs-params">()</span> </span>&#123;<br>     rwl.readLock().lock();<br>     <span class="hljs-keyword">if</span> (!cacheValid) &#123;<br>        <span class="hljs-comment">// Must release read lock before acquiring write lock</span><br>        rwl.readLock().unlock();<br>        rwl.writeLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// Recheck state because another thread might have</span><br>          <span class="hljs-comment">// acquired write lock and changed state before we did.</span><br>          <span class="hljs-keyword">if</span> (!cacheValid) &#123;<br>            data = ...<br>            cacheValid = <span class="hljs-keyword">true</span>;<br>          &#125;<br>          <span class="hljs-comment">// Downgrade by acquiring read lock before releasing write lock</span><br>          rwl.readLock().lock();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          rwl.writeLock().unlock(); <span class="hljs-comment">// Unlock write, still hold read</span><br>        &#125;<br>     &#125;<br><br>     <span class="hljs-keyword">try</span> &#123;<br>       use(data);<br>     &#125; <span class="hljs-keyword">finally</span> &#123;<br>       rwl.readLock().unlock();<br>     &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="设计一个缓存系统"><a href="#设计一个缓存系统" class="headerlink" title="设计一个缓存系统"></a>设计一个缓存系统</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.heima2;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReadWriteLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheDemo</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; cache = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> ReadWriteLock rwl = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><span class="hljs-function"><span class="hljs-keyword">public</span>  Object <span class="hljs-title">getData</span><span class="hljs-params">(String key)</span></span>&#123;<br>rwl.readLock().lock();<br>Object value = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br>value = cache.get(key);<br><span class="hljs-keyword">if</span>(value == <span class="hljs-keyword">null</span>)&#123;<br>rwl.readLock().unlock();<br>rwl.writeLock().lock();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">if</span>(value==<span class="hljs-keyword">null</span>)&#123;<br>value = <span class="hljs-string">"aaaa"</span>;<span class="hljs-comment">//实际失去queryDB();</span><br>&#125;<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>rwl.writeLock().unlock();<br>&#125;<br>rwl.readLock().lock();<br>&#125;<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>rwl.readLock().unlock();<br>&#125;<br><span class="hljs-keyword">return</span> value;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Condition条件阻塞"><a href="#Condition条件阻塞" class="headerlink" title="Condition条件阻塞"></a>Condition条件阻塞</h4><p>Condition的功能类似于传统线程技术中的wait和notify功能</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>Condition condition = lock.newCondition();<br>condition.await();<br>condition.signal();<br></code></pre></td></tr></table></figure><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConditionCommunication</span> </span>&#123;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@param</span> args<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">final</span> Business business = <span class="hljs-keyword">new</span> Business();<br><span class="hljs-keyword">new</span> Thread(<br><span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>business.sub(i);<br>&#125;<br><br>&#125;<br>&#125;<br>).start();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>business.main(i);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Business</span> </span>&#123;<br>Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>Condition condition = lock.newCondition();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> bShouldSub = <span class="hljs-keyword">true</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>  lock.lock();<br>  <span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-keyword">while</span>(!bShouldSub)&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>condition.await();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>  &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">"sub thread sequence of "</span> + j + <span class="hljs-string">",loop of "</span> + i);<br>&#125;<br>  bShouldSub = <span class="hljs-keyword">false</span>;<br>  condition.signal();<br>  &#125;<span class="hljs-keyword">finally</span>&#123;<br>  lock.unlock();<br>  &#125;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>  lock.lock();<br>  <span class="hljs-keyword">try</span>&#123;<br> <span class="hljs-keyword">while</span>(bShouldSub)&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>condition.await();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>  &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">100</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">"main thread sequence of "</span> + j + <span class="hljs-string">",loop of "</span> + i);<br>&#125;<br>bShouldSub = <span class="hljs-keyword">true</span>;<br>condition.signal();<br>  &#125;<span class="hljs-keyword">finally</span>&#123;<br>  lock.unlock();<br>  &#125;<br>  &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Condition设计阻塞队列"><a href="#Condition设计阻塞队列" class="headerlink" title="Condition设计阻塞队列"></a>Condition设计阻塞队列</h5><p>必须要使用两个Condition，不能使用一个Condition。一个情况，n个线程去取和放，队列只剩一个位置，一个线程放完后只能唤醒取的线程，若只有一个Condition则有可能唤醒放的线程。</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BoundedBuffer</span> </span>&#123;<br>   <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>   <span class="hljs-keyword">final</span> Condition notFull  = lock.newCondition(); <br>   <span class="hljs-keyword">final</span> Condition notEmpty = lock.newCondition(); <br><br>   <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span> putptr, takeptr, count;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(Object x)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>     lock.lock(); <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-keyword">while</span> (count == items.length)<br>         notFull.await();<br>       items[putptr] = x;<br>       <span class="hljs-keyword">if</span> (++putptr == items.length) putptr = <span class="hljs-number">0</span>;<br>       ++count;<br>       notEmpty.signal();<br>     &#125; <span class="hljs-keyword">finally</span> &#123; lock.unlock(); &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>     lock.lock(); <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>)<br>         notEmpty.await();<br>       Object x = items[takeptr];<br>       <span class="hljs-keyword">if</span> (++takeptr == items.length) takeptr = <span class="hljs-number">0</span>;<br>       --count;<br>       notFull.signal();<br>       <span class="hljs-keyword">return</span> x;<br>     &#125; <span class="hljs-keyword">finally</span> &#123; lock.unlock(); &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="三个线程一人执行一次"><a href="#三个线程一人执行一次" class="headerlink" title="三个线程一人执行一次"></a>三个线程一人执行一次</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreeConditionCommunication</span> </span>&#123;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@param</span> args<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">final</span> Business business = <span class="hljs-keyword">new</span> Business();<br><span class="hljs-keyword">new</span> Thread(<br><span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>business.sub2(i);<br>&#125;<br><br>&#125;<br>&#125;<br>).start();<br><br><span class="hljs-keyword">new</span> Thread(<br><span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>business.sub3(i);<br>&#125;<br><br>&#125;<br>&#125;<br>).start();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>business.main(i);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Business</span> </span>&#123;<br>Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>Condition condition1 = lock.newCondition();<br>Condition condition2 = lock.newCondition();<br>Condition condition3 = lock.newCondition();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> shouldSub = <span class="hljs-number">1</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">sub2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>  lock.lock();<br>  <span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-keyword">while</span>(shouldSub != <span class="hljs-number">2</span>)&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>condition2.await();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>  &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">"sub2 thread sequence of "</span> + j + <span class="hljs-string">",loop of "</span> + i);<br>&#125;<br>  shouldSub = <span class="hljs-number">3</span>;<br>  condition3.signal();<br>  &#125;<span class="hljs-keyword">finally</span>&#123;<br>  lock.unlock();<br>  &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">sub3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>  lock.lock();<br>  <span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-keyword">while</span>(shouldSub != <span class="hljs-number">3</span>)&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>condition3.await();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>  &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">20</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">"sub3 thread sequence of "</span> + j + <span class="hljs-string">",loop of "</span> + i);<br>&#125;<br>  shouldSub = <span class="hljs-number">1</span>;<br>  condition1.signal();<br>  &#125;<span class="hljs-keyword">finally</span>&#123;<br>  lock.unlock();<br>  &#125;<br>  &#125;  <br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>  lock.lock();<br>  <span class="hljs-keyword">try</span>&#123;<br> <span class="hljs-keyword">while</span>(shouldSub != <span class="hljs-number">1</span>)&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>condition1.await();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>  &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">100</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">"main thread sequence of "</span> + j + <span class="hljs-string">",loop of "</span> + i);<br>&#125;<br>shouldSub = <span class="hljs-number">2</span>;<br>condition2.signal();<br>  &#125;<span class="hljs-keyword">finally</span>&#123;<br>  lock.unlock();<br>  &#125;<br>  &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Samaphore实现信号灯"><a href="#Samaphore实现信号灯" class="headerlink" title="Samaphore实现信号灯"></a>Samaphore实现信号灯</h4><p>类似于食堂吃饭占座</p><p>单信号量的Samaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得了“锁”，再由另一个线程释放“锁”，这可以用于死锁恢复的一些场合。</p><figure class="hljs highlight JAVA"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SemaphoreTest</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ExecutorService service = Executors.newCachedThreadPool();<br><span class="hljs-comment">//创建三盏灯</span><br><span class="hljs-keyword">final</span>  Semaphore sp = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>Runnable runnable = <span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//获取“一盏灯”</span><br>sp.acquire();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e1) &#123;<br>e1.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"进入，当前已有"</span> + (<span class="hljs-number">3</span>-sp.availablePermits()) + <span class="hljs-string">"个并发"</span>);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"即将离开"</span>);<br><span class="hljs-comment">//释放“一盏灯”</span><br>sp.release();<br><span class="hljs-comment">//下面代码有时候执行不准确，因为其没有和上面的代码合成原子单元</span><br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"已离开，当前已有"</span> + (<span class="hljs-number">3</span>-sp.availablePermits()) + <span class="hljs-string">"个并发"</span>);<br>&#125;<br>&#125;;<br>service.execute(runnable);<br><br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CyclicBarrier线程同步工具（类似于旅游集合）"><a href="#CyclicBarrier线程同步工具（类似于旅游集合）" class="headerlink" title="CyclicBarrier线程同步工具（类似于旅游集合）"></a>CyclicBarrier线程同步工具（类似于旅游集合）</h4><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CyclicBarrier;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrierTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ExecutorService service = Executors.newCachedThreadPool();<br><span class="hljs-comment">//创建三个集合点</span><br><span class="hljs-keyword">final</span>  CyclicBarrier cb = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>Runnable runnable = <span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"即将到达集合地点1，当前已有"</span> + (cb.getNumberWaiting()+<span class="hljs-number">1</span>) + <span class="hljs-string">"个已经到达，"</span> + (cb.getNumberWaiting()==<span class="hljs-number">2</span>?<span class="hljs-string">"都到齐了，继续走啊"</span>:<span class="hljs-string">"正在等候"</span>));<br><span class="hljs-comment">//第一个集合点，等待</span><br>cb.await();<br><br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"即将到达集合地点2，当前已有"</span> + (cb.getNumberWaiting()+<span class="hljs-number">1</span>) + <span class="hljs-string">"个已经到达，"</span> + (cb.getNumberWaiting()==<span class="hljs-number">2</span>?<span class="hljs-string">"都到齐了，继续走啊"</span>:<span class="hljs-string">"正在等候"</span>));<br><span class="hljs-comment">//第一个集合点，等待</span><br>cb.await();<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"即将到达集合地点3，当前已有"</span> + (cb.getNumberWaiting() + <span class="hljs-number">1</span>) + <span class="hljs-string">"个已经到达，"</span> + (cb.getNumberWaiting()==<span class="hljs-number">2</span>?<span class="hljs-string">"都到齐了，继续走啊"</span>:<span class="hljs-string">"正在等候"</span>));<br><span class="hljs-comment">//第一个集合点，等待</span><br>cb.await();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;;<br>service.execute(runnable);<br>&#125;<br>service.shutdown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>即将到达集合地点<span class="hljs-number">1</span>，当前已有<span class="hljs-number">1</span>个已经到达，正在等候<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>即将到达集合地点<span class="hljs-number">1</span>，当前已有<span class="hljs-number">2</span>个已经到达，正在等候<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>即将到达集合地点<span class="hljs-number">1</span>，当前已有<span class="hljs-number">3</span>个已经到达，都到齐了，继续走啊<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>即将到达集合地点<span class="hljs-number">2</span>，当前已有<span class="hljs-number">1</span>个已经到达，正在等候<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>即将到达集合地点<span class="hljs-number">2</span>，当前已有<span class="hljs-number">2</span>个已经到达，正在等候<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>即将到达集合地点<span class="hljs-number">2</span>，当前已有<span class="hljs-number">3</span>个已经到达，都到齐了，继续走啊<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>即将到达集合地点<span class="hljs-number">3</span>，当前已有<span class="hljs-number">1</span>个已经到达，正在等候<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>即将到达集合地点<span class="hljs-number">3</span>，当前已有<span class="hljs-number">2</span>个已经到达，正在等候<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>即将到达集合地点<span class="hljs-number">3</span>，当前已有<span class="hljs-number">3</span>个已经到达，都到齐了，继续走啊<br></code></pre></td></tr></table></figure><h4 id="CountDownLatch（倒数计数器）"><a href="#CountDownLatch（倒数计数器）" class="headerlink" title="CountDownLatch（倒数计数器）"></a>CountDownLatch（倒数计数器）</h4><p>倒数的计数器</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><span class="hljs-keyword">import</span> java.util.concurrent.CyclicBarrier;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CountdownLatchTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ExecutorService service = Executors.newCachedThreadPool();<br><span class="hljs-keyword">final</span> CountDownLatch cdOrder = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">final</span> CountDownLatch cdAnswer = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>Runnable runnable = <span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"正准备接受命令"</span>);<br>cdOrder.await();<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"已接受命令"</span>);<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"回应命令处理结果"</span>);<br>cdAnswer.countDown();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;;<br>service.execute(runnable);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br><br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"即将发布命令"</span>);<br>cdOrder.countDown();<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"已发送命令，正在等待结果"</span>);<br>cdAnswer.await();<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"已收到所有响应结果"</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>service.shutdown();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>正准备接受命令<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>正准备接受命令<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>正准备接受命令<br>线程main即将发布命令<br>线程main已发送命令，正在等待结果<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>已接受命令<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>已接受命令<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>已接受命令<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">3</span>回应命令处理结果<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>回应命令处理结果<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>回应命令处理结果<br>线程main已收到所有响应结果<br></code></pre></td></tr></table></figure><h4 id="Exchanger（数据交换）"><a href="#Exchanger（数据交换）" class="headerlink" title="Exchanger（数据交换）"></a>Exchanger（数据交换）</h4><p>用于实现两个线程间的数据交换，每一个人在完成一定事务后都想和对方交换数据，第一个先拿出数据的人将一直等待第二个人拿着数据来时，才能交换彼此的数据。</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Exchanger;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExchangerTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ExecutorService service = Executors.newCachedThreadPool();<br><span class="hljs-keyword">final</span> Exchanger exchanger = <span class="hljs-keyword">new</span> Exchanger();<br>service.execute(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><br>String data1 = <span class="hljs-string">"zxx"</span>;<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"正在把数据"</span> + data1 +<span class="hljs-string">"换出去"</span>);<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br>String data2 = (String)exchanger.exchange(data1);<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"换回的数据为"</span> + data2);<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>&#125;<br>&#125;<br>&#125;);<br>service.execute(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><br>String data1 = <span class="hljs-string">"lhm"</span>;<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"正在把数据"</span> + data1 +<span class="hljs-string">"换出去"</span>);<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">10000</span>));<br>String data2 = (String)exchanger.exchange(data1);<br>System.out.println(<span class="hljs-string">"线程"</span> + Thread.currentThread().getName() + <br><span class="hljs-string">"换回的数据为"</span> + data2);<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>&#125;<br>&#125;<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>正在把数据zxx换出去<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>正在把数据lhm换出去<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">2</span>换回的数据为zxx<br>线程pool-<span class="hljs-number">1</span>-thread-<span class="hljs-number">1</span>换回的数据为lhm<br></code></pre></td></tr></table></figure><h4 id="阻塞队列BlockingQueue"><a href="#阻塞队列BlockingQueue" class="headerlink" title="阻塞队列BlockingQueue"></a>阻塞队列BlockingQueue</h4><h5 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h5><p><strong>add</strong>        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常<br><strong>remove</strong>   移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常<br><strong>element</strong>  返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常<br><strong>offer</strong>       添加一个元素并返回true       如果队列已满，则返回false<br><strong>poll</strong>         移除并返问队列头部的元素    如果队列为空，则返回null<br><strong>peek</strong>       返回队列头部的元素             如果队列为空，则返回null<br><strong>put</strong>         添加一个元素                      如果队列满，则阻塞<br><strong>take</strong>        移除并返回队列头部的元素     如果队列为空，则阻塞</p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>现在设计两个线程放数据，一个线程取数据</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlockingQueueTest</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">final</span> BlockingQueue queue = <span class="hljs-keyword">new</span> ArrayBlockingQueue(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)&#123;<br><span class="hljs-keyword">new</span> Thread()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep((<span class="hljs-keyword">long</span>)(Math.random()*<span class="hljs-number">1000</span>));<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"准备放数据!"</span>);<br>queue.put(<span class="hljs-number">1</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"已经放了数据，"</span> + <br><span class="hljs-string">"队列目前有"</span> + queue.size() + <span class="hljs-string">"个数据"</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br>&#125;<br><br>&#125;.start();<br>&#125;<br><br><span class="hljs-keyword">new</span> Thread()&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//将此处的睡眠时间分别改为100和1000，观察运行结果</span><br>Thread.sleep(<span class="hljs-number">1000</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"准备取数据!"</span>);<br>queue.take();<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"已经取走数据，"</span> + <br><span class="hljs-string">"队列目前有"</span> + queue.size() + <span class="hljs-string">"个数据"</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台（中途人为终止）</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Thread-1准备放数据!<br>Thread-1已经放了数据，队列目前有1个数据<br>Thread-1准备放数据!<br>Thread-1已经放了数据，队列目前有2个数据<br>Thread-0准备放数据!<br>Thread-0已经放了数据，队列目前有3个数据<br>Thread-2准备取数据!<br>Thread-2已经取走数据，队列目前有2个数据<br>Thread-1准备放数据!<br>Thread-1已经放了数据，队列目前有3个数据<br>Thread-0准备放数据!<br>Thread-2准备取数据!<br>Thread-2已经取走数据，队列目前有2个数据<br>Thread-0已经放了数据，队列目前有3个数据<br>Thread-1准备放数据!<br>Thread-0准备放数据!<br>Thread-2准备取数据!<br>Thread-2已经取走数据，队列目前有2个数据<br>Thread-1已经放了数据，队列目前有3个数据<br></code></pre></td></tr></table></figure><h5 id="阻塞队列实现同步通知的功能"><a href="#阻塞队列实现同步通知的功能" class="headerlink" title="阻塞队列实现同步通知的功能"></a>阻塞队列实现同步通知的功能</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlockingQueueCommunication</span> </span>&#123;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@param</span> args<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">final</span> Business business = <span class="hljs-keyword">new</span> Business();<br><span class="hljs-keyword">new</span> Thread(<br><span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>business.sub(i);<br>&#125;<br><br>&#125;<br>&#125;<br>).start();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br>business.main(i);<br>&#125;<br><br>&#125;<br><br> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Business</span> </span>&#123;<br> <br> <br>  BlockingQueue&lt;Integer&gt; queue1 = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="hljs-number">1</span>);<br>  BlockingQueue&lt;Integer&gt; queue2 = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="hljs-number">1</span>);<br>  <br>  <span class="hljs-comment">//匿名构造方法，运行时机在任何构造方法之前，new多少个对象就执行多少次</span><br>  &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>queue2.put(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>queue1.put(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">"sub thread sequece of "</span> + j + <span class="hljs-string">",loop of "</span> + i);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>queue2.take();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>queue2.put(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e1) &#123;<br>e1.printStackTrace();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">100</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">"main thread sequece of "</span> + j + <span class="hljs-string">",loop of "</span> + i);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>queue1.take();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>  &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><h5 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h5><p>现有程序代码模拟产生16个日志对象，并且需要运行16秒才能打印完这些日志，请在程序中新增四个线程去调用parseLog()方法分头打印这16个日志对象，程序只要四秒就可以打完这些日志对象。</p><p>原始代码</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> read;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>System.out.println(<span class="hljs-string">"begin:"</span>+(System.currentTimeMillis()/<span class="hljs-number">1000</span>));<br><span class="hljs-comment">/*模拟处理16行日志，下面的代码产生了16个日志对象，当前代码需要运行16秒才能打印完这些日志。<br>修改程序代码，开四个线程让这16个对象在4秒钟打完。<br>*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;  <span class="hljs-comment">//这行代码不能改动</span><br><span class="hljs-keyword">final</span> String log = <span class="hljs-string">""</span>+(i+<span class="hljs-number">1</span>);<span class="hljs-comment">//这行代码不能改动</span><br>&#123;<br>     Test.parseLog(log);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//parseLog方法内部的代码不能改动</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseLog</span><span class="hljs-params">(String log)</span></span>&#123;<br>System.out.println(log+<span class="hljs-string">":"</span>+(System.currentTimeMillis()/<span class="hljs-number">1000</span>));<br><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>利用阻塞队列</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> read;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//final BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(16);</span><br>        <span class="hljs-keyword">final</span> BlockingQueue&lt;String&gt; queue = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>String log = queue.take();<br>parseLog(log);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;).start();<br>&#125;<br><br>System.out.println(<span class="hljs-string">"begin:"</span>+(System.currentTimeMillis()/<span class="hljs-number">1000</span>));<br><span class="hljs-comment">/*模拟处理16行日志，下面的代码产生了16个日志对象，当前代码需要运行16秒才能打印完这些日志。<br>修改程序代码，开四个线程让这16个对象在4秒钟打完。<br>*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;  <span class="hljs-comment">//这行代码不能改动</span><br><span class="hljs-keyword">final</span> String log = <span class="hljs-string">""</span>+(i+<span class="hljs-number">1</span>);<span class="hljs-comment">//这行代码不能改动</span><br>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>queue.put(log);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>     <span class="hljs-comment">//Test.parseLog(log);</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//parseLog方法内部的代码不能改动</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseLog</span><span class="hljs-params">(String log)</span></span>&#123;<br>System.out.println(log+<span class="hljs-string">":"</span>+(System.currentTimeMillis()/<span class="hljs-number">1000</span>));<br><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>传统多线程知识点</title>
      <link href="/2019/06/05/%E4%BC%A0%E7%BB%9F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/06/05/%E4%BC%A0%E7%BB%9F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="10-传统多线程"><a href="#10-传统多线程" class="headerlink" title="10. 传统多线程"></a>10. 传统多线程</h2><h3 id="10-1-多线程的概述"><a href="#10-1-多线程的概述" class="headerlink" title="10.1 多线程的概述"></a>10.1 多线程的概述</h3><p>由于线程是依赖于进程而存在，所以先了解进程。</p><ul><li><p><strong>进程：</strong></p><p>就是正在运行的程序。</p><p>进程是系统进行资源分配和调用的独立单位，没一个进程都有它自己的内存空间和系统资源。</p></li><li><p><strong>多进程的意义：</strong></p><ol><li>可以在一个时间段内执行多个任务；</li><li>可以提高CPU的使用率。</li></ol><a id="more"></a></li><li><p><strong>线程：</strong></p><p>同一个进程内又可能包含多个任务，这每一个任务就可以看成是一个线程。</p><p>线程是程序的执行单元/执行路径，是程序使用CPU的基本单位。</p><p>如果程序只有一条执行路径即为单线程，如果程序有多条执行路径即为多线程。</p></li><li><p><strong>多线程的意义：</strong></p><ol><li>提高应用程序的使用率。</li><li>如果一个进程有多个线程，将会有更高的几率获得更多系统资源。</li></ol></li><li><p><strong>并发和并行：</strong></p><ul><li>并发：是指逻辑上同时发生，在某一个时间段内同时运行多个程序。</li><li>并行：是指物理上同时发生，在某一个时间点上同时运行多个程序。</li></ul></li><li><p><strong>相关问题：</strong></p><ul><li><p>Java程序运行时的线程调度：</p><p>java命令会先启动Java虚拟机（JVM），也就是启动了一个程序（启动了一个进程）。该程序会启动一个主线程，然后该线程去调用某个类的main方法。</p></li><li><p>多个进程在单CPU上是同时进行的吗？</p><p>不是，因为单CPU在某一个时间点上只能做一件事情。</p><p>我们感觉到的同时进行，是因为CPU在做着进程间的高效切换。</p></li><li><p>Java虚拟机的启动是单线程的还是多线程的？</p><p>是多线程的。</p><p>因为至少启动了主线程和垃圾回收器线程。</p></li></ul></li></ul><h3 id="10-2-多线程的实现"><a href="#10-2-多线程的实现" class="headerlink" title="10.2 多线程的实现"></a>10.2 多线程的实现</h3><p>由于线程是依赖进程存在的，所以首先应创建一个进程。</p><p>进程是由系统创建的，所以我们需要调用系统功能去创建一个进程。</p><p>Java不能直接调用系统功能，没有办法直接实现多线程程序，不过可以通过调用C/C++写好的程序来实现。</p><p>将C/C++写好的程序功能封装成Java类，就可以实现Java多线程程序了。</p><p>Java提供的线程类是：Thread。</p><ul><li><p><strong>方式一（继承Thread类）：</strong></p><ol><li>自定义类MyThread继承自Thread类；</li><li>MyThread类中重写run()方法；</li><li>创建对象；</li><li>启动线程。</li></ol><p>实例：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-title">extend</span> <span class="hljs-title">Thread</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        ...<span class="hljs-comment">//线程中要执行的内容</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        MyThread tr1 = <span class="hljs-keyword">new</span> MyThread();<br>        MyThread tr2 = <span class="hljs-keyword">new</span> MyThread();<br>        <br>        tr1.start();<span class="hljs-comment">//启动线程</span><br>        tr2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>方式二（实现Runnable）：</strong></p><ol><li>自定义类MyRunnable实现接口Runnable；</li><li>重写run()方法；</li><li>创建MyRunnable类的对象；</li><li>创建Thread类的对象，把创建的MyRunnable对象当成参数传递；</li><li>启动线程。</li></ol><p>实例：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-title">implments</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        ...<span class="hljs-comment">//线程中要执行的内容</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        MyRunnable mr = <span class="hljs-keyword">new</span> MyRunnable();<br>        <br>        Thread th1 = <span class="hljs-keyword">new</span> Thread(mr, <span class="hljs-string">"线程1"</span>);<br>        Thread th2 = <span class="hljs-keyword">new</span> Thread(mr);<br>        <br>        th1.start();<br>        th2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>方式三（线程池）：</strong></p><p><strong>（仅了解）</strong></p><p>使用ExecutorService（线程池）、Callable和Future实现有返回值的多线程：</p><ol><li>自定义类实现Callable<v>；</v></li><li>重写<v> call()方法，返回值为V；</v></li><li>创建线程池；</li><li>创建Callable<v>实现类对象；</v></li><li>将对象submit到常量池，用Future<v>对象接收；</v></li><li>Future<v>对象调用get()方法得到返回值；</v></li><li>关闭线程池。</li></ol><p>实例：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyCallable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.number = number;<br>    &#125;<br>    <span class="hljs-keyword">public</span> &lt;Integer&gt; call() <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>;x &lt;= number;x ++)&#123;<br>            sum += x;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        ExecutorService pool = Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>        <br>        Future&lt;Integer&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> MyCallable(<span class="hljs-number">100</span>));<br>        Future&lt;Integer&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> MyCallable(<span class="hljs-number">200</span>));<br>        <br>        Integer i1 = f1.get();<br>        Integer i2 = f2.get();<br>        <br>        System.out.println(i1);<br>        System.out.println(i2);<br>        <br>        pool.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>相关重要问题：</strong></p><ol><li><p><strong>为什么要重写run()方法？</strong></p><p>不是类中所有代码都要被线程执行的。</p><p>为了区分哪些代码需要被线程执行，Java提供了Thread中的run()方法来包含被线程执行的代码。</p></li><li><p><strong>调用run()方法为什么是单线程的呢？</strong></p><p>因为直接调用run()方法就是相当于调用了普通的方法，看到的自然是单线程的效果。</p></li><li><p><strong>run()和start()的区别：</strong></p><ul><li>run()：仅仅是封装需要被线程执行的代码，直接调用仅相当于普通方法调用。</li><li>start()：启动线程，然后Java虚拟机调用该线程的run()方法。</li></ul></li><li><p><strong>线程能不能多次启动？</strong></p><p>不能。</p><p>不过可以创建不同的线程对象分别启动。</p></li><li><p><strong>多线程实现方式二的好处？</strong></p><ol><li>若一个类已经继承了其他类就无法使用方式一了，使用接口可以避免Java单继承带来的局限性；</li><li>方式二可以实现多个相同的线程处理同一份资源。</li><li>把线程同程序的代码、数据有效分离，较好地体现了面向对象的设计思想。</li></ol></li></ol></li></ul><h3 id="10-3-Thread类"><a href="#10-3-Thread类" class="headerlink" title="10.3 Thread类"></a>10.3 Thread类</h3><ul><li><p><strong>概述：</strong></p><p>Thread是程序中的执行线程。</p></li><li><p><strong>重要构造方法：</strong></p><ul><li><p>public Thread()</p><p>//分配新的Thread对象，自动生成的名称的形式为”Thread-“ + n</p></li><li><p>public Thread(<strong>String name</strong>)</p><p>//使用给定的名称构造新的Thread对象</p></li><li><p>public Thread(<strong>Runable target</strong>)</p><p>//传一个Runnable实现类，构造Thread对象</p></li><li><p>public Thread(<strong>Runable target, String name)</strong></p><p>//传一个Runnable实现类和线程名称，构造Thread对象</p></li><li><p>public Thread(<strong>ThreadGroup tg, Runnable target, String name</strong>)</p><p>//根据线程组，Runnable和名称构建Thread对象</p></li></ul></li><li><p><strong>重要方法：</strong></p><ul><li><p>public final void <strong>setName</strong>(String name)</p><p>//th.setName(“线程名”)，设置线程名称</p></li><li><p>public final String <strong>getName</strong>()</p><p>//th.getName()，返回线程名称</p></li><li><p>public void <strong>run</strong>()</p><p>//th.run()，Thread的子类应该重写该方法</p></li><li><p>public void <strong>start</strong>()</p><p>//th.start()，使该线程开始执行，Java虚拟机调用该线程的run()方法</p></li><li><p>public static Thread <strong>currentThread</strong>()</p><p>//Thread.currentThread()，返回当前正在执行的Thread对象</p></li><li><p>public final int <strong>getPriority</strong>()</p><p>//th.getPriority()，返回线程对象的优先级</p></li><li><p>public final void <strong>setPriority</strong>(int newPriority)</p><p>//th.setPriority()，更改线程的优先级</p></li><li><p>public static void <strong>sleep</strong>(long millis)</p><p>//Thread.sleep(毫秒数)，在指定的毫秒数内让正在执行的线程休眠（暂停执行），此操作受系统计时器、调度精度等因素影响</p></li><li><p>public final void <strong>join</strong>()</p><p>//th.join()，等待该线程终止</p></li><li><p>public static void <strong>yield</strong>()</p><p>//Thread.yield()，暂停当前正在执行的线程对象，并执行其他线程</p></li><li><p>public final void <strong>setDaemon</strong>(boolean on)</p><p>//th.setDaemon()，将该线程标记为守护线程/用户线程/后台线程。当正在运行的线程都是守护线程时，Java虚拟机退出。必须在启动线程前调用</p></li><li><p>public void <strong>interrupt</strong>()</p><p>//th.interrupt()，中断线程。把线程的状态终止，并抛出一个InterruptedException</p></li><li><p>public final void <strong>stop</strong>()</p><p>//th.stop()，已过时，强迫线程终止执行。</p></li></ul></li></ul><h3 id="10-4-线程调度-优先级"><a href="#10-4-线程调度-优先级" class="headerlink" title="10.4 线程调度/优先级"></a>10.4 线程调度/优先级</h3><ul><li><p><strong>概述：</strong></p><p>线程只有得到CPU的使用权，才可以执行指令。</p><p>线程有两种调度模型：</p><ol><li><p>分时调度模型</p><p>所有线程轮流获得CPU的使用权，平均分配每个线程占用CPU的时间片。</p></li><li><p>抢占式调度模型：</p><p>优先让优先级高的线程使用CPU。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">如果线程的优先级相同，会随机选择一个。<br><br>优先级高的线程获得的CPU时间片会多一些。<br></code></pre></td></tr></table></figure></li></ol><p><strong>Java使用的是抢占式调度模型。</strong></p></li><li><p><strong>Java线程优先级：</strong></p><p>线程默认优先级是：5。</p><p>线程优先级的范围是：1~10。</p><p>线程优先级高表示线程获取CPU时间片的几率高，调用次数越多将越能体现这一点，次数少会更多的表现出随机性。</p></li></ul><h3 id="10-5-线程控制"><a href="#10-5-线程控制" class="headerlink" title="10.5 线程控制"></a>10.5 线程控制</h3><ul><li><p><strong>线程休眠：</strong></p><p>在线程的run()方法内静态调用sleep(long millis)方法，可将当前实例休眠指定的毫秒数。</p></li><li><p><strong>线程加入：</strong></p><p>th.join()，将等待该线程终止才会去执行其他线程/执行后面的代码。</p></li><li><p><strong>线程礼让：</strong><br>在线程的run()方法内静态调用yield()方法，暂停当前正在执行的线程对象，并执行其他线程。</p></li><li><p><strong>后台线程/守护线程：</strong></p><p>在启动线程前调用th.setDaemon(boolean on)方法，可以将该线程标记为守护线程/后台线程。</p><p>当所有正在运行的线程都是守护线程时，Java虚拟机退出。</p></li><li><p><strong>线程终止：</strong></p><p>th.interrupt()，把线程的状态终止，并抛出一个InterruptedException。</p></li></ul><h3 id="10-6-线程生命周期"><a href="#10-6-线程生命周期" class="headerlink" title="10.6 线程生命周期"></a>10.6 线程生命周期</h3><ol><li><p><strong>新建：</strong></p><p>创建线程对象。</p><p>调用start()方法可进入就绪状态。</p></li><li><p><strong>就绪：</strong></p><p>有执行资格，没有执行权。</p><p>若得到了CPU的执行权即进入运行状态。</p></li><li><p><strong>运行：</strong></p><p>有执行资格，有执行权。</p><p>若被别的线程得到了CPU执行权，则回到就绪状态。</p><p>若运行了sleep()或wait()等方法，则进入阻塞状态。</p><p>若run()方法执行结束或中断了线程，进入死亡状态。</p></li><li><p><strong>阻塞：</strong></p><p>没有执行资格，没有执行权。</p><p>若sleep()时间到或运行了notify()等方法，可恢复到就绪状态。</p></li><li><p><strong>死亡：</strong></p><p>线程对象变成垃圾，等待被回收。</p></li></ol><h3 id="10-7-线程安全问题-线程同步"><a href="#10-7-线程安全问题-线程同步" class="headerlink" title="10.7 线程安全问题/线程同步"></a>10.7 线程安全问题/线程同步</h3><ul><li><p><strong>判断是否会出现线程安全问题：</strong></p><ol><li>是否多线程环境；</li><li>是否有共享数据；</li><li>是否有多条语句操作共享数据。</li></ol></li><li><p><strong>解决方案（同步代码块）：</strong></p><p>格式：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(对象)&#123;<br>    ...<span class="hljs-comment">//需要同步的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>小括号内所传的对象是重点，该对象相当于“锁”的功能，多个线程对象需要同一把锁（相同的对象）。</p></li><li><p><strong>同步的前提：</strong></p><ol><li>要有多个线程；</li><li>多个线程使用的是同一个锁对象。</li></ol></li><li><p><strong>同步的好处：</strong></p><p>同步的出现解决了多线程的安全问题。</p></li><li><p><strong>同步的弊端：</strong></p><ol><li><p>当线程很多时，每个线程都会去判断同步上的锁。</p><p>这将会耗费更多资源，降低程序运行效率。</p></li><li><p>容易产生死锁。</p></li></ol></li><li><p><strong>相关问题：</strong></p><ol><li><p><strong>同步代码块的锁对象是什么？</strong></p><p>是任意对象。</p></li><li><p><strong>同步方法的格式及锁对象问题：</strong></p><p>同步方法的格式：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>同步方法的锁对象是this。</p></li><li><p><strong>静态方法的锁对象是什么？</strong></p><p>是类的字节码文件对象。</p></li></ol></li></ul><h3 id="10-8-Lock锁（JDK5）"><a href="#10-8-Lock锁（JDK5）" class="headerlink" title="10.8 Lock锁（JDK5）"></a>10.8 Lock锁（JDK5）</h3><ul><li><p><strong>概述：</strong></p><ul><li>为了更清晰的表达如何加锁和释放锁</li><li>java.util.concurrent.locks下的接口Lock，提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。</li><li>允许更灵活的结构。</li></ul></li><li><p><strong>重要方法：</strong></p><ul><li>void <strong>lock</strong>()            //lock.lock()，获取锁<br>void <strong>unlock</strong>()            //lock.unlock()，释放锁</li></ul></li><li><p><strong>常用实现类：</strong></p><p>ReentrantLock</p></li></ul><h3 id="10-9-线程死锁问题"><a href="#10-9-线程死锁问题" class="headerlink" title="10.9 线程死锁问题"></a>10.9 线程死锁问题</h3><ul><li><p><strong>概述：</strong></p><p>两个或两个以上的线程在争夺资源的过程中，发生的一种互相等待的现象。</p></li><li><p><strong>举例：</strong></p><p>如下的程序在创建两个对象并分别传入0和1时，极有可能出现线程死锁现象。</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadlockThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object lockA = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-keyword">private</span> Object lockB = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeadlockThread</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (x%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">synchronized</span> (lockA) &#123;<br>                    System.out.println(<span class="hljs-string">"已经进入lockA，正在等待lockB"</span>);<br>                    <span class="hljs-keyword">synchronized</span> (lockB) &#123;<br>                        System.out.println(<span class="hljs-string">"成功进入lockB"</span>)<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (lockB) &#123;<br>                    System.out.println(<span class="hljs-string">"已经进入lockB，正在等待lockA"</span>);<br>                    <span class="hljs-keyword">synchronized</span> (lockA) &#123;<br>                        System.out.println(<span class="hljs-string">"成功进入lockA"</span>)<br>                    &#125;<br>                &#125;<br>            &#125;<br>            x ++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="10-10-等待唤醒机制"><a href="#10-10-等待唤醒机制" class="headerlink" title="10.10 等待唤醒机制"></a>10.10 等待唤醒机制</h3><ul><li><p><strong>概述：</strong></p><p>Object类中提供了多个等待和唤醒方法。</p><p>这些方法定义在Object中的原因是，锁的对象可以是任意对象。</p></li><li><p><strong>方法（位于Object）：</strong></p><ul><li>public final void <strong>wait</strong>()            //lock.wait()，让当前线程等待<br>public final void <strong>notify</strong>()                //lock.notify()，唤醒在此对象监视器上等待的单个线程<br> public final void <strong>notifyAll</strong>()        //lock.notifyAll()，唤醒在此对象监视器上等待的所有线程</li></ul></li><li><p><strong>注意事项：</strong></p><ol><li><strong>wait()和notify()等方法应该由锁对象调用；</strong></li><li><strong>wait()和notify()等方法应该处于锁的包围中（拥有对象监视器）；</strong></li><li><strong>调用wait()方法时将会放开当前锁。</strong></li></ol></li></ul><h3 id="10-11-线程组"><a href="#10-11-线程组" class="headerlink" title="10.11 线程组"></a>10.11 线程组</h3><ul><li><p><strong>概述：</strong></p><ul><li>把多个线程合并到一起</li><li>它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</li><li>默认情况下，所有线程都属于主线程组（main）。</li><li>通过Thread类的构造方法public Thread(ThreadGroup tg, Runnable target, String name)，可将Thread在创建时就加入某一线程组。</li></ul></li><li><p><strong>重要构造方法：</strong></p><p>public ThreadGroup(String name)</p><p>//构建一个新线程组，名字为name</p></li></ul><h3 id="10-12-线程池"><a href="#10-12-线程池" class="headerlink" title="10.12 线程池"></a>10.12 线程池</h3><ul><li><p><strong>概述：</strong></p><p>程序启动一个新线程的成本是比较高的，因为要涉及到与操作系统的交互。</p><p>使用线程池可以很好地提高性能，尤其是需要创建大量生存期很短地线程时。</p><p>线程池中每一个线程代码结束后，不会死亡，而是回到线程池中成为空闲状态，等待下一个对象来使用。</p><p>此处将使用Executors类。</p></li><li><p><strong>固定大小的线程池newFixedThreadPool：</strong></p><p>public static ExecutorService newFixedThreadPool(<strong>int nThreads</strong>)</p><p>//Executors.newFixedThreadPool(线程数)，创建一个固定大小的线程池</p><p><strong>使用举例：</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService pool = Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>pool.submit(<span class="hljs-keyword">new</span> MyRunnable());<br>pool.submit(<span class="hljs-keyword">new</span> MyRunnable());<br>pool.shutdown();<br></code></pre></td></tr></table></figure></li><li><p><strong>其他线程池：</strong></p><ul><li><p>单任务线程池：</p><p>public static ExecutorService <strong>newSingleThreadExecutor</strong>()</p></li><li><p>可变尺寸线程池：</p><p>public static ExecutorService <strong>newCachedThreadPool</strong>()</p></li></ul></li></ul><h3 id="10-13-定时器"><a href="#10-13-定时器" class="headerlink" title="10.13 定时器"></a>10.13 定时器</h3><ul><li><p><strong>概述：</strong></p><p>可以让我们在指定时间做某件事情，还可以重复做某件事情。</p><p>主要依赖Timer和TimerTask这两个类。</p></li><li><p><strong>Timer定时器类：</strong></p><p><strong>重要构造方法：</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">public Timer()<br></code></pre></td></tr></table></figure><p><strong>重要方法：</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">public void **schedule**(TimerTask, Date time)<br><br>//t.schedule(TimerTask, Date)，安排在指定时间执行指定任务<br><br>public void **schedule**(TimerTask, Date firstTime, long period)<br><br>//t.schedule(TimerTask, Date, period)，安排任务在指定时间开始固定延迟地执行<br><br>public void **schedule**(TimerTask task, long delay)<br><br>//t.schedule(TimerTask, delay)，安排在指定延迟后执行指定任务<br><br>public void **schedule**(TimerTask task, long delay, long period)<br><br>//t.schedule(TimerTask, delay, period)，安排任务在指定延迟后开始固定延迟地执行<br>public void **cancel**()<br><br>//t.cancel()，终止此计时器，并丢弃所有已安排的任务<br></code></pre></td></tr></table></figure></li><li><p><strong>TimerTask任务类：</strong></p><p>抽象类，实现了Runnable。</p><p>需要创建子类，并重写run()方法，run()方法中的内容就是要执行的任务。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>行为型模式</title>
      <link href="/2019/05/28/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/28/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。</p><p>GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p><a id="more"></a><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><p><strong>模仿请假审批</strong></p><p>请假条</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.chainOfResp;<br><br><span class="hljs-comment">/**<br> * 封装请假的基本信息<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LeaveRequest</span> </span>&#123;<br><span class="hljs-keyword">private</span> String empName;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> leaveDays;<br><span class="hljs-keyword">private</span> String reason;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LeaveRequest</span><span class="hljs-params">(String empName, <span class="hljs-keyword">int</span> leaveDays, String reason)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.empName = empName;<br><span class="hljs-keyword">this</span>.leaveDays = leaveDays;<br><span class="hljs-keyword">this</span>.reason = reason;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmpName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> empName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmpName</span><span class="hljs-params">(String empName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.empName = empName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLeaveDays</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> leaveDays;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeaveDays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> leaveDays)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.leaveDays = leaveDays;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getReason</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> reason;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setReason</span><span class="hljs-params">(String reason)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.reason = reason;<br>&#125; <br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>领导抽象类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.chainOfResp;<br><br><span class="hljs-comment">/**<br> * 抽象类<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Leader</span> </span>&#123;<br><span class="hljs-keyword">protected</span> String name;<br><span class="hljs-keyword">protected</span> Leader nextLeader; <span class="hljs-comment">//责任链上的后继对象</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Leader</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-comment">//设定责任链上的后继对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNextLeader</span><span class="hljs-params">(Leader nextLeader)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.nextLeader = nextLeader;<br>&#125;<br><br><br><span class="hljs-comment">/**<br> * 处理请求的核心的业务方法<br> * <span class="hljs-doctag">@param</span> request<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(LeaveRequest request)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>主任</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.chainOfResp;<br><br><span class="hljs-comment">/**<br> * 主任<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Director</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(LeaveRequest request)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(request.getLeaveDays()&lt;<span class="hljs-number">3</span>)&#123;<br>System.out.println(<span class="hljs-string">"员工："</span>+request.getEmpName()+<span class="hljs-string">"请假，天数："</span>+request.getLeaveDays()+<span class="hljs-string">",理由："</span>+request.getReason());<br>System.out.println(<span class="hljs-string">"主任："</span>+<span class="hljs-keyword">this</span>.name+<span class="hljs-string">",审批通过！"</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.nextLeader!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">this</span>.nextLeader.handleRequest(request);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>经理</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.chainOfResp;<br><br><span class="hljs-comment">/**<br> * 经理<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Manager</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(LeaveRequest request)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(request.getLeaveDays()&lt;<span class="hljs-number">10</span>)&#123;<br>System.out.println(<span class="hljs-string">"员工："</span>+request.getEmpName()+<span class="hljs-string">"请假，天数："</span>+request.getLeaveDays()+<span class="hljs-string">",理由："</span>+request.getReason());<br>System.out.println(<span class="hljs-string">"经理："</span>+<span class="hljs-keyword">this</span>.name+<span class="hljs-string">",审批通过！"</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.nextLeader!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">this</span>.nextLeader.handleRequest(request);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>总经理</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.chainOfResp;<br><br><span class="hljs-comment">/**<br> * 总经理<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneralManager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Leader</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GeneralManager</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(LeaveRequest request)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(request.getLeaveDays()&lt;<span class="hljs-number">30</span>)&#123;<br>System.out.println(<span class="hljs-string">"员工："</span>+request.getEmpName()+<span class="hljs-string">"请假，天数："</span>+request.getLeaveDays()+<span class="hljs-string">",理由："</span>+request.getReason());<br>System.out.println(<span class="hljs-string">"总经理："</span>+<span class="hljs-keyword">this</span>.name+<span class="hljs-string">",审批通过！"</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">"莫非"</span>+request.getEmpName()+<span class="hljs-string">"想辞职，居然请假"</span>+request.getLeaveDays()+<span class="hljs-string">"天！"</span>);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类（请假操作）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.chainOfResp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Leader a = <span class="hljs-keyword">new</span> Director(<span class="hljs-string">"张三"</span>);<br>Leader b = <span class="hljs-keyword">new</span> Manager(<span class="hljs-string">"李四"</span>);<br>Leader c = <span class="hljs-keyword">new</span> GeneralManager(<span class="hljs-string">"王五"</span>);<br><span class="hljs-comment">//组织责任链对象的关系</span><br>a.setNextLeader(b);<br>b.setNextLeader(c);<br><br><span class="hljs-comment">//开始请假操作</span><br>LeaveRequest req1 = <span class="hljs-keyword">new</span> LeaveRequest(<span class="hljs-string">"TOM"</span>, <span class="hljs-number">15</span>, <span class="hljs-string">"回英国老家探亲！"</span>);<br>a.handleRequest(req1);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p>自定义的迭代接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.iterator;<br><br><br><span class="hljs-comment">/**<br> *  自定义的迭代器接口<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyIterator</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">first</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//将游标指向第一个元素</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//将游标指向下一个元素</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//判断是否存在下一个元素</span><br><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isFirst</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isLast</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function">Object <span class="hljs-title">getCurrentObj</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//获取当前游标指向的对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p>自定义聚合类（迭代器接口以内部类实现）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.iterator;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**<br> * 自定义的聚合类<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteMyAggregate</span> </span>&#123;<br><span class="hljs-keyword">private</span> List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addObject</span><span class="hljs-params">(Object obj)</span></span>&#123;<br><span class="hljs-keyword">this</span>.list.add(obj);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObject</span><span class="hljs-params">(Object obj)</span></span>&#123;<br><span class="hljs-keyword">this</span>.list.remove(obj);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setList</span><span class="hljs-params">(List&lt;Object&gt; list)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.list = list;<br>&#125;<br><br><br><span class="hljs-comment">//获得迭代器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MyIterator  <span class="hljs-title">createIterator</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConcreteIterator();<br>&#125;<br><br><br><br><span class="hljs-comment">//使用内部类定义迭代器，可以直接使用外部类的属性</span><br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MyIterator</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cursor;  <span class="hljs-comment">//定义游标用于记录遍历时的位置</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">first</span><span class="hljs-params">()</span> </span>&#123;<br>cursor = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getCurrentObj</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> list.get(cursor);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(cursor&lt;list.size())&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFirst</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> cursor==<span class="hljs-number">0</span>?<span class="hljs-keyword">true</span>:<span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLast</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> cursor==(list.size()-<span class="hljs-number">1</span>)?<span class="hljs-keyword">true</span>:<span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(cursor&lt;list.size())&#123;<br>cursor++;<br>&#125;<br>&#125;<br><br>&#125;<br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ConcreteMyAggregate cma = <span class="hljs-keyword">new</span> ConcreteMyAggregate();<br>cma.addObject(<span class="hljs-string">"aa"</span>);<br>cma.addObject(<span class="hljs-string">"bb"</span>);<br>cma.addObject(<span class="hljs-string">"cc"</span>);<br><br>MyIterator iter = cma.createIterator();<br><span class="hljs-keyword">while</span>(iter.hasNext())&#123;<br>System.out.println(iter.getCurrentObj());<br>iter.next();<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><p>• 场景(中介大家熟悉吗?房产中介?)：<br>    – 假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。 虽然只有三个部门，但是关系非常乱。<br>    – 实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。<br>    – 这就是一个典型的“中介者模式”，总经理起到一个中介、协调的作用</p><h5 id="模拟公司之间的部门关系"><a href="#模拟公司之间的部门关系" class="headerlink" title="模拟公司之间的部门关系"></a>模拟公司之间的部门关系</h5><p>中介者接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.mediator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mediator</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(String dname,Department d)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">command</span><span class="hljs-params">(String dname)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>部门接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.mediator;<br><br><span class="hljs-comment">//同事类的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Department</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selfAction</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//做本部门的事情</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">outAction</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//向总经理发出申请</span><br>&#125;<br></code></pre></td></tr></table></figure><p>研发部</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.mediator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Development</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Department</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Mediator m;  <span class="hljs-comment">//持有中介者(总经理)的引用</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Development</span><span class="hljs-params">(Mediator m)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.m = m;<br>m.register(<span class="hljs-string">"development"</span>, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outAction</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"汇报工作！没钱了，需要资金支持！"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selfAction</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"专心科研，开发项目！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>财务部</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.mediator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Finacial</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Department</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Mediator m;  <span class="hljs-comment">//持有中介者(总经理)的引用</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Finacial</span><span class="hljs-params">(Mediator m)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.m = m;<br>m.register(<span class="hljs-string">"finacial"</span>, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outAction</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"汇报工作！没钱了，钱太多了！怎么花?"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selfAction</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"数钱！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>市场部</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.mediator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Market</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Department</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Mediator m;  <span class="hljs-comment">//持有中介者(总经理)的引用</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Market</span><span class="hljs-params">(Mediator m)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.m = m;<br>m.register(<span class="hljs-string">"market"</span>, <span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outAction</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"汇报工作！项目承接的进度，需要资金支持！"</span>);<br><br>m.command(<span class="hljs-string">"finacial"</span>);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selfAction</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"跑去接项目！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>总经理</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.mediator;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">President</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Mediator</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Map&lt;String,Department&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String , Department&gt;();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">command</span><span class="hljs-params">(String dname)</span> </span>&#123;<br>map.get(dname).selfAction();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(String dname, Department d)</span> </span>&#123;<br>map.put(dname, d);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.mediator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Mediator m = <span class="hljs-keyword">new</span> President();<br><br>Market   market = <span class="hljs-keyword">new</span> Market(m);<br>Development devp = <span class="hljs-keyword">new</span> Development(m);<br>Finacial f = <span class="hljs-keyword">new</span> Finacial(m);<br><br>market.selfAction();<br>market.outAction();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="中介者模式的本质："><a href="#中介者模式的本质：" class="headerlink" title="中介者模式的本质："></a>中介者模式的本质：</h5><p>– 解耦多个同事对象之间的交互关系。每个对象都持有中介者对象的引用，只跟中介者对象打交道。我们通过中介者对象统一管理这些交互关系</p><h5 id="开发中常见的场景："><a href="#开发中常见的场景：" class="headerlink" title="开发中常见的场景："></a>开发中常见的场景：</h5><p>– MVC模式(其中的C，控制器就是一个中介者对象。M和V都和他打交道)<br>– 窗口游戏程序，窗口软件开发中窗口对象也是一个中介者对象<br>– 图形界面开发GUI中，多个组件之间的交互，可以通过引入一个中介者对象来解决，可以是整体的窗口对象或者DOM对象<br>– Java.lang.reflect.Method#invoke()</p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>命令的真正执行者</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.command;<br><br><span class="hljs-comment">/**<br> * 真正的命令的执行者<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">"Receiver.action()"</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>命令传递者接口和实现</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br><span class="hljs-comment">/**<br> * 这个方法是一个返回结果为空的方法。<br> * 实际项目中，可以根据需求设计多个不同的方法<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Receiver receiver;<span class="hljs-comment">//命令的真正的执行者</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteCommand</span><span class="hljs-params">(Receiver receiver)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.receiver = receiver;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//命令真正执行前或后，执行相关的处理！</span><br>receiver.action();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用者</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.command;<br><br><span class="hljs-comment">//调用者/发起者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoke</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Command command;   <span class="hljs-comment">//也可以通过容器List&lt;Command&gt;容纳很多命令对象，进行批处理。数据库底层的事务管理就是类似的结构！</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Invoke</span><span class="hljs-params">(Command command)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.command = command;<br>&#125; <br><br><span class="hljs-comment">//业务方法 ，用于调用命令类的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>&#123;<br>command.execute();<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.command;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Command c = <span class="hljs-keyword">new</span> ConcreteCommand(<span class="hljs-keyword">new</span> Receiver());<br>Invoke i = <span class="hljs-keyword">new</span> Invoke(c);<br>i.call();<br><br><br><span class="hljs-comment">//new Receiver().action();</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="开发中常见的场景"><a href="#开发中常见的场景" class="headerlink" title="开发中常见的场景"></a>开发中常见的场景</h5><p>– Struts2中，action的整个调用过程中就有命令模式。<br>– 数据库事务机制的底层实现<br>– 命令的撤销和恢复</p><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>– 是一种不常用的设计模式<br>– 用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。<br>– 当我们需要开发一种新的语言时，可以考虑使用解释器模式。<br>– 尽量不要使用解释器模式，后期维护会有很大麻烦。在项目中，可以使用Jruby，Groovy、java的js引擎来替代解释器的作用，弥补java语言的不足。</p><h5 id="开发中常见的场景-1"><a href="#开发中常见的场景-1" class="headerlink" title="开发中常见的场景"></a>开发中常见的场景</h5><p>– EL表达式式的处理<br>– 正则表达式解释器<br>– SQL语法的解释器<br>– 数学表达式解析器<br>    • 如现成的工具包:Math Expression String Parser、Expression4J等。<br>        – MESP的网址： <a href="http://sourceforge.net/projects/expression-tree/" target="_blank" rel="noopener">http://sourceforge.net/projects/expression-tree/</a><br>        – Expression4J的网址： <a href="http://sourceforge.net/projects/expression4j/" target="_blank" rel="noopener">http://sourceforge.net/projects/expression4j/</a></p><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><p>• 模式动机：<br>– 对于存储在一个集合中的对象，他们可能具有不同的类型(即使有一个公共的接口)，对于该集合中的对象，可以接受一类称为访问者的对象来访问，不同的访问者其访问方式也有所不同。<br>• 定义：<br>– 表示一个作用于某对象结构中的各元素的操作，它使我们可以在不改变个元素的类的前提下定义作用于这些元素的新操作。<br>• 开发中的场景(应用范围非常窄，了解即可)：<br>– XML文档解析器设计<br>– 编译器的设计<br>– 复杂集合对象的处理</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>不使用策略模式</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.strategy;<br><br><span class="hljs-comment">/**<br> * 实现起来比较容易，符合一般开发人员的思路<br> * 假如，类型特别多，算法比较复杂时，整个条件语句的代码就变得很长，难于维护。<br> * 如果有新增类型，就需要频繁的修改此处的代码！<br> * 不符合开闭原则！<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStrategy</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">(String type, <span class="hljs-keyword">double</span> price)</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">"普通客户小批量"</span>)) &#123;<br>System.out.println(<span class="hljs-string">"不打折,原价"</span>);<br><span class="hljs-keyword">return</span> price;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">"普通客户大批量"</span>)) &#123;<br>System.out.println(<span class="hljs-string">"打九折"</span>);<br><span class="hljs-keyword">return</span> price * <span class="hljs-number">0.9</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">"老客户小批量"</span>)) &#123;<br>System.out.println(<span class="hljs-string">"打八五折"</span>);<br><span class="hljs-keyword">return</span> price * <span class="hljs-number">0.85</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">"老客户大批量"</span>)) &#123;<br>System.out.println(<span class="hljs-string">"打八折"</span>);<br><span class="hljs-keyword">return</span> price * <span class="hljs-number">0.8</span>;<br>&#125;<br><span class="hljs-keyword">return</span> price;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>策略接口（返回售价）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Strategy</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span>  standardPrice)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>新客户少量，新客户多量，老客户少量，老客户多量</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewCustomerFewStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Strategy</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> standardPrice)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"不打折，原价"</span>);<br><span class="hljs-keyword">return</span> standardPrice;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewCustomerManyStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Strategy</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> standardPrice)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"打九折"</span>);<br><span class="hljs-keyword">return</span> standardPrice*<span class="hljs-number">0.9</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OldCustomerFewStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Strategy</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> standardPrice)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"打八五折"</span>);<br><span class="hljs-keyword">return</span> standardPrice*<span class="hljs-number">0.85</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OldCustomerManyStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Strategy</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> standardPrice)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"打八折"</span>);<br><span class="hljs-keyword">return</span> standardPrice*<span class="hljs-number">0.8</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>上下文类（实现调用者和策略的解耦）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.strategy;<br><br><span class="hljs-comment">/**<br> * 负责和具体的策略类交互<br> * 这样的话，具体的算法和直接的客户端调用分离了，使得算法可以独立于客户端独立的变化。<br> * 如果使用spring的依赖注入功能，还可以通过配置文件，动态的注入不同策略对象，动态的切换不同的算法.<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span> </span>&#123;<br><span class="hljs-keyword">private</span> Strategy strategy;<span class="hljs-comment">//当前采用的算法对象</span><br><br><span class="hljs-comment">//可以通过构造器来注入</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Context</span><span class="hljs-params">(Strategy strategy)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.strategy = strategy;<br>&#125;<br><span class="hljs-comment">//可以通过set方法来注入</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStrategy</span><span class="hljs-params">(Strategy strategy)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.strategy = strategy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pringPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> s)</span></span>&#123;<br>System.out.println(<span class="hljs-string">"您该报价："</span>+strategy.getPrice(s));<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.strategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Strategy s1 = <span class="hljs-keyword">new</span> OldCustomerManyStrategy();<br>Context ctx = <span class="hljs-keyword">new</span> Context(s1);<br><br>ctx.pringPrice(<span class="hljs-number">998</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="开发中常见的场景-2"><a href="#开发中常见的场景-2" class="headerlink" title="开发中常见的场景"></a>开发中常见的场景</h5><p>– JAVASE中GUI编程中，布局管理<br>– Spring框架中，Resource接口，资源访问策略<br>– javax.servlet.http.HttpServlet#service()</p><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><p>模板类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.templateMethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankTemplateMethod</span> </span>&#123;<br><span class="hljs-comment">//具体方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">takeNumber</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">"取号排队"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transact</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//办理具体的业务//钩子方法</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">evaluate</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">"反馈评分"</span>);<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//模板方法！！！</span><br><span class="hljs-keyword">this</span>.takeNumber();<br><br><span class="hljs-keyword">this</span>.transact();<br><br><span class="hljs-keyword">this</span>.evaluate();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类（匿名内部类）和钩子方法的具体实现</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.templateMethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>BankTemplateMethod btm = <span class="hljs-keyword">new</span> DrawMoney();<br>btm.process();<br><br><span class="hljs-comment">//采用匿名内部类</span><br>BankTemplateMethod btm2 = <span class="hljs-keyword">new</span> BankTemplateMethod() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transact</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"我要存钱！"</span>);<br>&#125;<br>&#125;;<br>btm2.process();<br><br>BankTemplateMethod btm3 = <span class="hljs-keyword">new</span> BankTemplateMethod() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transact</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"我要理财！我这里有2000万韩币"</span>);<br>&#125;<br>&#125;;<br><br>btm3.process();<br><br>&#125;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrawMoney</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BankTemplateMethod</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transact</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"我要取款！！！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190519160418.png?raw=true" alt=""></p><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>– 电梯的运行<br>    • 维修、正常、自动关门、自动开门、向上运行、向下运行、消防状态<br>– 红绿灯<br>    • 红灯、黄灯、绿灯<br>– 企业或政府系统<br>    • 公文的审批状态<br>– 报销单据审批状态<br>– 假条审批<br>– 网上购物时，订单的状态<br>    • 下单<br>    • 已付款<br>    • 已发货<br>    • 送货中<br>    • 已收货</p><h5 id="模拟酒店房间状态"><a href="#模拟酒店房间状态" class="headerlink" title="模拟酒店房间状态"></a>模拟酒店房间状态</h5><p>状态接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.state;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">State</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>空闲状态：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.state;<br><br><span class="hljs-comment">/**<br> * 空闲状态<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreeState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">State</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"房间空闲！！！没人住！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>预定状态</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.state;<br><br><span class="hljs-comment">/**<br> * 已预订状态<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookedState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">State</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"房间已预订！别人不能定！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>入住状态</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.state;<br><br><span class="hljs-comment">/**<br> * 已入住状态<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckedInState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">State</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"房间已入住！请勿打扰！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>房间状态上下文类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.state;<br><br><br><span class="hljs-comment">/**<br> * 房间对象<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeContext</span> </span>&#123;<br><span class="hljs-comment">//如果是银行系统，这个Context类就是账号。根据金额不同，切换不同的状态！</span><br><br><span class="hljs-keyword">private</span> State state;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(State s)</span></span>&#123;<br>System.out.println(<span class="hljs-string">"修改状态！"</span>);<br>state = s;<br>state.handle();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.state;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>HomeContext ctx = <span class="hljs-keyword">new</span> HomeContext();<br><br>ctx.setState(<span class="hljs-keyword">new</span> FreeState());<br>ctx.setState(<span class="hljs-keyword">new</span> BookedState());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><h5 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h5><p>– 聊天室程序的创建。服务器创建好后，A,B,C三个客户端连上来公开聊天。A向服务器发送数据，服务器端聊天数据改变。我们希望将这些聊天数据分别发给其他在线的客户。也就是说，每个客户端需要更新服务器端得数据。<br>– 网站上，很多人订阅了”java主题”的新闻。当有这个主题新闻时，就会将这些新闻发给所有订阅的人。<br>– 大家一起玩CS游戏时，服务器需要将每个人的方位变化发给所有的客户。</p><p>上面这些场景，我们都可以使用观察者模式来处理。我们可以把多个订阅者、客户称之为观察者； 需要同步给多个订阅者的数据封装到对象中，称之为目标。</p><h5 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h5><p>观察者接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">update</span><span class="hljs-params">(Subject subject)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体的观察者</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObserverA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> myState;   <span class="hljs-comment">//myState需要跟目标对象的state值保持一致！</span><br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Subject subject)</span> </span>&#123;<br>myState = ((ConcreteSubject)subject).getState();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMyState</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> myState;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMyState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> myState)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.myState = myState;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>装载观察者的类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br><span class="hljs-keyword">protected</span> List&lt;Observer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer obs)</span></span>&#123;<br>list.add(obs);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer obs)</span></span>&#123;<br>list.add(obs);<br>&#125;<br><br><span class="hljs-comment">//通知所有的观察者更新状态</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyAllObservers</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (Observer obs : list) &#123;<br>obs.update(<span class="hljs-keyword">this</span>);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>具体的Subject（包含状态）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteSubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> state;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> state;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> state)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.state = state;<br><span class="hljs-comment">//主题对象(目标对象)值发生了变化，请通知所有的观察者</span><br><span class="hljs-keyword">this</span>.notifyAllObservers();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//目标对象</span><br>ConcreteSubject subject = <span class="hljs-keyword">new</span> ConcreteSubject();<br><br><span class="hljs-comment">//创建多个观察者</span><br>ObserverA  obs1 = <span class="hljs-keyword">new</span> ObserverA();<br>ObserverA  obs2 = <span class="hljs-keyword">new</span> ObserverA();<br>ObserverA  obs3 = <span class="hljs-keyword">new</span> ObserverA();<br><br><span class="hljs-comment">//将这三个观察者添加到subject对象的观察者队伍中</span><br>subject.registerObserver(obs1);<br>subject.registerObserver(obs2);<br>subject.registerObserver(obs3);<br><br><br><span class="hljs-comment">//改变subject的状态</span><br>subject.setState(<span class="hljs-number">3000</span>);<br>System.out.println(<span class="hljs-string">"########################"</span>);<br><span class="hljs-comment">//我们看看，观察者的状态是不是也发生了变化</span><br>System.out.println(obs1.getMyState());<br>System.out.println(obs2.getMyState());<br>System.out.println(obs3.getMyState());<br><br><span class="hljs-comment">//改变subject的状态</span><br>subject.setState(<span class="hljs-number">30</span>);<br>System.out.println(<span class="hljs-string">"########################"</span>);<br><span class="hljs-comment">//我们看看，观察者的状态是不是也发生了变化</span><br>System.out.println(obs1.getMyState());<br>System.out.println(obs2.getMyState());<br>System.out.println(obs3.getMyState());<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JAVASE提供的Observer和Observerable"><a href="#JAVASE提供的Observer和Observerable" class="headerlink" title="JAVASE提供的Observer和Observerable"></a>JAVASE提供的Observer和Observerable</h5><p>具体目标对象</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer2;<br><br><span class="hljs-keyword">import</span> java.util.Observable;<br><br><span class="hljs-comment">//目标对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteSubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Observable</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> state; <br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span>&#123;<br>state = s;  <span class="hljs-comment">//目标对象的状态发生了改变</span><br><br>setChanged();  <span class="hljs-comment">//表示目标对象已经做了更改</span><br>notifyObservers(state);  <span class="hljs-comment">//通知所有的观察者</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> state;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> state)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.state = state;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体观察者</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer2;<br><br><span class="hljs-keyword">import</span> java.util.Observable;<br><span class="hljs-keyword">import</span> java.util.Observer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObserverA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> myState;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Observable o, Object arg)</span> </span>&#123;<br>myState = ((ConcreteSubject)o).getState();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMyState</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> myState;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMyState</span><span class="hljs-params">(<span class="hljs-keyword">int</span> myState)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.myState = myState;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.observer2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//创建目标对象Obserable</span><br>ConcreteSubject subject = <span class="hljs-keyword">new</span> ConcreteSubject();<br><br><span class="hljs-comment">//创建观察者</span><br>ObserverA obs1 = <span class="hljs-keyword">new</span> ObserverA();<br>ObserverA obs2 = <span class="hljs-keyword">new</span> ObserverA();<br>ObserverA obs3 = <span class="hljs-keyword">new</span> ObserverA();<br><br><span class="hljs-comment">//将上面三个观察者对象添加到目标对象subject的观察者容器中</span><br>subject.addObserver(obs1);<br>subject.addObserver(obs2);<br>subject.addObserver(obs3);<br><br><span class="hljs-comment">//改变subject对象的状态</span><br>subject.set(<span class="hljs-number">3000</span>);<br>System.out.println(<span class="hljs-string">"===============状态修改了！"</span>);<br><span class="hljs-comment">//观察者的状态发生了变化</span><br>System.out.println(obs1.getMyState());<br>System.out.println(obs2.getMyState());<br>System.out.println(obs3.getMyState());<br><br>subject.set(<span class="hljs-number">600</span>);<br>System.out.println(<span class="hljs-string">"===============状态修改了！"</span>);<br><span class="hljs-comment">//观察者的状态发生了变化</span><br>System.out.println(obs1.getMyState());<br>System.out.println(obs2.getMyState());<br>System.out.println(obs3.getMyState());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="开发中常见的场景-3"><a href="#开发中常见的场景-3" class="headerlink" title="开发中常见的场景"></a>开发中常见的场景</h5><p>– 聊天室程序的，服务器转发给所有客户端<br>– 网络游戏(多人联机对战)场景中，服务器将客户端的状态进行分发<br>– 邮件订阅<br>– Servlet中，监听器的实现<br>– Android中，广播机制<br>– JDK的AWT中事件处理模型,基于观察者模式的委派事件模型(Delegation Event Model)<br>    • 事件源—————-目标对象<br>    • 事件监听器————观察者<br>– 京东商城中，群发某商品打折信息</p><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><h5 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h5><p>– 录入大批人员资料。正在录入当前人资料时，发现上一个人录错了，此时需要恢复上一个人的资料，再进行修改。<br>– Word文档编辑时，忽然电脑死机或断电，再打开时，可以看到word提示你恢复到以前的文档<br>– 管理系统中，公文撤回功能。公文发送出去后，想撤回来。</p><p>源发器类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.memento;<br><br><span class="hljs-comment">/**<br> * 源发器类<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span> </span>&#123;<br><span class="hljs-keyword">private</span> String ename;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary;<br><br><br><span class="hljs-comment">//进行备忘操作，并返回备忘录对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> EmpMemento  <span class="hljs-title">memento</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> EmpMemento(<span class="hljs-keyword">this</span>);<br>&#125;<br><br><br><span class="hljs-comment">//进行数据恢复，恢复成制定备忘录对象的值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recovery</span><span class="hljs-params">(EmpMemento mmt)</span></span>&#123;<br><span class="hljs-keyword">this</span>.ename = mmt.getEname();<br><span class="hljs-keyword">this</span>.age = mmt.getAge();<br><span class="hljs-keyword">this</span>.salary = mmt.getSalary();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Emp</span><span class="hljs-params">(String ename, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">double</span> salary)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.ename = ename;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-keyword">this</span>.salary = salary;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEname</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> ename;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEname</span><span class="hljs-params">(String ename)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.ename = ename;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getSalary</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> salary;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSalary</span><span class="hljs-params">(<span class="hljs-keyword">double</span> salary)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.salary = salary;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>备忘录类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.memento;<br><br><span class="hljs-comment">/**<br> * 备忘录类<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpMemento</span> </span>&#123;<br><span class="hljs-keyword">private</span> String ename;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EmpMemento</span><span class="hljs-params">(Emp e)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.ename = e.getEname();<br><span class="hljs-keyword">this</span>.age = e.getAge();<br><span class="hljs-keyword">this</span>.salary = e.getSalary();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEname</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> ename;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEname</span><span class="hljs-params">(String ename)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.ename = ename;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getSalary</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> salary;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSalary</span><span class="hljs-params">(<span class="hljs-keyword">double</span> salary)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.salary = salary;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>负责人类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.memento;<br><br><span class="hljs-comment">/**<br> * 负责人类<br> * 负责管理备忘录对象<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CareTaker</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> EmpMemento memento;<br><br><span class="hljs-comment">//private List&lt;EmpMemento&gt; list = new ArrayList&lt;EmpMemento&gt;();</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> EmpMemento <span class="hljs-title">getMemento</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> memento;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMemento</span><span class="hljs-params">(EmpMemento memento)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.memento = memento;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.memento;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>CareTaker taker = <span class="hljs-keyword">new</span> CareTaker();<br><br>Emp emp = <span class="hljs-keyword">new</span> Emp(<span class="hljs-string">"高淇"</span>, <span class="hljs-number">18</span>, <span class="hljs-number">900</span>);<br>System.out.println(<span class="hljs-string">"第一次打印对象："</span>+emp.getEname()+<span class="hljs-string">"---"</span>+emp.getAge()+<span class="hljs-string">"---"</span>+emp.getSalary());<br><br>taker.setMemento(emp.memento());   <span class="hljs-comment">//备忘一次</span><br><br>emp.setAge(<span class="hljs-number">38</span>);<br>emp.setEname(<span class="hljs-string">"搞起"</span>);<br>emp.setSalary(<span class="hljs-number">9000</span>);<br>System.out.println(<span class="hljs-string">"第二次打印对象："</span>+emp.getEname()+<span class="hljs-string">"---"</span>+emp.getAge()+<span class="hljs-string">"---"</span>+emp.getSalary());<br><br>emp.recovery(taker.getMemento()); <span class="hljs-comment">//恢复到备忘录对象保存的状态</span><br><br>System.out.println(<span class="hljs-string">"第三次打印对象："</span>+emp.getEname()+<span class="hljs-string">"---"</span>+emp.getAge()+<span class="hljs-string">"---"</span>+emp.getSalary());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="开发中常见的应用场景："><a href="#开发中常见的应用场景：" class="headerlink" title="开发中常见的应用场景："></a>开发中常见的应用场景：</h5><p>– 棋类游戏中的，悔棋<br>– 普通软件中的，撤销操作<br>– 数据库软件中的，事务管理中的，回滚操作<br>– Photoshop软件中的，历史记录</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>结构型模式</title>
      <link href="/2019/05/28/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/28/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>– 核心作用：是从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。<br>– 分类：<br>• 适配器模式、代理模式、桥接模式、装饰模式、组合模式、外观模式、享元模式</p><a id="more"></a><h4 id="适配器模式-adapter"><a href="#适配器模式-adapter" class="headerlink" title="适配器模式(adapter)"></a>适配器模式(adapter)</h4><p>适配器模式：</p><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190426200809.png?raw=true" alt="适配器"></p><p>被适配（相当于PS/2键盘）</p><figure class="hljs highlight JAVA"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.bjsxt.adapter;<br><br><span class="hljs-comment">/**<br> * 被适配的类<br> * (相当于例子中的，PS/2键盘)<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adaptee</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">"可以完成客户请求的需要的功能！"</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适配器接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.adapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Target</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handleReq</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>适配器：相当于USB - &gt; PS/2转换头</p><p>适配器1（通过继承）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.adapter;<br><br><span class="hljs-comment">/**<br> * 适配器 (类适配器方式)<br> * (相当于usb和ps/2的转接器)<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Adaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Target</span> </span>&#123;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleReq</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.request();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>适配器2（通过构造方法注入对象）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.adapter;<br><br><span class="hljs-comment">/**<br> * 适配器 (对象适配器方式,使用了组合的方式跟被适配对象整合)<br> * (相当于usb和ps/2的转接器)<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter2</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Target</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Adaptee adaptee;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleReq</span><span class="hljs-params">()</span> </span>&#123;<br>adaptee.request();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Adapter2</span><span class="hljs-params">(Adaptee adaptee)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.adaptee = adaptee;<br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用者Clien（相当于只有USB口的笔记本）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.adapter;<br><br><span class="hljs-comment">/**<br> * 客户端类<br> * (相当于例子中的笔记本，只有USB接口)<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(Target t)</span></span>&#123;<br>t.handleReq();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Client  c = <span class="hljs-keyword">new</span> Client();<br><br>Adaptee a = <span class="hljs-keyword">new</span> Adaptee();<br><br><span class="hljs-comment">//Target t = new Adapter();</span><br><br>Target t = <span class="hljs-keyword">new</span> Adapter2(a);<br><br>c.test1(t);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>• 工作中的场景<br>– 经常用来做旧系统改造和升级<br>– 如果我们的系统开发之后再也不需要维护，那么很多模式都是没必要的，但是不幸的是，事实却是维护一个系统的代价往往是开发一个系统的数倍。<br>• 我们学习中见过的场景<br>– java.io.InputStreamReader(InputStream)<br>– java.io.OutputStreamWriter(OutputStream)</p><h4 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h4><p>– 核心角色：<br>    • 抽象角色<br>        – 定义代理角色和真实角色的公共对外方法<br>    • 真实角色<br>        – 实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。<br>        – 关注真正的业务逻辑！<br>    • 代理角色<br>        – 实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。<br>        – 将统一的流程控制放到代理角色中处理！</p><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190426211700.png?raw=true" alt=""></p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>• 应用场景：<br>    – 安全代理：屏蔽对真实角色的直接访问。<br>    – 远程代理：通过代理类处理远程方法调用(RMI)<br>    – 延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象。<br>• 比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有100MB，在打开文件时不可能将所有的图片都显示出来，这样就可以<br>使用代理模式，当需要查看图片时，用proxy来进行大图片的打开。<br>• 分类：<br>– 静态代理(静态定义代理类)<br>– 动态代理(动态生成代理类)<br>• JDK自带的动态代理<br>• java assist字节码操作库实现<br>• CGLIB<br>• ASM(底层使用指令，可维护性较差)</p><h5 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h5><p>明星接口：Star.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.staticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Star</span> </span>&#123;<br><span class="hljs-comment">/**<br> * 面谈<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">confer</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 签合同<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signContract</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 订票<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bookTicket</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 唱歌<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sing</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 收钱<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">collectMoney</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>真实明星：RealStar.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.staticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RealStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Star</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bookTicket</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.bookTicket()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">collectMoney</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.collectMoney()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">confer</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.confer()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signContract</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.signContract()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar(周杰伦本人).sing()"</span>);<br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>经纪人（代理类）：ProxyStar.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.staticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Star</span> </span>&#123;<br><br><br><span class="hljs-comment">//面向接口</span><br><span class="hljs-keyword">private</span> Star star;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyStar</span><span class="hljs-params">(Star star)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.star = star;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bookTicket</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"ProxyStar.bookTicket()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">collectMoney</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"ProxyStar.collectMoney()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">confer</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"ProxyStar.confer()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signContract</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"ProxyStar.signContract()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span><span class="hljs-params">()</span> </span>&#123;<br>star.sing();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用者（客户）：Client.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.staticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Star real = <span class="hljs-keyword">new</span> RealStar();<br>Star proxy = <span class="hljs-keyword">new</span> ProxyStar(real);<br><br>proxy.confer();<br>proxy.signContract();<br>proxy.bookTicket();<br>proxy.sing();<br><br>proxy.collectMoney();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>• 动态代理相比于静态代理的优点<br>– 抽象角色中(接口)声明的所以方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。</p><p>• JDK自带的动态代理<br>    – java.lang.reflect.Proxy<br>        • 作用：动态生成代理类和对象<br>– java.lang.reflect.InvocationHandler(处理器接口)<br>    • 可以通过invoke方法实现对真实角色的代理访问。<br>    • 每次通过Proxy生成代理类对象对象时都要指定对应的处理器对象</p><p>Star(接口)</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.dynamicProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Star</span> </span>&#123;<br><span class="hljs-comment">/**<br> * 面谈<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">confer</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 签合同<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signContract</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 订票<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bookTicket</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 唱歌<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sing</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/**<br> * 收钱<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">collectMoney</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>realStar</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.dynamicProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RealStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Star</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bookTicket</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.bookTicket()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">collectMoney</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.collectMoney()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">confer</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.confer()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signContract</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar.signContract()"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"RealStar(周杰伦本人).sing()"</span>);<br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>StarHandler.java（明星的处理器）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.dynamicProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StarHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>Star realStar;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StarHandler</span><span class="hljs-params">(Star realStar)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.realStar = realStar;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><br><span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>Object object = <span class="hljs-keyword">null</span>;<br><br>System.out.println(<span class="hljs-string">"真正的方法执行前！"</span>);<br>System.out.println(<span class="hljs-string">"面谈，签合同，预付款，订机票"</span>);<br><br><span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">"sing"</span>))&#123;<br>object = method.invoke(realStar, args);<br>&#125;<br><br>System.out.println(<span class="hljs-string">"真正的方法执行后！"</span>);<br>System.out.println(<span class="hljs-string">"收尾款"</span>);<br><span class="hljs-keyword">return</span> object;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>客户Client（调用者）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.proxy.dynamicProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Star realStar = <span class="hljs-keyword">new</span> RealStar();<br>StarHandler handler = <span class="hljs-keyword">new</span> StarHandler(realStar);<br><br>Star proxy = (Star) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <br><span class="hljs-keyword">new</span> Class[]&#123;Star.class&#125;, handler);<br><br>proxy.sing();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="开发框架中应用场景"><a href="#开发框架中应用场景" class="headerlink" title="开发框架中应用场景"></a>开发框架中应用场景</h5><p>​    – struts2中拦截器的实现<br>​    – 数据库连接池关闭处理<br>​    – Hibernate中延时加载的实现<br>​    – mybatis中实现拦截器插件<br>​    – AspectJ的实现<br>​    – spring中AOP的实现<br>​        • 日志拦截<br>​        • 声明式事务处理<br>​    – web service<br>​    – RMI远程方法调用<br>​    – …<br>– 实际上，随便选择一个技术框架都会用到代理模式！</p><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><h5 id="未使用桥接，使用多继承"><a href="#未使用桥接，使用多继承" class="headerlink" title="未使用桥接，使用多继承"></a>未使用桥接，使用多继承</h5><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190428205241.png?raw=true" alt=""></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Computer</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Desktop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Computer</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售台式机！"</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Laptop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Computer</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售笔记本！"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pad</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Computer</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售平板电脑！"</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoDesktop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Desktop</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售联想台式机"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoLaptop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Laptop</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售联想笔记本"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LenovoPad</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pad</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售联想平板电脑"</span>);<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShenzhouDesktop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Desktop</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售神舟台式机"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShenzhouLaptop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Laptop</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售神舟笔记本"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShenzhouPad</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pad</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售神舟平板电脑"</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DellDesktop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Desktop</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售戴尔台式机"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DellLaptop</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Laptop</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售戴尔笔记本"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DellPad</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pad</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售戴尔平板电脑"</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用桥接"><a href="#使用桥接" class="headerlink" title="使用桥接"></a>使用桥接</h5><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190428210416.png?raw=true" alt=""></p><p>品牌类型的维度，Brand.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.bridge;<br><br><span class="hljs-comment">/**<br> * 品牌<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Brand</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lenovo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售联想电脑"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dell</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售Dell电脑"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shenzhou</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Brand</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"销售神舟电脑"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>电脑类型的维度：computer2.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.bridge;<br><br><span class="hljs-comment">/**<br> * 电脑类型的维度<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer2</span> </span>&#123;<br><br><span class="hljs-keyword">protected</span> Brand brand;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Computer2</span><span class="hljs-params">(Brand b)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.brand = b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span></span>&#123;<br>brand.sale();<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Desktop2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Computer2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Desktop2</span><span class="hljs-params">(Brand b)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(b);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.sale();<br>System.out.println(<span class="hljs-string">"销售台式机"</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Laptop2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Computer2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Laptop2</span><span class="hljs-params">(Brand b)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(b);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.sale();<br>System.out.println(<span class="hljs-string">"销售笔记本"</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：Client.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.bridge;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//销售联想的笔记本电脑</span><br>Computer2  c = <span class="hljs-keyword">new</span> Laptop2(<span class="hljs-keyword">new</span> Lenovo());<br>c.sale();<br><br><span class="hljs-comment">//销售神舟的台式机</span><br>Computer2 c2 = <span class="hljs-keyword">new</span> Desktop2(<span class="hljs-keyword">new</span> Shenzhou());<br>c2.sale();<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="桥接模式总结："><a href="#桥接模式总结：" class="headerlink" title="桥接模式总结："></a>桥接模式总结：</h5><p>– 桥接模式可以取代多层继承的方案。 多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br>– 桥接模式极大的提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则。</p><h5 id="桥接模式实际开发中应用场景"><a href="#桥接模式实际开发中应用场景" class="headerlink" title="桥接模式实际开发中应用场景"></a>桥接模式实际开发中应用场景</h5><p>– JDBC驱动程序<br>– AWT中的Peer架构<br>– 银行日志管理：<br>    • 格式分类：操作日志、交易日志、异常日志<br>    • 距离分类：本地记录日志、异地记录日志<br>– 人力资源系统中的奖金计算模块：<br>    • 奖金分类：个人奖金、团体奖金、激励奖金。<br>    • 部门分类：人事部门、销售部门、研发部门。<br>– OA系统中的消息处理：<br>    • 业务类型：普通消息、加急消息、特急消息<br>    • 发送消息方式：系统内消息、手机短信、邮件</p><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190505203539.png?raw=true" alt=""></p><p>• 组合模式工作流程分析：<br>    – 组合模式为处理树形结构提供了完美的解决方案，描述了如何将容器和叶子进行递归组合，使得用户在使用时可以一致性的对待容器和叶子。<br>    – 当容器对象的指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行。其中，使用了递归调用的机制对整个结构进行处理。<br>• 使用组合模式，模拟杀毒软件架构设计</p><h5 id="模仿杀毒软件杀毒："><a href="#模仿杀毒软件杀毒：" class="headerlink" title="模仿杀毒软件杀毒："></a>模仿杀毒软件杀毒：</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.composite;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//抽象构建</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AbstractFile</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//杀毒</span><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageFile</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AbstractFile</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ImageFile</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"---图像文件："</span>+name+<span class="hljs-string">",进行查杀！"</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextFile</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AbstractFile</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TextFile</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"---文本文件："</span>+name+<span class="hljs-string">",进行查杀！"</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoFile</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AbstractFile</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VideoFile</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"---视频文件："</span>+name+<span class="hljs-string">",进行查杀！"</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Folder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AbstractFile</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//定义容器，用来存放本容器构建下的子节点</span><br><span class="hljs-keyword">private</span> List&lt;AbstractFile&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;AbstractFile&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Folder</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(AbstractFile file)</span></span>&#123;<br>list.add(file);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(AbstractFile file)</span></span>&#123;<br>list.remove(file);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> AbstractFile <span class="hljs-title">getChild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><span class="hljs-keyword">return</span> list.get(index);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"---文件夹："</span>+name+<span class="hljs-string">",进行查杀"</span>);<br><br><span class="hljs-keyword">for</span> (AbstractFile file : list) &#123;<br>file.killVirus();<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.composite;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>AbstractFile f2,f3,f4,f5;<br>Folder f1 = <span class="hljs-keyword">new</span> Folder(<span class="hljs-string">"我的收藏"</span>);<br><br>f2 = <span class="hljs-keyword">new</span> ImageFile(<span class="hljs-string">"老高的大头像.jpg"</span>);<br>f3 = <span class="hljs-keyword">new</span> TextFile(<span class="hljs-string">"Hello.txt"</span>);<br>f1.add(f2);<br>f1.add(f3);<br><br>Folder f11 = <span class="hljs-keyword">new</span> Folder(<span class="hljs-string">"电影"</span>);<br>f4 = <span class="hljs-keyword">new</span> VideoFile(<span class="hljs-string">"笑傲江湖.avi"</span>);<br>f5 = <span class="hljs-keyword">new</span> VideoFile(<span class="hljs-string">"神雕侠侣.avi"</span>);<br>f11.add(f4);<br>f11.add(f5);<br>f1.add(f11);<br><br><br><span class="hljs-comment">//f2.killVirus();</span><br><br>f1.killVirus();<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="开发中的应用场景："><a href="#开发中的应用场景：" class="headerlink" title="开发中的应用场景："></a>开发中的应用场景：</h5><p>– 操作系统的资源管理器<br>– GUI中的容器层次图<br>– XML文件解析<br>– OA系统中，组织结构的处理<br>– Junit单元测试框架<br>• 底层设计就是典型的组合模式，TestCase(叶子)、TestUnite(容器)、Test接口(抽象)</p><h4 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h4><p>• 实现细节：<br>    – Component抽象构件角色：<br>        • 真实对象和装饰对象有相同的接口。这样，客户端对象就能够以与真实对象相同的方式同装饰对象交互。<br>    – ConcreteComponent 具体构件角色(真实对象)：<br>        • io流中的FileInputStream、FileOutputStream<br>    – Decorator装饰角色：<br>        • 持有一个抽象构件的引用。装饰对象接受所有客户端的请求，并把这些请求转发给真实的对象。这样，就能在真实对象调用前后增加新的功能。<br>    – ConcreteDecorator具体装饰角色：</p><p>​        • 负责给构件对象增加新的责任。</p><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190506204851.png?raw=true" alt=""></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.decorator;<br><br><span class="hljs-comment">//抽象构建</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICar</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//真实构建</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICar</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"地上跑"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//Decorator装饰角色</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperCar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICar</span></span>&#123;<br><br><span class="hljs-keyword">protected</span> ICar car;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SuperCar</span><span class="hljs-params">(ICar car)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.car = car;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>car.move();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//真实装饰</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SuperCar</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FlyCar</span><span class="hljs-params">(ICar car)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(car);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"天上飞"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.move();<br>fly();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//真实装饰</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WaterCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SuperCar</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WaterCar</span><span class="hljs-params">(ICar car)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(car);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"水里游"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>.move();<br>swim();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用Client</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.decorator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Car car = <span class="hljs-keyword">new</span> Car();<br>car.move();<br><br>System.out.println(<span class="hljs-string">"增加新的功能，飞行"</span>);<br><br>FlyCar flycar = <span class="hljs-keyword">new</span> FlyCar(car);<br>flycar.move();<br><br>System.out.println(<span class="hljs-string">"增加新的功能，游泳"</span>);<br><br>WaterCar waterCar = <span class="hljs-keyword">new</span> WaterCar(<span class="hljs-keyword">new</span> FlyCar(car));<br>waterCar.move();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">地上跑<br>增加新的功能，飞行<br>地上跑<br>天上飞<br>增加新的功能，游泳<br>地上跑<br>天上飞<br>水里游<br></code></pre></td></tr></table></figure><p>IO流示例</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Reader r = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"d:/a.txt"</span>))));<br></code></pre></td></tr></table></figure><h5 id="IO流实现细节"><a href="#IO流实现细节" class="headerlink" title="IO流实现细节"></a>IO流实现细节</h5><p>– Component抽象构件角色：<br>    • io流中的InputStream、OutputStream、Reader、Writer<br>– ConcreteComponent 具体构件角色：<br>    • io流中的FileInputStream、FileOutputStream<br>– Decorator装饰角色：<br>    • 持有一个抽象构件的引用：io流中的FilterInputStream、FilterOutputStream<br>– ConcreteDecorator具体装饰角色：<br>    • 负责给构件对象增加新的责任。Io流中的BufferedOutputStream、BufferedInputStream等。</p><h5 id="开发中使用的场景"><a href="#开发中使用的场景" class="headerlink" title="开发中使用的场景"></a>开发中使用的场景</h5><p>– IO中输入流和输出流的设计<br>– Swing包中图形界面构件功能<br>– Servlet API 中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequest<strong>Wrapper</strong>，HttpServletRequest<strong>Wrapper</strong>类，增强了request对象的功能。<br>– Struts2中，request，response,session对象的处理</p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>​    – 装饰模式（Decorator）也叫包装器模式（Wrapper）<br>​    – 装饰模式降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构建类和具体装饰类可以独立变化，以便增加新的具体构建类和具体装饰类。<br>• 优点<br>​    – 扩展对象功能，比继承灵活，不会导致类个数急剧增加<br>​    – 可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象<br>​    – 具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类。<br>• 缺点<br>​    – 产生很多小对象。大量小对象占据内存，一定程度上影响性能。<br>​    – 装饰模式易于出错，调试排查比较麻烦。</p><h5 id="装饰模式和桥接模式的区别："><a href="#装饰模式和桥接模式的区别：" class="headerlink" title="装饰模式和桥接模式的区别："></a>装饰模式和桥接模式的区别：</h5><p>– 两个模式都是为了解决过多子类对象问题。但他们の诱因不一样。桥模式是对象自身现有机制沿着多个维度变化，是既有部分不稳定。装饰模式是为了增加新的功能。</p><h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><h5 id="迪米特法则-最少知识原则-："><a href="#迪米特法则-最少知识原则-：" class="headerlink" title="迪米特法则(最少知识原则)："></a>迪米特法则(最少知识原则)：</h5><p> 一个软件实体应当尽可能少的与其他实体发生相互作用</p><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190506222842.png?raw=true" alt=""></p><h5 id="模仿开公司"><a href="#模仿开公司" class="headerlink" title="模仿开公司"></a>模仿开公司</h5><p>政府机构</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> 工商局  </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">checkName</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//核名</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> 海淀区工商局 <span class="hljs-keyword">implements</span> 工商局 </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkName</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"检查名字是否有冲突！"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">package</span> com.bjsxt.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> 税务局 </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">taxCertificate</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//办理税务登记证</span><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> 海淀税务局 <span class="hljs-keyword">implements</span> 税务局 </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">taxCertificate</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"在海淀税务局办理税务登记证！"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">package</span> com.bjsxt.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> 银行 </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">openAccount</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//开户</span><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> 中国工商银行 <span class="hljs-keyword">implements</span> 银行 </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openAccount</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"在中国工商银行开户！"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">package</span> com.bjsxt.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> 质检局 </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">orgCodeCertificate</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//办理组织机构代码证</span><br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> 海淀质检局 <span class="hljs-keyword">implements</span> 质检局 </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">orgCodeCertificate</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"在海淀区质检局办理组织机构代码证！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>外观：RegisterFacade.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.facade;<br><br><span class="hljs-comment">/**<br> * 办理注册公司流程的门面对象<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterFacade</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></span>&#123;<br>工商局  a = <span class="hljs-keyword">new</span> 海淀区工商局();<br>a.checkName();<br>质检局 b = <span class="hljs-keyword">new</span> 海淀质检局();<br>b.orgCodeCertificate();<br>税务局  c  = <span class="hljs-keyword">new</span> 海淀税务局();<br>c.taxCertificate();<br>银行  d = <span class="hljs-keyword">new</span> 中国工商银行();<br>d.openAccount();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用Client</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.facade;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//不使用外观模式</span><br><span class="hljs-comment">//工商局  a = new 海淀区工商局();</span><br><span class="hljs-comment">//a.checkName();</span><br><span class="hljs-comment">//质检局 b = new 海淀质检局();</span><br><span class="hljs-comment">//b.orgCodeCertificate();</span><br><span class="hljs-comment">//税务局  c  = new 海淀税务局();</span><br><span class="hljs-comment">//c.taxCertificate();</span><br><span class="hljs-comment">//银行  d = new 中国工商银行();</span><br><span class="hljs-comment">//d.openAccount();</span><br><br><span class="hljs-keyword">new</span> RegisterFacade().register();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>• 场景：<br>    – 内存属于稀缺资源，不要随便浪费。如果有很多个完全相同或相似的对象，我们可以通过享元模式，节省内存。<br>• 核心：<br>    – 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br>    – 享元对象能做到共享的关键是区分了内部状态和外部状态。<br>        • 内部状态：可以共享，不会随环境变化而改变<br>        • 外部状态：不可以共享，会随环境变化而改变</p><h5 id="享元模式实现"><a href="#享元模式实现" class="headerlink" title="享元模式实现"></a>享元模式实现</h5><p>– FlyweightFactory享元工厂类<br>    • 创建并管理享元对象，享元池一般设计成键值对<br>– FlyWeight抽象享元类<br>    • 通常是一个接口或抽象类，声明公共方法，这些方法可以向外界提供对象的内部状态，设置外部状态。<br>– ConcreteFlyWeight具体享元类<br>    • 为内部状态提供成员变量进行存储<br>– UnsharedConcreteFlyWeight非共享享元类<br>    • 不能被共享的子类可以设计为非共享享元类</p><p>享元接口，和享元类（内部状态）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.flyweight;<br><br><span class="hljs-comment">/**<br> * 享元类<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ChessFlyWeight</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(String c)</span></span>;<br><span class="hljs-function">String <span class="hljs-title">getColor</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(Coordinate c)</span></span>;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteChess</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ChessFlyWeight</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String color;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteChess</span><span class="hljs-params">(String color)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.color = color;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(Coordinate c)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"棋子颜色："</span>+color);<br>System.out.println(<span class="hljs-string">"棋子位置："</span>+c.getX()+<span class="hljs-string">"----"</span>+c.getY());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> color;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(String c)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.color = c;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>外部享元类：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.flyweight;<br><br><span class="hljs-comment">/**<br> * 外部状态UnSharedConcreteFlyWeight<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coordinate</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x,y;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Coordinate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.x = x;<br><span class="hljs-keyword">this</span>.y = y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setX</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.x = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setY</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.y = y;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>享元工厂（享元池）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.flyweight;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**<br> * 享元工厂类<br> * <span class="hljs-doctag">@author</span> Administrator<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChessFlyWeightFactory</span> </span>&#123;<br><span class="hljs-comment">//享元池</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String,ChessFlyWeight&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, ChessFlyWeight&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ChessFlyWeight  <span class="hljs-title">getChess</span><span class="hljs-params">(String color)</span></span>&#123;<br><br><span class="hljs-keyword">if</span>(map.get(color)!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">return</span> map.get(color);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>ChessFlyWeight cfw = <span class="hljs-keyword">new</span> ConcreteChess(color);<br>map.put(color, cfw);<br><span class="hljs-keyword">return</span> cfw;<br>&#125;<br><br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.flyweight;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ChessFlyWeight chess1 = ChessFlyWeightFactory.getChess(<span class="hljs-string">"黑色"</span>);<br>ChessFlyWeight chess2 = ChessFlyWeightFactory.getChess(<span class="hljs-string">"黑色"</span>);<br>System.out.println(chess1);<br>System.out.println(chess2);<br><br>System.out.println(<span class="hljs-string">"增加外部状态的处理==========="</span>);<br>chess1.display(<span class="hljs-keyword">new</span> Coordinate(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>));<br>chess2.display(<span class="hljs-keyword">new</span> Coordinate(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>));<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="享元模式开发中应用的场景："><a href="#享元模式开发中应用的场景：" class="headerlink" title="享元模式开发中应用的场景："></a>享元模式开发中应用的场景：</h5><p>– 享元模式由于其共享的特性，可以在任何“池”中操作，比如：线程池、数据库连接池。<br>– String类的设计也是享元模式</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>创建型模式</title>
      <link href="/2019/05/28/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/28/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="设计模式GOF23"><a href="#设计模式GOF23" class="headerlink" title="设计模式GOF23"></a>设计模式GOF23</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。</p><p>GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式</p><a id="more"></a><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点，常见的，windows资源管理器，文件系统，回收站、spring的bean、读取配置文件的类（没必要每次使用配置文件的时候，都去new）、数据库连接池，SpringMVC/Struts1框架中的控制器也是单例、应用程序的日志应用，是因为共享的日志文件一般在打开状态，否则不好追加。</p><p>• 单例模式的优点：<br>– 由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要<br>比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动<br>时直接产生一个单例对象，然后永久驻留内存的方式来解决<br>– 单例模式可以在系统设置全局的访问点，优化环共享资源访问，例如可以设计<br>一个单例类，负责所有数据表的映射处理</p><p>• 常见的五种单例模式实现方式：<br>– 主要：<br>    • 饿汉式（线程安全，调用效率高。 但是，不能延时加载。）<br>    • 懒汉式（线程安全，调用效率不高。 但是，可以延时加载。）<br>– 其他：<br>    • 双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）<br>    • 静态内部类式(线程安全，调用效率高。 但是，可以延时加载)<br>    • 枚举单例(线程安全，调用效率高，不能延时加载</p><h5 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonDemo1</span> </span>&#123;<br><br><span class="hljs-comment">//类初始化时，立即加载这个对象（没有延时加载的优势）。加载类时，天然的是线程安全的！</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonDemo1 instance = <span class="hljs-keyword">new</span> SingletonDemo1();  <br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonDemo1</span><span class="hljs-params">()</span></span>&#123;<br>&#125;<br><br><span class="hljs-comment">//方法没有同步，调用效率高！,注意该方法一定要是static方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo1  <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>• 饿汉式单例模式代码中，static变量会在类装载时初始化，此时也不会涉及多个线程对象访问该对象的问题。虚拟机保证只会装载一次该类，肯定不会发生并发访问的问题。因此，可以省略synchronized关键字。<br>• 问题：如果只是加载本类，而不是要调用getInstance()，甚至永远没有调用，则会造成资源浪费！</p><h5 id="懒汉式："><a href="#懒汉式：" class="headerlink" title="懒汉式："></a>懒汉式：</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonDemo2</span> </span>&#123;<br><br><span class="hljs-comment">//类初始化时，不初始化这个对象（延时加载，真正用的时候再创建）。</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonDemo2 instance;  <br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonDemo2</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//私有化构造器</span><br>&#125;<br><br><span class="hljs-comment">//方法同步，调用效率低！也需要加static</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">synchronized</span> SingletonDemo2  <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(instance==<span class="hljs-keyword">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> SingletonDemo2();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>• 要点：– lazy load! 延迟加载， 懒加载！ 真正用的时候才加载！<br>• 问题：– 资源利用率高了。但是，每次调用getInstance()方法都要同步，并发效率较低</p><h5 id="双重检测锁模式"><a href="#双重检测锁模式" class="headerlink" title="双重检测锁模式"></a>双重检测锁模式</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonDemo03</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonDemo03 instance = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo03 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>SingletonDemo03 sc;<br><span class="hljs-keyword">synchronized</span> (SingletonDemo03.class) &#123;<br>sc = instance;<br><span class="hljs-keyword">if</span> (sc == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (SingletonDemo03.class) &#123;<br><span class="hljs-keyword">if</span> (sc == <span class="hljs-keyword">null</span>) &#123;<br>sc = <span class="hljs-keyword">new</span> SingletonDemo03();<br>&#125;<br>&#125;<br>instance = sc;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonDemo03</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>• 这个模式将同步内容下方到if内部，提高了执行的效率不必每次获取对象时都进行同步，只有第一次才同步创建了以后就没必要了。<br>• 问题：由于编译器优化原因和JVM底层内部模型原因，偶尔会出问题。不建议使用。</p><h5 id="静态内部类模式"><a href="#静态内部类模式" class="headerlink" title="静态内部类模式"></a>静态内部类模式</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonDemo4</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonClassInstance</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-comment">/*final*/</span> SingletonDemo4 instance = <span class="hljs-keyword">new</span> SingletonDemo4();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonDemo4</span><span class="hljs-params">()</span></span>&#123;<br>&#125;<br><br><span class="hljs-comment">//方法没有同步，调用效率高！</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo4  <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> SingletonClassInstance.instance;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>要点：<br>– 外部类没有static属性，则不会像饿汉式那样立即加载对象。<br>– 只有真正调用getInstance(),才会加载静态内部类。加载类时是线程 安全的。 instance是static final<br>类型，保证了内存中只有这样一个实例存在，而且只能被赋值一次，从而保证了线程安全性.<br>– 兼备了并发高效调用和延迟加载的优势！</p><h5 id="使用枚举实现单例模式"><a href="#使用枚举实现单例模式" class="headerlink" title="使用枚举实现单例模式"></a>使用枚举实现单例模式</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> SingletonDemo5 &#123;<br><br><span class="hljs-comment">//这个枚举元素，本身就是单例对象！</span><br>INSTANCE;<br><br><span class="hljs-comment">//添加自己需要的操作！</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">singletonOperation</span><span class="hljs-params">()</span></span>&#123;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    SingletonDemo05 sd = SingletonDemo05.INSTANCE;<br>    SingletonDemo05 sd2 = SingletonDemo05.INSTANCE;<br>    System.out.println(sd==sd2);<br>&#125;<br></code></pre></td></tr></table></figure><p>• 优点：<br>– 实现简单<br>– 枚举本身就是单例模式。由JVM从根本上提供保障！避免通过反射和反序列化的漏洞！<br>• 缺点：<br>– 无延迟加载</p><h5 id="通过反射破解单例"><a href="#通过反射破解单例" class="headerlink" title="通过反射破解单例"></a>通过反射破解单例</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonDemo6</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//私有化构造器</span><br>        <span class="hljs-comment">//如果instance不为空就抛出异常（通过抛异常的方式）</span><br><span class="hljs-keyword">if</span>(instance!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">import</span> java.io.ObjectStreamException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonDemo6</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><span class="hljs-comment">//类初始化时，不初始化这个对象（延时加载，真正用的时候再创建）。</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonDemo6 instance;  <br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonDemo6</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//私有化构造器</span><br>        <span class="hljs-comment">//如果instance不为空就抛出异常（通过抛异常的方式）</span><br><span class="hljs-keyword">if</span>(instance!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//方法同步，调用效率低！</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">synchronized</span> SingletonDemo6  <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(instance==<span class="hljs-keyword">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> SingletonDemo6();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-comment">//反序列化时，如果定义了readResolve()则直接返回此方法指定的对象。而不需要单独再创建新对象！</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">readResolve</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ObjectStreamException </span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>Class&lt;SingletonDemo6&gt; clazz =  (Class&lt;SingletonDemo6&gt;) Class.forName(<span class="hljs-string">"com.bjsxt.singleton.SingletonDemo6"</span>);<br>Constructor&lt;SingletonDemo6&gt; c =  clazz.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br><br>    <span class="hljs-comment">//暴力访问</span><br>c.setAccessible(<span class="hljs-keyword">true</span>);<br><br>SingletonDemo6 s3  = c.newInstance();<br>SingletonDemo6 s4  = c.newInstance();<br><br>System.out.println(s3);<br>System.out.println(s4);<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="通过反序列化破解单例"><a href="#通过反序列化破解单例" class="headerlink" title="通过反序列化破解单例"></a>通过反序列化破解单例</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反序列化时，如果定义了readResolve()则直接返回此方法指定的对象。而不需要单独再创建新对象！</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">readResolve</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ObjectStreamException </span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">import</span> java.io.ObjectStreamException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonDemo6</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><span class="hljs-comment">//类初始化时，不初始化这个对象（延时加载，真正用的时候再创建）。</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonDemo6 instance;  <br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonDemo6</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//私有化构造器</span><br>        <br>&#125;<br><br><span class="hljs-comment">//方法同步，调用效率低！</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">synchronized</span> SingletonDemo6  <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(instance==<span class="hljs-keyword">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> SingletonDemo6();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-comment">//反序列化时，如果定义了readResolve()则直接返回此方法指定的对象。而不需要单独再创建新对象！</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">readResolve</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ObjectStreamException </span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>SingletonDemo6 s1 = SingletonDemo6.getInstance();<br>SingletonDemo6 s2 = SingletonDemo6.getInstance();<br><br>System.out.println(s1);<br>System.out.println(s2);<br><br><br><span class="hljs-comment">//通过反序列化的方式创建多个对象</span><br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"d:/a.txt"</span>);<br>ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br>oos.writeObject(s1);<br>oos.close();<br>fos.close();<br><br>ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"d:/a.txt"</span>));<br>SingletonDemo6 s3 =  (SingletonDemo6) ois.readObject();<br>System.out.println(s3);<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="多线程环境测试"><a href="#多线程环境测试" class="headerlink" title="多线程环境测试"></a>多线程环境测试</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.singleton;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client3</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><span class="hljs-keyword">int</span> threadNum = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//内部类访问外部类变量，变量要加final</span><br><span class="hljs-keyword">final</span> CountDownLatch  countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(threadNum);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;threadNum;i++)&#123;<br>            <span class="hljs-comment">//new Runnable()相当于创建了一个匿名内部类</span><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000000</span>;i++)&#123;<br><span class="hljs-comment">//Object o = SingletonDemo1.getInstance();</span><br>Object o = SingletonDemo5.INSTANCE;<br>&#125;<br><br>countDownLatch.countDown();<br>&#125;<br>&#125;).start();<br>&#125;<br><br>countDownLatch.await();<span class="hljs-comment">//main线程阻塞，直到计数器变为0，才会继续往下执行！</span><br><br><span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">"总耗时："</span>+(end-start));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常见的五种单例模式在多线程环境下的效率测试<br>– 大家只要关注相对值即可。在不同的环境下不同的程序测得值完全不一样</p><table><thead><tr><th>饿汉式</th><th>22ms</th></tr></thead><tbody><tr><td>懒汉式</td><td>636ms</td></tr><tr><td>静态内部类式</td><td>28ms</td></tr><tr><td>枚举式</td><td>32ms</td></tr><tr><td>双重检查锁式</td><td>65ms</td></tr></tbody></table><p> 常见的五种单例模式实现方式<br>– 主要：<br>• 饿汉式（线程安全，调用效率高。 但是，不能延时加载。）<br>• 懒汉式（线程安全，调用效率不高。 但是，可以延时加载。）<br>– 其他：<br>• 双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）<br>• 静态内部类式(线程安全，调用效率高。 但是，可以延时加载)<br>• 枚举式(线程安全，调用效率高，不能延时加载。并且可以天然的防止反射和反序列化漏洞！)<br>• 如何选用?<br>– 单例对象 占用 资源 少，不需要 延时加载：<br>• 枚举式 好于 饿汉式<br>– 单例对象 占用 资源 大，需要 延时加载：<br>• 静态内部类式 好于 懒汉式</p><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>– 实现了创建者和调用者的分离。<br>– 详细分类：<br>• 简单工厂模式<br>• 工厂方法模式<br>• 抽象工厂模式</p><h5 id="面向对象设计的基本原则："><a href="#面向对象设计的基本原则：" class="headerlink" title="面向对象设计的基本原则："></a>面向对象设计的基本原则：</h5><p>OCP（开闭原则，Open-Closed Principle）：一个软件的实体应当对扩展开放，对修改关闭。<br>DIP（依赖倒转原则，Dependence Inversion Principle）：要针对接口编程，不要针对实现编程。<br>LoD（迪米特法则，Law of Demeter）：只与你直接的朋友通信，而避免和陌生人通信。</p><h5 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h5><p>Car.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.simplefactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Car</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Audi.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.simplefactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Audi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"奥迪在跑"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Byd.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.simplefactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Byd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"比亚迪在跑"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>CarFactory.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.simplefactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Car <span class="hljs-title">createCar</span><span class="hljs-params">(String type)</span></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">"奥迪"</span>.equals(type))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Audi();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">"比亚迪"</span>.equals(type))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Byd();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>静态工厂CarFactory2.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.simplefactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Car <span class="hljs-title">createAudi</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Audi();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Car <span class="hljs-title">createByd</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Byd();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Client02.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.simplefactory;<br><br><span class="hljs-comment">/**<br> * 简单工厂情况下<br> * <span class="hljs-doctag">@author</span> 尚学堂高淇 www.sxt.cn<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client02</span> </span>&#123;   <span class="hljs-comment">//调用者</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Car c1 =CarFactory.createCar(<span class="hljs-string">"奥迪"</span>);<br>Car c2 = CarFactory.createCar(<span class="hljs-string">"比亚迪"</span>);<br><br>c1.run();<br>c2.run();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><p>– 为了避免简单工厂模式的缺点，不完全满足OCP。<br>– 工厂方法模式和简单工厂模式最大的不同在于，简单工厂模式只有一个（对于一个项目或者一个独立模块而言）工厂类，而工厂方法模式有一组实现了相同接口的工厂类。</p><p>Car.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.factorymethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Car</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Audi.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.factorymethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Audi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"奥迪在跑"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>工厂接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.factorymethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br><span class="hljs-function">Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>工厂AudiFactory.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.factorymethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AudiFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Audi();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用Client.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.factorymethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Car c1 = <span class="hljs-keyword">new</span> AudiFactory().createCar();<br>Car c2 = <span class="hljs-keyword">new</span> BydFactory().createCar();<br><br>c1.run();<br>c2.run();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>• 简单工厂模式和工厂方法模式PK:<br>– 结构复杂度<br>从这个角度比较，显然简单工厂模式要占优。简单工厂模式只需一个工厂类，而工厂方法模式的工厂类随着产品类个数增加而增加，这无疑会使类的个数越来越多，从而增加了结构的复杂程度。<br>– 代码复杂度<br>代码复杂度和结构复杂度是一对矛盾，既然简单工厂模式在结构方面相对简洁，那么它在代码方面肯定是比工厂方法模式复杂的了。简单工厂模式的工厂类随着产品类的增加需要增加很多方法（或代码），而工厂方法模式每个具体工厂类只完成单一任务，代码简洁。<br>– 客户端编程难度<br>工厂方法模式虽然在工厂类结构中引入了接口从而满足了OCP，但是在客户端编码中需要对工厂类进行实例化。而简单工厂模式的工厂类是个静态类，在客户端无需实例化，这无疑是个吸引人的优点。<br>– 管理上的难度这是个关键的问题。我们先谈扩展。众所周知，工厂方法模式完全满足OCP，即它有非常良好的扩展性。那是否就说明了简单工厂模式就没有扩展性呢？答案是否定的。简单工厂模式同样具备良好的扩展性——扩展的时候仅需要修改少量的代码（修改工厂类的代码）就可以满足扩展性的要求了。尽管这没有完全满足OCP，但我们不需要太拘泥于设计理论，要知道，sun提供的java官方工具包中也有想到多没有满足OCP的例子啊。然后我们从维护性的角度分析下。假如某个具体产品类需要进行一定的修改，很可能需要修改对应的工厂类。当同时需要修改多个产品类的时候，对工厂类的修改会变得相当麻烦（对号入座已经是个问题了）。反而简单工厂没有这些麻烦，当多个产品类需要修改是，简单工厂模式仍然仅仅需要修改唯一的工厂类（无论怎样都能改到满足要求吧？大不了把这个类重写）。<br>• <strong>根据设计理论建议：工厂方法模式。但实际上，我们一般都用简单工厂模式。</strong></p><h5 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h5><p>• 抽象工厂模式<br>– 用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）<br>– 抽象工厂模式是工厂方法模式的升级版本，在有多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式。</p><p>引擎：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.abstractFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Engine</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LuxuryEngine</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Engine</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"转得快!"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"启动快，可以自动启停!"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LowEngine</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Engine</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"转得慢!"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"启动慢!"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>座椅：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.abstractFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Seat</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">massage</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LuxurySeat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Seat</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">massage</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"可以自动按摩！"</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LowSeat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Seat</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">massage</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"不能按摩！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>轮胎：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.abstractFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Tyre</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">revolve</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LuxuryTyre</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Tyre</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">revolve</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"旋转不磨损！"</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LowTyre</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Tyre</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">revolve</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"旋转磨损快！"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>汽车工厂</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.abstractFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br><span class="hljs-function">Engine <span class="hljs-title">createEngine</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">Seat <span class="hljs-title">createSeat</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">Tyre <span class="hljs-title">createTyre</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//高端汽车工厂</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LuxuryCarFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Engine <span class="hljs-title">createEngine</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LuxuryEngine();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Seat <span class="hljs-title">createSeat</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LuxurySeat();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Tyre <span class="hljs-title">createTyre</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LuxuryTyre();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//低端汽车工厂</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LowCarFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Engine <span class="hljs-title">createEngine</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LowEngine();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Seat <span class="hljs-title">createSeat</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LowSeat();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Tyre <span class="hljs-title">createTyre</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LowTyre();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.factory.abstractFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>CarFactory carFactory = <span class="hljs-keyword">new</span> LuxuryCarFactory();<br>Engine e = carFactory.createEngine();<br><br>e.start();<br>e.run();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>• 工厂模式要点：<br>– 简单工厂模式(静态工厂模式)<br>• 虽然某种程度不符合设计原则，但实际使用最多。<br>– 工厂方法模式<br>• 不修改已有类的前提下，通过增加新的工厂类实现扩展。<br>– 抽象工厂模式<br>• 不可以增加产品，可以增加产品族！<br>• 应用场景<br>– JDK中Calendar的getInstance方法<br>– JDBC中Connection对象的获取<br>– Hibernate中SessionFactory创建Session<br>– spring中IOC容器创建管理bean对象<br>– XML解析时的DocumentBuilderFactory创建解析器对象<br>– 反射中Class对象的newInstance()</p><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>• 场景：<br>– 我们要建造一个复杂的产品。比如：神州飞船,Iphone。这个复杂的产品的创建。有这样一个问题需要处理：<br>• 装配这些子组件是不是有个步骤问题?<br>– 实际开发中，我们所需要的对象构建时，也非常复杂，有很多步骤需要处理时。</p><p>• 建造模式的本质：<br>– 分离了对象子组件的单独构造(由<strong>Builder</strong>来负责)和装配(由<strong>Director</strong>负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况下使用。<br>– 由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用</p><p>构建尚学堂牌神舟飞船</p><p><img src="https://github.com/Yukinoon/Yukinoon.github.io/blob/master/images/pageImg/TIM%E6%88%AA%E5%9B%BE20190422205729.png?raw=true" alt="建造者模式建造神舟飞船"></p><p>AirShip，OrbitalModule，Engine，EscapeTower</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AirShip</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> OrbitalModule orbitalModule;  <span class="hljs-comment">//轨道舱</span><br><span class="hljs-keyword">private</span> Engine engine; <span class="hljs-comment">//发动机</span><br><span class="hljs-keyword">private</span> EscapeTower escapeTower;  <span class="hljs-comment">//逃逸塔</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">launch</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">"发射！"</span>);<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> OrbitalModule <span class="hljs-title">getOrbitalModule</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> orbitalModule;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrbitalModule</span><span class="hljs-params">(OrbitalModule orbitalModule)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.orbitalModule = orbitalModule;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Engine <span class="hljs-title">getEngine</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> engine;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEngine</span><span class="hljs-params">(Engine engine)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.engine = engine;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> EscapeTower <span class="hljs-title">getEscapeTower</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> escapeTower;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEscapeTower</span><span class="hljs-params">(EscapeTower escapeTower)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.escapeTower = escapeTower;<br>&#125;<br><br><br><br><br><br>&#125;<br><br><span class="hljs-comment">//轨道舱</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrbitalModule</span></span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrbitalModule</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//发动机</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Engine</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Engine</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><br>&#125;<br><br><span class="hljs-comment">//逃逸塔</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EscapeTower</span></span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EscapeTower</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>AirShipBuilder接口（建造者）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AirShipBuilder</span> </span>&#123;<br><span class="hljs-function">Engine <span class="hljs-title">builderEngine</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">OrbitalModule <span class="hljs-title">builderOrbitalModule</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">EscapeTower <span class="hljs-title">builderEscapeTower</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> （装配者）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AirshipDirector</span> </span>&#123;<br><span class="hljs-function">AirShip <span class="hljs-title">directorAirShip</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//组装飞船</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><p>SxtAirShipBuilder</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SxtAirShipBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AirShipBuilder</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Engine <span class="hljs-title">builderEngine</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"构建尚学堂牌发动机！"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Engine(<span class="hljs-string">"尚学堂牌发动机！"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> EscapeTower <span class="hljs-title">builderEscapeTower</span><span class="hljs-params">()</span> </span>&#123;<br><br>System.out.println(<span class="hljs-string">"构建逃逸塔"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> EscapeTower(<span class="hljs-string">"尚学堂牌逃逸塔"</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> OrbitalModule <span class="hljs-title">builderOrbitalModule</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">"构建轨道舱"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OrbitalModule(<span class="hljs-string">"尚学堂牌轨道舱"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>SxtAirshipDirector</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SxtAirshipDirector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AirshipDirector</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> AirShipBuilder builder;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SxtAirshipDirector</span><span class="hljs-params">(AirShipBuilder builder)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.builder = builder;<br>&#125;<br><br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AirShip <span class="hljs-title">directorAirShip</span><span class="hljs-params">()</span> </span>&#123;<br>Engine e =  builder.builderEngine();<br>EscapeTower et =builder.builderEscapeTower();<br>OrbitalModule o = builder.builderOrbitalModule();<br><br>AirShip ship = <span class="hljs-keyword">new</span> AirShip();<br>ship.setEngine(e);<br>ship.setEscapeTower(et);<br>ship.setOrbitalModule(o);<br><br><span class="hljs-keyword">return</span> ship;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用者Client</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>AirshipDirector director = <span class="hljs-keyword">new</span> SxtAirshipDirector(<span class="hljs-keyword">new</span> SxtAirShipBuilder());<br><br>AirShip airShip = director.directorAirShip();<br><br>System.out.println(airShip.getEngine().getName());<br><br>airShip.launch();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>• 开发中应用场景：<br>– StringBuilder类的append方法<br>– SQL中的PreparedStatement<br>– JDOM中，DomBuilder、SAXBuilder</p><h4 id="原型模式prototype"><a href="#原型模式prototype" class="headerlink" title="原型模式prototype"></a>原型模式prototype</h4><p>• 场景：<br>– 思考一下：克隆技术是怎么样的过程? 克隆羊多利大家还记得吗?<br>– javascript语言中的，继承怎么实现?那里面也有prototype，大家还记得吗?<br>• 原型模式：<br>– 通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。<br>– 就是java中的克隆技术，以某个对象为原型，复制出新的对象。显然，新的对象具备原型对象的特点<br>– 优势有：效率高(直接克隆，避免了重新执行构造过程步骤) 。<br>– 克隆类似于new，但是不同于new。new创建新的对象属性采用的是默认值。克隆出的对象的属性值完全和原对象相同。并且克隆出的新对象改变不会影响原型对象。然后，再修改克隆对象的值。<br>• 原型模式实现：<br>– Cloneable接口和clone方法<br>– Prototype模式中实现起来最困难的地方就是内存复制操作，所幸在Java中提供了clone()方法替我们做了绝大部分事情。<br>• 注意用词：克隆和拷贝一回事！</p><p><strong>浅克隆：克隆出来的对象与原型对象内部引用的其他对象，是同一个对象</strong></p><p><strong>深克隆：克隆出来的对象与原型对象内部引用的其他对象，是不同对象</strong></p><h5 id="通过实现Cloneable接口实现克隆"><a href="#通过实现Cloneable接口实现克隆" class="headerlink" title="通过实现Cloneable接口实现克隆"></a>通过实现Cloneable接口实现克隆</h5><p>Sheep.java，要实现Cloneable，并重写clone()方法</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.prototype;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123; <span class="hljs-comment">//1997,英国的克隆羊，多利！</span><br><br><span class="hljs-keyword">private</span> String sname;<br><span class="hljs-keyword">private</span> Date birthday;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sheep</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sheep</span><span class="hljs-params">(String sname, Date birthday)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.sname = sname;<br><span class="hljs-keyword">this</span>.birthday = birthday;<br>&#125;<br><br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>Object obj = <span class="hljs-keyword">super</span>.clone();<span class="hljs-comment">//直接调用Object对象的clone()方法</span><br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSname</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> sname;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSname</span><span class="hljs-params">(String sname)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.sname = sname;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> birthday;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.birthday = birthday;<br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用：Client（浅克隆）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.prototype;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br><br>Sheep s1 = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">"少利"</span>,<span class="hljs-keyword">new</span> Date(<span class="hljs-number">12312321331L</span>));<br>System.out.println(s1);<br>System.out.println(s1.getSname());<br>System.out.println(s1.getBirthday());<br><br><br>Sheep s2 = (Sheep) s1.clone();<br>s2.setSname(<span class="hljs-string">"多利"</span>);<br>System.out.println(s2);<br>System.out.println(s2.getSname());<br>System.out.println(s2.getBirthday());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Sheep2（深克隆）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>Object obj = <span class="hljs-keyword">super</span>.clone();<span class="hljs-comment">//直接调用Object对象的clone()方法</span><br><br><span class="hljs-comment">//实现深克隆</span><br>Sheep2 s = (Sheep2) obj;<br>s.birthday = (Date) <span class="hljs-keyword">this</span>.birthday.clone();<br><br><span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="通过序列化和反序列化实现深克隆"><a href="#通过序列化和反序列化实现深克隆" class="headerlink" title="通过序列化和反序列化实现深克隆"></a>通过序列化和反序列化实现深克隆</h5><p>Sheep，实现Cloneable,Serializable接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.prototype;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span>,<span class="hljs-title">Serializable</span> </span>&#123;   <span class="hljs-comment">//1997,英国的克隆羊，多利！</span><br><span class="hljs-keyword">private</span> String sname;<br><span class="hljs-keyword">private</span> Date birthday;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>Object obj = <span class="hljs-keyword">super</span>.clone();  <span class="hljs-comment">//直接调用object对象的clone()方法！</span><br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br>    <span class="hljs-comment">//带参构造，Get，Set方法省略</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>Clinet3(使用序列化和反序列化)</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.prototype;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**<br> * 原型模式(深复制,使用序列化和反序列化的方式实现深复制)<br> * <span class="hljs-doctag">@author</span> 尚学堂高淇www.sxt.cn<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException, Exception </span>&#123;<br>Date date = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">12312321331L</span>);<br>Sheep s1 = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">"少利"</span>,date);<br>System.out.println(s1);<br>System.out.println(s1.getSname());<br>System.out.println(s1.getBirthday());<br><br><br><span class="hljs-comment">//使用序列化和反序列化实现深复制</span><br>ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>ObjectOutputStream    oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>oos.writeObject(s1);<br><span class="hljs-keyword">byte</span>[] bytes = bos.toByteArray();<br><br>ByteArrayInputStream  bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bytes);<br>ObjectInputStream  ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br><br>Sheep s2 = (Sheep) ois.readObject();   <span class="hljs-comment">//克隆好的对象！</span><br><br>System.out.println(<span class="hljs-string">"修改原型对象的属性值"</span>);  <br>date.setTime(<span class="hljs-number">23432432423L</span>);<br><br>System.out.println(s1.getBirthday());<br><br>s2.setSname(<span class="hljs-string">"多利"</span>);<br>System.out.println(s2);<br>System.out.println(s2.getSname());<br>System.out.println(s2.getBirthday());<br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="new对象和克隆效率测试对比"><a href="#new对象和克隆效率测试对比" class="headerlink" title="new对象和克隆效率测试对比"></a>new对象和克隆效率测试对比</h5><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjsxt.prototype;<br><br><span class="hljs-comment">/**<br> * 测试普通new方式创建对象和clone方式创建对象的效率差异！<br> * 如果需要短时间创建大量对象，并且new的过程比较耗时。则可以考虑使用原型模式！<br> * <span class="hljs-doctag">@author</span> 尚学堂高淇 www.sxt.cn<br> *<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client4</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testNew</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span></span>&#123;<br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>Laptop t = <span class="hljs-keyword">new</span> Laptop();<br>&#125;<br><span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">"new的方式创建耗时："</span>+(end-start));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testClone</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span>&#123;<br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>Laptop t = <span class="hljs-keyword">new</span> Laptop();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>Laptop temp = (Laptop) t.clone();<br>&#125;<br><span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">"clone的方式创建耗时："</span>+(end-start));<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>testNew(<span class="hljs-number">1000</span>);<br>testClone(<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Laptop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;  <span class="hljs-comment">//笔记本电脑</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Laptop</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);  <span class="hljs-comment">//模拟创建对象耗时的过程!</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>Object obj = <span class="hljs-keyword">super</span>.clone();  <span class="hljs-comment">//直接调用object对象的clone()方法！</span><br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>无法用SSH协议克隆Git项目</title>
      <link href="/2019/04/16/%E6%97%A0%E6%B3%95%E7%94%A8SSH%E5%8D%8F%E8%AE%AE%E5%85%8B%E9%9A%86Git%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/04/16/%E6%97%A0%E6%B3%95%E7%94%A8SSH%E5%8D%8F%E8%AE%AE%E5%85%8B%E9%9A%86Git%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>1.删除.SSH文件下的known_hosts(.SSH在C:\Users\Windows用户名目录下)</p><p>2.生成ssh公钥认证所需的公钥和私钥文件</p><p>ssh-keygen -t rsa -C “你的名字/你的邮箱”</p><p>然后会出现以下内容</p><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):<br>/c/Users/Administrator/.ssh/id_rsa already exists.<br>Overwrite (y/n)? y（输入y）<br>Enter passphrase (empty for no passphrase):（回车）</p><p>Enter same passphrase again:（回车）</p><h2 id="然后系统会自动在-ssh文件夹下生成两个文件，id-rsa和id-rsa-pub，用记事本打开id-rsa-pub，将里面的内容复制到下面这里（GitHub-的Setting下的SSH-and-GPGkeys），然后点击New-SSH-key，然后输入ssh-T-git-github-com验证与github连接是否成功时"><a href="#然后系统会自动在-ssh文件夹下生成两个文件，id-rsa和id-rsa-pub，用记事本打开id-rsa-pub，将里面的内容复制到下面这里（GitHub-的Setting下的SSH-and-GPGkeys），然后点击New-SSH-key，然后输入ssh-T-git-github-com验证与github连接是否成功时" class="headerlink" title="然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub，将里面的内容复制到下面这里（GitHub 的Setting下的SSH and GPGkeys），然后点击New SSH key，然后输入ssh -T git@github.com验证与github连接是否成功时"></a>然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub，将里面的内容复制到下面这里（GitHub 的Setting下的SSH and GPGkeys），然后点击New SSH key，然后输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>验证与github连接是否成功时</h2><p>The authenticity of host ‘github.com (13.250.177.223)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)? yes（输入yes）<br>Warning: Permanently added ‘github.com,13.250.177.223’ (RSA) to the list of known hosts.</p><p>Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access.</p><h2 id="最后再试着拉取一下项目，就成了。。"><a href="#最后再试着拉取一下项目，就成了。。" class="headerlink" title="最后再试着拉取一下项目，就成了。。"></a>最后再试着拉取一下项目，就成了。。</h2><p>若出现连接超时，首先找到git的安装目录，找到/etc/ssh/ssh_config文件，用notepad++打开这个文件，把如下内容复制到ssh_config文件的末尾处：并记得保存</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443<br></code></pre></td></tr></table></figure><p>再使用：ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>来测试git是否成功连接github，完事。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringCloud学习笔记三</title>
      <link href="/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
      <url>/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="服务监控hystrixDashboard"><a href="#服务监控hystrixDashboard" class="headerlink" title="服务监控hystrixDashboard"></a>服务监控hystrixDashboard</h3><p>1.新建microservicecloud-consumer-hystrix-dashboard工程</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- hystrix和 hystrix-dashboard相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-consumer-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 自己定义的api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Ribbon相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- feign相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- hystrix和 hystrix-dashboard相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">9001</span><br></code></pre></td></tr></table></figure><p>修改主启动类的名字+新注解@EnableHystrixDashboard</p><p>DeptConsumer_DashBoard_App.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableHystrixDashboard</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumer_DashBoard_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptConsumer_DashBoard_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所有的微服务提供者（8001、8002、8003）都需要监控依赖配置</p><p>1.添加pom依赖</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- actuator监控信息完善 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：启动microservicecloud-consumer-hystrix-dashboard，观测是否正常运行</p><p><a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a></p><p>先启动三个eureka三个集群，启动microservicecloud-provider-dept-hystrix-8001</p><p><a href="http://localhost:8001/dept/get/1" target="_blank" rel="noopener">http://localhost:8001/dept/get/1</a></p><p><a href="http://localhost:8001/hystrix.stream" target="_blank" rel="noopener">http://localhost:8001/hystrix.stream</a></p><p>图形化：</p><p>1.填写监控地址</p><p>地址：<a href="http://localhost:8001/hystrix.stream" target="_blank" rel="noopener">http://localhost:8001/hystrix.stream</a></p><p>Delay：2000</p><p>Title：demo01</p><p>如何看：七色，一圈，一线</p><h3 id="Zuul路由网关"><a href="#Zuul路由网关" class="headerlink" title="Zuul路由网关"></a>Zuul路由网关</h3><p>代理+路由+过滤</p><p>代理是将外部的请求转发到具体的微服务实例上，路由是实现外部访问统一入口的基础，过滤是对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础。Zuul需要和Eureka进行整合，从Eureka获得其他微服务的信息，以后访问微服务都是通过Zuul跳转后获得。</p><h3 id="Zuul路由基本配置"><a href="#Zuul路由基本配置" class="headerlink" title="Zuul路由基本配置"></a>Zuul路由基本配置</h3><p>1.新建模块microservicecloud-zuul-gateway-9527</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- zuul路由网关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-zuul-gateway-9527<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- zuul路由网关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- actuator监控 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- hystrix容错 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 日常标配 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 热部署插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">9527</span><br> <br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">  application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-zuul-gateway</span><br> <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka</span>  <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">gateway-9527.com</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span> <br> <br><span class="hljs-attr">info:</span><br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microcloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br></code></pre></td></tr></table></figure><p>修改host</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">127.0.0.1 myzuul.com<br></code></pre></td></tr></table></figure><p>主启动类加上@EnableZuulProxy</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableZuulProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zuul_9527_StartSpringCloudApp</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(Zuul_9527_StartSpringCloudApp.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动：三个eureka集群，一个服务提供类microservicecloud-provider-dept-8001，一个路由</p><p>1.不用路由<a href="http://localhost:8001/dept/get/1" target="_blank" rel="noopener">http://localhost:8001/dept/get/1</a></p><p>2.启用路由<a href="http://myzuul.com:9527/microservicecloud-dept/dept/get/2" target="_blank" rel="noopener">http://myzuul.com:9527/microservicecloud-dept/dept/get/2</a></p><h3 id="Zuul路由访问映射规则"><a href="#Zuul路由访问映射规则" class="headerlink" title="Zuul路由访问映射规则"></a>Zuul路由访问映射规则</h3><p>不暴露真实微服务的名称</p><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">zuul:</span> <br><span class="hljs-attr">  ignored-services:</span> <span class="hljs-string">microservicecloud-dept</span><br><span class="hljs-attr">  routes:</span> <br>    <span class="hljs-string">mydept.serviceId:</span> <span class="hljs-string">microservicecloud-dept</span><br>    <span class="hljs-string">mydept.path:</span> <span class="hljs-string">/mydept/**</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">9527</span><br> <br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">  application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-zuul-gateway</span><br> <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka</span>  <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">gateway-9527.com</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span> <br> <br> <br><span class="hljs-attr">zuul:</span> <br><span class="hljs-attr">  routes:</span> <br>    <span class="hljs-string">mydept.serviceId:</span> <span class="hljs-string">microservicecloud-dept</span><br>    <span class="hljs-string">mydept.path:</span> <span class="hljs-string">/mydept/**</span><br> <br><span class="hljs-attr">info:</span><br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microcloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br></code></pre></td></tr></table></figure><p>之前的访问路径：<a href="http://myzuul.com:9527/microservicecloud-dept/dept/get/2" target="_blank" rel="noopener">http://myzuul.com:9527/microservicecloud-dept/dept/get/2</a></p><p>现在：<a href="http://myzuul.com:9527/mydept/dept/get/2" target="_blank" rel="noopener">http://myzuul.com:9527/mydept/dept/get/2</a>，目前为止都可以访问</p><p>修改只能用代理地址访问</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">zuul:</span> <br><span class="hljs-attr">  ignored-services:</span> <span class="hljs-string">microservicecloud-dept</span><br><span class="hljs-attr">  routes:</span> <br>    <span class="hljs-string">mydept.serviceId:</span> <span class="hljs-string">microservicecloud-dept</span><br>    <span class="hljs-string">mydept.path:</span> <span class="hljs-string">/mydept/**</span><br></code></pre></td></tr></table></figure><p>批处理版</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">zuul:</span> <br><span class="hljs-attr">  ignored-services:</span> <span class="hljs-string">"*"</span><br><span class="hljs-attr">  routes:</span> <br>    <span class="hljs-string">mydept.serviceId:</span> <span class="hljs-string">microservicecloud-dept</span><br>    <span class="hljs-string">mydept.path:</span> <span class="hljs-string">/mydept/**</span><br></code></pre></td></tr></table></figure><p>设置统一的公共前缀</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">zuul:</span> <br><span class="hljs-attr">  prefix:</span> <span class="hljs-string">/atguigu</span><br><span class="hljs-attr">  ignored-services:</span> <span class="hljs-string">"*"</span><br><span class="hljs-attr">  routes:</span> <br>    <span class="hljs-string">mydept.serviceId:</span> <span class="hljs-string">microservicecloud-dept</span><br>    <span class="hljs-string">mydept.path:</span> <span class="hljs-string">/mydept/**</span><br></code></pre></td></tr></table></figure><p>访问路径：<a href="http://myzuul.com:9527/atguigu/mydept/dept/get/3" target="_blank" rel="noopener">http://myzuul.com:9527/atguigu/mydept/dept/get/3</a></p><h3 id="Config分布式配置中心"><a href="#Config分布式配置中心" class="headerlink" title="Config分布式配置中心"></a>Config分布式配置中心</h3><p>SpringCloud Config分为服务端和客户端两部分</p><p>服务端配置：</p><p>先用自己的GitHub账号新建一个名为microservicecloud-config的新Repository，</p><p>由上一步获取SSH协议的git地址（<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Yukinoon/microservicecloud-config.git） ，在本地硬盘目录上新建git仓库并clone，</p><p>我的地址为（D:\workspace\STSSpringCloudDemo\mySpringCloud），</p><p>执行命令<code>git clone git@github.com:Yukinoon/microservicecloud-config.git</code>，</p><p>在本地D:\workspace\STSSpringCloudDemo\mySpringCloud\microservicecloud-config里面新建一个appilication.yml，保存格式必须是UTF-8</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <br><span class="hljs-attr"> profiles:</span> <br><span class="hljs-attr">  active:</span> <br><span class="hljs-bullet">  -</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">spring:</span>  <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">dev</span>  <span class="hljs-comment">#开发环境</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-atgui-dev</span><br><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">spring:</span>  <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">test</span>  <span class="hljs-comment">#测试环境</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-atgui-test</span><br>  <br><br><span class="hljs-comment">#请保存为UTF-8格式</span><br></code></pre></td></tr></table></figure><p>提交至GitHub</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git add .<br>git commit -m &quot;init file&quot;<br>git push origin master<br></code></pre></td></tr></table></figure><p>新建工程microservicecloud-config-3344</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- springCloud Config --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-config-3344<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- springCloud Config --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 避免Config的Git插件报错：org/eclipse/jgit/api/TransportConfigCallback --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jgit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>org.eclipse.jgit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.10.0.201712302008-r<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 图形化监控 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 熔断 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 热部署插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>applicaton.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">3344</span> <br>  <br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  application:</span><br><span class="hljs-attr">    name:</span>  <span class="hljs-string">microservicecloud-config</span><br><span class="hljs-attr">  cloud:</span><br><span class="hljs-attr">    config:</span><br><span class="hljs-attr">      server:</span><br><span class="hljs-attr">        git:</span><br>          <span class="hljs-comment">#uri: git@github.com:Yukinoon/microservicecloud-config.git #GitHub上面的git仓库名字</span><br><span class="hljs-attr">          uri:</span> <span class="hljs-attr">https://github.com/Yukinoon/microservicecloud-config.git</span> <span class="hljs-comment">#GitHub上面的git仓库名字</span><br></code></pre></td></tr></table></figure><p>主配置类Config_3344_StartSpringCloudApp，加上@EnableConfigServer</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableConfigServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config_3344_StartSpringCloudApp</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(Config_3344_StartSpringCloudApp.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>windows下修改host文件，增加映射</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">127.0.0.1 config-3344.com<br></code></pre></td></tr></table></figure><p>测试microservicecloud-config-3344是否能从GitHub上获取配置信息</p><p>1.启动微服务3344</p><p><a href="http://config-3344.com:3344/application-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/application-dev.yml</a></p><p><a href="http://config-3344.com:3344/application-test.yml" target="_blank" rel="noopener">http://config-3344.com:3344/application-test.yml</a></p><p><a href="http://config-3344.com:3344/application-xxx.yml" target="_blank" rel="noopener">http://config-3344.com:3344/application-xxx.yml</a>(不存在的配置)</p><p>配置读取规则：<strong>/{application}-{profile}.yml</strong></p><p>Example:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">http://config-3344.com:3344/application-dev.yml<br><br>http://config-3344.com:3344/application-test.ym<br><br>http://config-3344.com:3344/application-xxx.yml(不存在的配置)<br></code></pre></td></tr></table></figure><p><strong>/{application}/{profile}[/{label}]</strong></p><p>Example:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">http://config-3344.com:3344/application/dev/master<br><br>http://config-3344.com:3344/applicaiton/test/master<br><br>http://config-3344.com:3344/application/xxx/master<br></code></pre></td></tr></table></figure><p><strong>/label/{application}-{profile}.yml</strong></p><p>Example:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">http://config-3344.com:3344/master/application-dev.yml<br><br>http://config-3344.com:3344/master/application-test.yml<br><br>http://config-3344.com:3344/master/application-xxx.yml<br></code></pre></td></tr></table></figure><h3 id="SpringCloud-Config客户端配置与测试"><a href="#SpringCloud-Config客户端配置与测试" class="headerlink" title="SpringCloud Config客户端配置与测试"></a>SpringCloud Config客户端配置与测试</h3><p>在D:\workspace\STSSpringCloudDemo\mySpringCloud\microservicecloud-config，新建microservicecloud-config-client.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <br><span class="hljs-attr"> profiles:</span> <br><span class="hljs-attr">  active:</span> <br><span class="hljs-bullet">  -</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr"> port:</span> <span class="hljs-number">8201</span><br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-client</span><br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr"> client:</span> <br><span class="hljs-attr">  service-url:</span> <br><span class="hljs-attr">   defaultZone:</span> <span class="hljs-attr">http://eureka-dev.com:7001/eureka/</span><br><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr"> port:</span> <span class="hljs-number">8202</span><br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">test</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-client</span><br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr"> client:</span> <br><span class="hljs-attr">  service-url:</span> <br><span class="hljs-attr">   defaultZone:</span> <span class="hljs-attr">http://eureka-test.com:7001/eureka/</span><br>  <br><br><span class="hljs-comment">#请保存为UTF-8格式</span><br></code></pre></td></tr></table></figure><p>提交到GitHub上</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ git status<br>$ git add .<br>$ git commit -m &quot;test config&quot;<br>$ git push origin master<br></code></pre></td></tr></table></figure><p>新建工程microservicecloud-config-client-3355</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringCloud Config客户端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-config-client-3355<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringCloud Config客户端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建bootstrap.yml，是系统级的，优先级最高。application.yml是用户级资源配置项</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  cloud:</span><br><span class="hljs-attr">    config:</span><br><span class="hljs-attr">      name:</span> <span class="hljs-string">microservicecloud-config-client</span> <span class="hljs-comment">#需要从github上读取的资源名称，注意没有yml后缀名</span><br><span class="hljs-attr">      profile:</span> <span class="hljs-string">dev</span>   <span class="hljs-comment">#本次访问的配置项</span><br><span class="hljs-attr">      label:</span> <span class="hljs-string">master</span>   <br><span class="hljs-attr">      uri:</span> <span class="hljs-attr">http://config-3344.com:3344</span>  <span class="hljs-comment">#本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-config-client</span><br></code></pre></td></tr></table></figure><p>修改host</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">127.0.0.1 client-config.com<br></code></pre></td></tr></table></figure><p>主启动类：ConfigClient_3355_StartSpringCloudApp</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigClient_3355_StartSpringCloudApp</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(ConfigClient_3355_StartSpringCloudApp.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：ConfigClientRest</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.rest;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigClientRest</span><br></span>&#123;<br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;spring.application.name&#125;"</span>)<br><span class="hljs-keyword">private</span> String applicationName;<br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;eureka.client.service-url.defaultZone&#125;"</span>)<br><span class="hljs-keyword">private</span> String eurekaServers;<br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;server.port&#125;"</span>)<br><span class="hljs-keyword">private</span> String port;<br><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/config"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getConfig</span><span class="hljs-params">()</span><br></span>&#123;<br>String str = <span class="hljs-string">"applicationName: "</span> + applicationName + <span class="hljs-string">"\t eurekaServers:"</span> + eurekaServers + <span class="hljs-string">"\t port: "</span> + port;<br>System.out.println(<span class="hljs-string">"******str: "</span> + str);<br><span class="hljs-keyword">return</span> <span class="hljs-string">"applicationName: "</span> + applicationName + <span class="hljs-string">"\t eurekaServers:"</span> + eurekaServers + <span class="hljs-string">"\t port: "</span> + port;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：启动配置中心microservicecloud-config-3344自测</p><p><a href="http://config-3344.com:3344/microservicecloud-config-client-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/microservicecloud-config-client-dev.yml</a></p><p>启动microservicecloud-config-client-3355准备访问</p><p><a href="http://client-config.com:8201/config" target="_blank" rel="noopener">http://client-config.com:8201/config</a></p><h3 id="Config配置演示与策略切换"><a href="#Config配置演示与策略切换" class="headerlink" title="Config配置演示与策略切换"></a>Config配置演示与策略切换</h3><p>在D:\workspace\STSSpringCloudDemo\mySpringCloud\microservicecloud-config新建microservicecloud-config-eureka-client.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <br><span class="hljs-attr"> profiles:</span> <br><span class="hljs-attr">  active:</span> <br><span class="hljs-bullet">  -</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-eureka-client</span><br>  <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br><span class="hljs-attr">    fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/</span><br>      <br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">test</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-eureka-client</span><br>  <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br><span class="hljs-attr">    fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/</span><br></code></pre></td></tr></table></figure><p>新建microservicecloud-config-dept-client.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <br><span class="hljs-attr"> profiles:</span> <br><span class="hljs-attr">  active:</span> <br><span class="hljs-bullet">  -</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr"> port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-dept-client</span><br><span class="hljs-attr"> datasource:</span><br><span class="hljs-attr">  type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br><span class="hljs-attr">  driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br><span class="hljs-attr">  url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/cloudDB01</span>              <span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">  username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">  password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">  dbcp2:</span> <br><span class="hljs-attr">   min-idle:</span> <span class="hljs-number">5</span>                                           <span class="hljs-comment"># 数据库连接池的最小维持连接数</span><br><span class="hljs-attr">   initial-size:</span> <span class="hljs-number">5</span>                                       <span class="hljs-comment"># 初始化连接数</span><br><span class="hljs-attr">   max-total:</span> <span class="hljs-number">5</span>                                          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">   max-wait-millis:</span> <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 等待连接获取的最大超时时间</span><br><br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">  config-location:</span> <span class="hljs-attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="hljs-comment"># mybatis配置文件所在路径</span><br><span class="hljs-attr">  type-aliases-package:</span> <span class="hljs-string">com.atguigu.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><span class="hljs-attr">  mapper-locations:</span><br><span class="hljs-attr">  - classpath:</span><span class="hljs-string">mybatis/mapper/**/*.xml</span>                       <span class="hljs-comment"># mapper映射文件</span><br><br><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservicecloud-dept8001</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址  </span><br>    <br><span class="hljs-attr">info:</span> <br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microservicecloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr"> port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr"> profiles:</span> <span class="hljs-string">test</span><br><span class="hljs-attr"> application:</span> <br><span class="hljs-attr">  name:</span> <span class="hljs-string">microservicecloud-config-dept-client</span><br><span class="hljs-attr"> datasource:</span><br><span class="hljs-attr">  type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br><span class="hljs-attr">  driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br><span class="hljs-attr">  url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/cloudDB01</span>              <span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">  username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">  password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">  dbcp2:</span> <br><span class="hljs-attr">   min-idle:</span> <span class="hljs-number">5</span>                                           <span class="hljs-comment"># 数据库连接池的最小维持连接数</span><br><span class="hljs-attr">   initial-size:</span> <span class="hljs-number">5</span>                                       <span class="hljs-comment"># 初始化连接数</span><br><span class="hljs-attr">   max-total:</span> <span class="hljs-number">5</span>                                          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">   max-wait-millis:</span> <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 等待连接获取的最大超时时间</span><br><br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">  config-location:</span> <span class="hljs-attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="hljs-comment"># mybatis配置文件所在路径</span><br><span class="hljs-attr">  type-aliases-package:</span> <span class="hljs-string">com.atguigu.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><span class="hljs-attr">  mapper-locations:</span><br><span class="hljs-attr">  - classpath:</span><span class="hljs-string">mybatis/mapper/**/*.xml</span>                       <span class="hljs-comment"># mapper映射文件</span><br><br><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservicecloud-dept8001</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址  </span><br>    <br><span class="hljs-attr">info:</span> <br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microservicecloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br>  <br><br><span class="hljs-comment">#请保存为UTF-8格式</span><br></code></pre></td></tr></table></figure><p>提交到git</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ git status<br>$ git add .<br>$ git commit -m &quot;two new file&quot;<br>$ git push origin master<br></code></pre></td></tr></table></figure><p>新建工程microservicecloud-config-eureka-client-7001</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringCloudConfig配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-config-eureka-client-7001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringCloudConfig配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 热部署插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">  cloud:</span> <br><span class="hljs-attr">    config:</span> <br><span class="hljs-attr">      name:</span> <span class="hljs-string">microservicecloud-config-eureka-client</span>     <span class="hljs-comment">#需要从github上读取的资源名称，注意没有yml后缀名</span><br><span class="hljs-attr">      profile:</span> <span class="hljs-string">dev</span> <br><span class="hljs-attr">      label:</span> <span class="hljs-string">master</span> <br><span class="hljs-attr">      uri:</span> <span class="hljs-attr">http://config-3344.com:3344</span>      <span class="hljs-comment">#SpringCloudConfig获取的服务地址</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-config-eureka-client</span><br></code></pre></td></tr></table></figure><p>主启动类：</p><p>Config_Git_EurekaServerApplication</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-comment">/**<br> * EurekaServer服务器端启动类,接受其它微服务注册进来<br> * <br> * <span class="hljs-doctag">@author</span> zhouyang<br> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config_Git_EurekaServerApplication</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(Config_Git_EurekaServerApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p>先启动microservicecloud-config-3344，再启动microservicecloud-config-eureka-client-7001，保证配置是OK的</p><p><a href="http://eureka7001.com:7001/" target="_blank" rel="noopener">http://eureka7001.com:7001/</a></p><p>新建microservicecloud-config-dept-client-8001</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-config-dept-client-8001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringCloudConfig配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-config-dept-client</span><br></code></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  cloud:</span><br><span class="hljs-attr">    config:</span><br><span class="hljs-attr">      name:</span> <span class="hljs-string">microservicecloud-config-dept-client</span> <span class="hljs-comment">#需要从github上读取的资源名称，注意没有yml后缀名</span><br>      <span class="hljs-comment">#profile配置是什么就取什么配置dev or test</span><br><span class="hljs-attr">      profile:</span> <span class="hljs-string">dev</span><br>      <span class="hljs-comment">#profile: test</span><br><span class="hljs-attr">      label:</span> <span class="hljs-string">master</span><br><span class="hljs-attr">      uri:</span> <span class="hljs-attr">http://config-3344.com:3344</span>  <span class="hljs-comment">#SpringCloudConfig获取的服务地址</span><br></code></pre></td></tr></table></figure><p>mybatis文件夹下的</p><p>mybatis.cfg.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE configuration<br>  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"<br>  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span> /&gt;</span><span class="hljs-comment">&lt;!-- 二级缓存开启 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mybatis/mapper下的mybatis.cfg.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"<br>"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.atguigu.springcloud.dao.DeptDao"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Dept"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Long"</span>&gt;</span><br>select deptno,dname,db_source from dept where deptno=#&#123;deptno&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Dept"</span>&gt;</span><br>select deptno,dname,db_source from dept;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addDept"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Dept"</span>&gt;</span><br>INSERT INTO dept(dname,db_source) VALUES(#&#123;dname&#125;,DATABASE());<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主启动类DeptProvider8001_Config_App.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//本服务启动后会自动注册进eureka服务中</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">//服务发现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider8001_Config_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptProvider8001_Config_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DeptController.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.controller;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.ServiceInstance;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.service.DeptService;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptController</span><br></span>&#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DeptService service;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DiscoveryClient client;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/add"</span>, method = RequestMethod.POST)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(@RequestBody Dept dept)</span><br></span>&#123;<br><span class="hljs-keyword">return</span> service.add(dept);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/get/&#123;id&#125;"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)<br></span>&#123;<br><span class="hljs-keyword">return</span> service.get(id);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/list"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">return</span> service.list();<br>&#125;<br><br><br><span class="hljs-comment">//@Autowired</span><br><span class="hljs-comment">//private DiscoveryClient client;</span><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/discovery"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">discovery</span><span class="hljs-params">()</span><br></span>&#123;<br>List&lt;String&gt; list = client.getServices();<br>System.out.println(<span class="hljs-string">"**********"</span> + list);<br><br>List&lt;ServiceInstance&gt; srvList = client.getInstances(<span class="hljs-string">"MICROSERVICECLOUD-DEPT"</span>);<br><span class="hljs-keyword">for</span> (ServiceInstance element : srvList) &#123;<br>System.out.println(element.getServiceId() + <span class="hljs-string">"\t"</span> + element.getHost() + <span class="hljs-string">"\t"</span> + element.getPort() + <span class="hljs-string">"\t"</span><br>+ element.getUri());<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.client;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>DeptDao.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.dao;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptDao</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addDept</span><span class="hljs-params">(Dept dept)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">findById</span><span class="hljs-params">(Long id)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>DeptService.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptService</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(Long id)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>DeptServiceImpl.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.service.impl;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.dao.DeptDao;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.service.DeptService;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DeptService</span><br></span>&#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DeptDao dao;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span><br></span>&#123;<br><span class="hljs-keyword">return</span> dao.addDept(dept);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(Long id)</span><br></span>&#123;<br><span class="hljs-keyword">return</span> dao.findById(id);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">return</span> dao.findAll();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>启动工程，访问<a href="http://localhost:8001/dept/list" target="_blank" rel="noopener">http://localhost:8001/dept/list</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringCloud学习笔记二</title>
      <link href="/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Ribbon是什么"><a href="#Ribbon是什么" class="headerlink" title="Ribbon是什么"></a>Ribbon是什么</h3><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端    负载均衡的工具。</p><h3 id="Ribbon的初步配置"><a href="#Ribbon的初步配置" class="headerlink" title="Ribbon的初步配置"></a>Ribbon的初步配置</h3><p>修改microservicecloud-consumer-dept-80工程</p><p>修改pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Ribbon相关 --&gt;</span><br><span class="hljs-comment">&lt;!-- Ribbon需要和eureka整合 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改application.yml，追加eureka的服务注册地址</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></code></pre></td></tr></table></figure><p>ConfigBean.java，加上@LoadBalanced注解</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><span class="hljs-comment">//Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端       负载均衡的工具。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>&#125;<br></code></pre></td></tr></table></figure><p>主启动类DeptConsumer80_App.java，添加@EnableEurekaClient</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumer80_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptConsumer80_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改客户端的访问类，DeptController_Consumer.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REST_URL_PREFIX = <span class="hljs-string">"http://MICROSERVICECLOUD-DEPT"</span>;<br></code></pre></td></tr></table></figure><p>先启动三个eureka集群，再启动8001注册进eureka，再启动80</p><p>Ribbon和Eureka整合之后可以直接调用服务而不用再关系地址和端口号</p><h3 id="Ribbon的负载均衡"><a href="#Ribbon的负载均衡" class="headerlink" title="Ribbon的负载均衡"></a>Ribbon的负载均衡</h3><p>新建microservicecloud-provider-dept-8002，microservicecloud-provider-dept-8003工程，并修改主启动类名，和配置文件，新建8002/8003数据库，各自微服务分别连接各自的数据库，脚本如下</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> cloudDB02;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> cloudDB02 <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> UTF8;<br><span class="hljs-keyword">use</span> cloudDB02;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept<br>(<br>deptno <span class="hljs-built_in">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT,<br>dname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>),<br>db_source <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'开发部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'人事部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'财务部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'市场部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'运维部'</span>,<span class="hljs-keyword">DATABASE</span>());<br></code></pre></td></tr></table></figure><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> cloudDB03;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> cloudDB03 <span class="hljs-built_in">CHARACTER</span> <span class="hljs-keyword">SET</span> UTF8;<br><span class="hljs-keyword">use</span> cloudDB03;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept<br>(<br>deptno <span class="hljs-built_in">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT,<br>dname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>),<br>db_source <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'开发部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'人事部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'财务部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'市场部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'运维部'</span>,<span class="hljs-keyword">DATABASE</span>());<br></code></pre></td></tr></table></figure><p>修改各自的yml，端口，数据库必须修改，eureka的instance-id，并对外暴露统一的服务实例名</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8002</span><br>  <br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">  config-location:</span> <span class="hljs-attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="hljs-comment"># mybatis配置文件所在路径</span><br><span class="hljs-attr">  type-aliases-package:</span> <span class="hljs-string">com.atguigu.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><span class="hljs-attr">  mapper-locations:</span><br><span class="hljs-attr">  - classpath:</span><span class="hljs-string">mybatis/mapper/**/*.xml</span>                       <span class="hljs-comment"># mapper映射文件</span><br>    <br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">   application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-dept</span> <br><span class="hljs-attr">   datasource:</span><br><span class="hljs-attr">    type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br><span class="hljs-attr">    driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/cloudDB02</span>              <span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    dbcp2:</span><br><span class="hljs-attr">      min-idle:</span> <span class="hljs-number">5</span>                                           <span class="hljs-comment"># 数据库连接池的最小维持连接数</span><br><span class="hljs-attr">      initial-size:</span> <span class="hljs-number">5</span>                                       <span class="hljs-comment"># 初始化连接数</span><br><span class="hljs-attr">      max-total:</span> <span class="hljs-number">5</span>                                          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">      max-wait-millis:</span> <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 等待连接获取的最大超时时间</span><br><br><br><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservicecloud-dept8002</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址  </span><br>    <br><span class="hljs-attr">info:</span> <br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microservicecloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8003</span><br>  <br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">  config-location:</span> <span class="hljs-attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="hljs-comment"># mybatis配置文件所在路径</span><br><span class="hljs-attr">  type-aliases-package:</span> <span class="hljs-string">com.atguigu.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><span class="hljs-attr">  mapper-locations:</span><br><span class="hljs-attr">  - classpath:</span><span class="hljs-string">mybatis/mapper/**/*.xml</span>                       <span class="hljs-comment"># mapper映射文件</span><br>    <br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">   application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-dept</span> <br><span class="hljs-attr">   datasource:</span><br><span class="hljs-attr">    type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br><span class="hljs-attr">    driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/cloudDB03</span>              <span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    dbcp2:</span><br><span class="hljs-attr">      min-idle:</span> <span class="hljs-number">5</span>                                           <span class="hljs-comment"># 数据库连接池的最小维持连接数</span><br><span class="hljs-attr">      initial-size:</span> <span class="hljs-number">5</span>                                       <span class="hljs-comment"># 初始化连接数</span><br><span class="hljs-attr">      max-total:</span> <span class="hljs-number">5</span>                                          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">      max-wait-millis:</span> <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 等待连接获取的最大超时时间</span><br><br><br><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservicecloud-dept8003</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址  </span><br>    <br><span class="hljs-attr">info:</span> <br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microservicecloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br></code></pre></td></tr></table></figure><p>启动三个微服务并自测通过，最后启动80</p><p><a href="http://localhost:8001/dept/list，http://localhost:8002/dept/list，http://localhost:8003/dept/list" target="_blank" rel="noopener">http://localhost:8001/dept/list，http://localhost:8002/dept/list，http://localhost:8003/dept/list</a></p><p>80客户端访问，观察来自哪个微服务（数据库）</p><p><a href="http://localhost/consumer/dept/list" target="_blank" rel="noopener">http://localhost/consumer/dept/list</a></p><h3 id="Ribbon核心组件IRule"><a href="#Ribbon核心组件IRule" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h3><p>microservicecloud-consumer-dept-80:</p><p>ConfigBean.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">myRule</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();<span class="hljs-comment">//目的:用我们重新选择的随机算法替换掉默认的轮询。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义Ribbon的负载均衡策略"><a href="#自定义Ribbon的负载均衡策略" class="headerlink" title="自定义Ribbon的负载均衡策略"></a>自定义Ribbon的负载均衡策略</h3><p>在启动微服务的时候就能去加载我们的自定义Ribbon配置类从而使配置生效。</p><p>microservicecloud-consumer-dept-80</p><p>DeptConsumer80_App.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在启动该微服务的时候就能去加载我们的自定义Ribbon配置类，从而使配置生效</span><br><span class="hljs-meta">@RibbonClient</span>(name=<span class="hljs-string">"MICROSERVICECLOUD-DEPT"</span>,configuration=MySelfRule.class)<br></code></pre></td></tr></table></figure><p><strong>警告：</strong></p><p><strong>这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下（就是主启动类所在的包）</strong>，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，也就是说我们达不到特殊化定制的目的了。</p><p>新建自定义配置类MySelfRule.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.myrule;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.IRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.RandomRule;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySelfRule</span> </span>&#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">myRule</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();<span class="hljs-comment">//目的:用我们重新选择的随机算法替换掉默认的轮询。</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新需求：自定义负载均衡算法，Github上找到RandomRule.java，复制过来修改算法</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.myrule;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.netflix.client.config.IClientConfig;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.AbstractLoadBalancerRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.ILoadBalancer;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.Server;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomRule_ZY</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractLoadBalancerRule</span><br></span>&#123;<br><br><span class="hljs-comment">// total = 0 // 当total==5以后，我们指针才能往下走，</span><br><span class="hljs-comment">// index = 0 // 当前对外提供服务的服务器地址，</span><br><span class="hljs-comment">// total需要重新置为零，但是已经达到过一个5次，我们的index = 1</span><br><span class="hljs-comment">// 分析：我们5次，但是微服务只有8001 8002 8003 三台，OK？</span><br><span class="hljs-comment">// </span><br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总共被调用的次数，目前要求每台被调用5次</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<span class="hljs-comment">// 当前提供服务的机器号</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">choose</span><span class="hljs-params">(ILoadBalancer lb, Object key)</span><br></span>&#123;<br><span class="hljs-keyword">if</span> (lb == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>Server server = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span> (server == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>List&lt;Server&gt; upList = lb.getReachableServers();<br>List&lt;Server&gt; allList = lb.getAllServers();<br><br><span class="hljs-keyword">int</span> serverCount = allList.size();<br><span class="hljs-keyword">if</span> (serverCount == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">/*<br> * No servers. End regardless of pass, because subsequent passes only get more<br> * restrictive.<br> */</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-comment">//int index = rand.nextInt(serverCount);// java.util.Random().nextInt(3);</span><br><span class="hljs-comment">//server = upList.get(index);</span><br><br><br><span class="hljs-comment">//private int total = 0; // 总共被调用的次数，目前要求每台被调用5次</span><br><span class="hljs-comment">//private int currentIndex = 0;// 当前提供服务的机器号</span><br>            <span class="hljs-keyword">if</span>(total &lt; <span class="hljs-number">5</span>)<br>            &#123;<br>            server = upList.get(currentIndex);<br>            total++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>            total = <span class="hljs-number">0</span>;<br>            currentIndex++;<br>            <span class="hljs-keyword">if</span>(currentIndex &gt;= upList.size())<br>            &#123;<br>              currentIndex = <span class="hljs-number">0</span>;<br>            &#125;<br>            &#125;<br><br><br><span class="hljs-keyword">if</span> (server == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-comment">/*<br> * The only time this should happen is if the server list were somehow trimmed.<br> * This is a transient condition. Retry after yielding.<br> */</span><br>Thread.yield();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (server.isAlive()) &#123;<br><span class="hljs-keyword">return</span> (server);<br>&#125;<br><br><span class="hljs-comment">// Shouldn't actually happen.. but must be transient or a bug.</span><br>server = <span class="hljs-keyword">null</span>;<br>Thread.yield();<br>&#125;<br><br><span class="hljs-keyword">return</span> server;<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">choose</span><span class="hljs-params">(Object key)</span><br></span>&#123;<br><span class="hljs-keyword">return</span> choose(getLoadBalancer(), key);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initWithNiwsConfig</span><span class="hljs-params">(IClientConfig clientConfig)</span><br></span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>原始的算法，RandomRule<br>多线程环境下，用while判断，线程唤醒后还会重新判断一次</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.netflix.loadbalancer;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> com.netflix.client.config.IClientConfig;<br><br><span class="hljs-comment">/**<br> * A loadbalacing strategy that randomly distributes traffic amongst existing<br> * servers.<br> * <br> * <span class="hljs-doctag">@author</span> stonse<br> * <br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomRule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractLoadBalancerRule</span> </span>&#123;<br>    Random rand;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RandomRule</span><span class="hljs-params">()</span> </span>&#123;<br>        rand = <span class="hljs-keyword">new</span> Random();<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * Randomly choose from all living servers<br>     */</span><br>    <span class="hljs-meta">@edu</span>.umd.cs.findbugs.annotations.SuppressWarnings(value = <span class="hljs-string">"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">choose</span><span class="hljs-params">(ILoadBalancer lb, Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lb == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        Server server = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">while</span> (server == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            List&lt;Server&gt; upList = lb.getReachableServers();<br>            List&lt;Server&gt; allList = lb.getAllServers();<br><br>            <span class="hljs-keyword">int</span> serverCount = allList.size();<br>            <span class="hljs-keyword">if</span> (serverCount == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">/*<br>                 * No servers. End regardless of pass, because subsequent passes<br>                 * only get more restrictive.<br>                 */</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">int</span> index = rand.nextInt(serverCount);<span class="hljs-comment">//java.util.Random().nextInt(3);</span><br>            server = upList.get(index);<br><br>            <span class="hljs-keyword">if</span> (server == <span class="hljs-keyword">null</span>) &#123;<br>               <span class="hljs-comment">//线程中断一下</span><br>                Thread.yield();<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (server.isAlive()) &#123;<br>                <span class="hljs-keyword">return</span> (server);<br>            &#125;<br><br>            <span class="hljs-comment">// Shouldn't actually happen.. but must be transient or a bug.</span><br>            server = <span class="hljs-keyword">null</span>;<br>            Thread.yield();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> server;<br><br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Server <span class="hljs-title">choose</span><span class="hljs-params">(Object key)</span> </span>&#123;<br><span class="hljs-keyword">return</span> choose(getLoadBalancer(), key);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initWithNiwsConfig</span><span class="hljs-params">(IClientConfig clientConfig)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Feign负载均衡"><a href="#Feign负载均衡" class="headerlink" title="Feign负载均衡"></a>Feign负载均衡</h3><p>Feign是一个声明式的Web服务客户端，使得编写Web客户端变得非常容易，<strong>只需要创建一个接口，然后在上面添加注解即可。</strong></p><p>编码：</p><p>新建microservicecloud-consumer-dept-feign，将microservicecloud-consumer-dept-80的代码，配置文件复制过来，删除myrule包</p><p>1.修改主启动类名字，DeptConsumer80_Feign_App</p><p>2.修改pom.xml，添加对Feign的支持</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-consumer-dept-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 自己定义的api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- feign相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Ribbon相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.修改microservicecloud-api工程</p><p>添加Feign相关的支持</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><span class="hljs-comment">&lt;!-- 子类里面显示声明才能有明确的继承表现，无意外就是父类的默认版本否则自己定义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前Module我自己叫什么名字 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前Module需要用到的jar包，按自己需求添加，如果父类已经包含了，可以不用写版本号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- feign相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.新建接口DeptClientService.java，并增加注解@FeignClient</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><br><br><span class="hljs-comment">/**<br> * <br> * <span class="hljs-doctag">@Description</span>: 修改microservicecloud-api工程，根据已经有的DeptClientService接口<br> * <span class="hljs-doctag">@author</span> zzyy<br> * <span class="hljs-doctag">@date</span> 2018年4月21日<br> */</span><br><span class="hljs-meta">@FeignClient</span>(value = <span class="hljs-string">"MICROSERVICECLOUD-DEPT"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptClientService</span><br></span>&#123;<br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/get/&#123;id&#125;"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">long</span> id)</span>;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/list"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/add"</span>, method = RequestMethod.POST)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.将microservicecloud-api执行maven-clean，maven-install操作</p><p>6.修改microservicecloud-consumer-dept-feignd额Controller，添加上一步新建的DeptClientService接口</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.controller;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.service.DeptClientService;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptController_Consumer</span><br></span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DeptClientService service;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/consumer/dept/get/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)<br></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.service.get(id);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/consumer/dept/list"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.service.list();<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/consumer/dept/add"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span><br></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.service.add(dept);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>7.修改microservicecloud-consumer-dept-feign主启动类，加上@EnableFeignClients</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.feign.EnableFeignClients;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span>(basePackages= &#123;<span class="hljs-string">"com.atguigu.springcloud"</span>&#125;)<br><span class="hljs-meta">@ComponentScan</span>(<span class="hljs-string">"com.atguigu.springcloud"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptConsumer80_Feign_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptConsumer80_Feign_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hystrix断路器-服务熔断"><a href="#Hystrix断路器-服务熔断" class="headerlink" title="Hystrix断路器-服务熔断"></a>Hystrix断路器-服务熔断</h3><p>​    由于网络或程序自躾 的原因，服务并不能保证百分百可靠可用，如果单个服务出现问题，调用这个服务就出现线程阻塞，此时若有大量的请求涌入，servlet容器的线程资源就会被消耗完毕导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成不可估量的严重后果，这就是常说的服务故障的“雪崩效应”。为了解决这个问题，有人就提出了一种解决问题的思路，断路器模型。就是每一个调用服务的接口处加一个断路器，默认是关闭的，当对服务调用时，不可用的次数达到一个阀值时，断路器就会打开，通过回调方法迅速返回一个值结束调用，避免出现连锁故障，注解为@HystrixCommand</p><p>1.参考microservicecloud-provider-dept-8001，新建microservicecloud-provider-dept-hystrix-8001</p><p>pom.xml，新增，修改内容</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- hystrix --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-provider-dept-hystrix-8001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Dept部门Entity --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- hystrix --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- actuator监控信息完善 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 将微服务provider侧注册进eureka --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.修改application.yml，仅仅修改了instance.instance-id:</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8001</span><br>  <br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">  config-location:</span> <span class="hljs-attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="hljs-comment"># mybatis配置文件所在路径</span><br><span class="hljs-attr">  type-aliases-package:</span> <span class="hljs-string">com.atguigu.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><span class="hljs-attr">  mapper-locations:</span><br><span class="hljs-attr">  - classpath:</span><span class="hljs-string">mybatis/mapper/**/*.xml</span>                       <span class="hljs-comment"># mapper映射文件</span><br>    <br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">   application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-dept</span> <br><span class="hljs-attr">   datasource:</span><br><span class="hljs-attr">    type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br><span class="hljs-attr">    driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/cloudDB01</span>              <span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    dbcp2:</span><br><span class="hljs-attr">      min-idle:</span> <span class="hljs-number">5</span>                                           <span class="hljs-comment"># 数据库连接池的最小维持连接数</span><br><span class="hljs-attr">      initial-size:</span> <span class="hljs-number">5</span>                                       <span class="hljs-comment"># 初始化连接数</span><br><span class="hljs-attr">      max-total:</span> <span class="hljs-number">5</span>                                          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">      max-wait-millis:</span> <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 等待连接获取的最大超时时间</span><br><br><br><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservicecloud-dept8001-hystrix</span>   <span class="hljs-comment">#自定义hystrix相关的服务名称信息</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址  </span><br>    <br><span class="hljs-attr">info:</span> <br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microservicecloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br></code></pre></td></tr></table></figure><p>3.修改DeptController</p><p>@HystrixCommand报异常后如何处理</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.service.DeptService;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptController</span><br></span>&#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DeptService service = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/get/&#123;id&#125;"</span>, method = RequestMethod.GET)<br><span class="hljs-comment">//一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法</span><br><span class="hljs-meta">@HystrixCommand</span>(fallbackMethod = <span class="hljs-string">"processHystrix_Get"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)<br></span>&#123;<br><br>Dept dept = <span class="hljs-keyword">this</span>.service.get(id);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == dept) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"该ID："</span> + id + <span class="hljs-string">"没有没有对应的信息"</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> dept;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">processHystrix_Get</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)<br></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dept().setDeptno(id).setDname(<span class="hljs-string">"该ID："</span> + id + <span class="hljs-string">"没有没有对应的信息,null--@HystrixCommand"</span>)<br>.setDb_source(<span class="hljs-string">"no this database in MySQL"</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改主启动类DeptProvider8001_Hystrix_App.java，添加注解@EnableCircuitBreake</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//本服务启动后会自动注册进eureka服务中</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">//服务发现</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><span class="hljs-comment">//对hystrixR熔断机制的支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider8001_Hystrix_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptProvider8001_Hystrix_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：先启动三个注册中心eureka，再启动microservicecloud-consumer-dept-80，测试地址：<a href="http://localhost/consumer/dept/get/112" target="_blank" rel="noopener">http://localhost/consumer/dept/get/112</a></p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来</p><p>服务端的降级处理，是在客户端实现完成的，与服务端没有关系</p><p>修改microservicecloud-api工程，根据已有的DeptClientService接口新建一个实现了FallbackFactory接口的类</p><p>DeptClientServiceFallbackFactory，千万不要忘记在类上新增@Component注解，大坑！！！</p><p>DeptClientServiceFallbackFactory.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><span class="hljs-keyword">import</span> feign.hystrix.FallbackFactory;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptClientServiceFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FallbackFactory</span>&lt;<span class="hljs-title">DeptClientService</span>&gt; </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> DeptClientService <span class="hljs-title">create</span><span class="hljs-params">(Throwable cause)</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DeptClientService() &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">long</span> id)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dept().setDeptno(id).setDname(<span class="hljs-string">"该ID："</span> + id + <span class="hljs-string">"没有没有对应的信息,Consumer客户端提供的降级信息,此刻服务Provider已经关闭"</span>)<br>.setDb_source(<span class="hljs-string">"no this database in MySQL"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改microservicecloud-api，DeptClientService接口，在注解@FeignClient中添加fallbackFactory属性值</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><br><br><span class="hljs-comment">/**<br> * <br> * <span class="hljs-doctag">@Description</span>: 修改microservicecloud-api工程，根据已经有的DeptClientService接口<br> * <span class="hljs-doctag">@author</span> zzyy<br> * <span class="hljs-doctag">@date</span> 2018年4月21日<br> */</span><br><span class="hljs-comment">//@FeignClient(value = "MICROSERVICECLOUD-DEPT")</span><br><span class="hljs-meta">@FeignClient</span>(value = <span class="hljs-string">"MICROSERVICECLOUD-DEPT"</span>,fallbackFactory=DeptClientServiceFallbackFactory.class)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DeptClientService</span><br></span>&#123;<br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/get/&#123;id&#125;"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">long</span> id)</span>;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/list"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/add"</span>, method = RequestMethod.POST)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>microservicecloud-api执行，clean，install</p><p>microservicecloud-consumer-dept-feign修改appilicatiom.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span> <br><span class="hljs-attr">  hystrix:</span> <br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">80</span><br>  <br><span class="hljs-attr">feign:</span> <br><span class="hljs-attr">  hystrix:</span> <br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></code></pre></td></tr></table></figure><p>测试，启动三个注册中心，启动microservicecloud-provider-dept-8001，启动microservicecloud-consumer-dept-feign，先正常测试，然后故意关闭8001，查看结果。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>与Dubbo的区别：Dubbo的定位始终是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案</p><p>[TOC]</p><h3 id="构建微服务父工程"><a href="#构建微服务父工程" class="headerlink" title="构建微服务父工程"></a>构建微服务父工程</h3><p>父工程：microserviceclod</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 保证每次编译是java8 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.18<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>microservicecloud-api:</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><span class="hljs-comment">&lt;!-- 子类里面显示声明才能有明确的继承表现，无意外就是父类的默认版本否则自己定义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前Module我自己叫什么名字 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前Module需要用到的jar包，按自己需求添加，如果父类已经包含了，可以不用写版本号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解决lombok没用的问题:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">如果你是用eclipse作为开发环境，配置了maven依赖以后，还需要在eclipse/myeclipse中手动安装lombok。<br><br>其实就是加一个jar包，添加2行代码<br><br>1. 将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下<br><br>2. 在eclipse文件夹中，找到打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存： <br><br>-Xbootclasspath/a:lombok.jar<br><br>-javaagent:lombok.jar<br><br>3.重启 eclipse / myeclip<br></code></pre></td></tr></table></figure><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>microservicecloud-provider-dept-8001:</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-provider-dept-8001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Dept部门Entity --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">  config-location:</span> <span class="hljs-attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="hljs-comment"># mybatis配置文件所在路径</span><br><span class="hljs-attr">  type-aliases-package:</span> <span class="hljs-string">com.atguigu.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><span class="hljs-attr">  mapper-locations:</span><br><span class="hljs-attr">  - classpath:</span><span class="hljs-string">mybatis/mapper/**/*.xml</span>                       <span class="hljs-comment"># mapper映射文件</span><br><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">   application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-dept</span> <br><span class="hljs-attr">   datasource:</span><br><span class="hljs-attr">    type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br><span class="hljs-attr">    driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/cloudDB01</span>              <span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    dbcp2:</span><br><span class="hljs-attr">      min-idle:</span> <span class="hljs-number">5</span>                                           <span class="hljs-comment"># 数据库连接池的最小维持连接数</span><br><span class="hljs-attr">      initial-size:</span> <span class="hljs-number">5</span>                                       <span class="hljs-comment"># 初始化连接数</span><br><span class="hljs-attr">      max-total:</span> <span class="hljs-number">5</span>                                          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">      max-wait-millis:</span> <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 等待连接获取的最大超时时间</span><br></code></pre></td></tr></table></figure><p>mybatis.cfg.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE configuration<br>  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"<br>  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span> /&gt;</span><span class="hljs-comment">&lt;!-- 二级缓存开启 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>数据库脚本：</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">use</span> clouddb01;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept<br>(<br>deptno <span class="hljs-built_in">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT,<br>dname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>),<br>db_source <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'开发部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'人事部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'财务部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'市场部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'运维部'</span>,<span class="hljs-keyword">DATABASE</span>());<br></code></pre></td></tr></table></figure><p>DeptMapper.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"<br>"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.atguigu.springcloud.dao.DeptDao"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Dept"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Long"</span>&gt;</span><br>select deptno,dname,db_source from dept where deptno=#&#123;deptno&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Dept"</span>&gt;</span><br>select deptno,dname,db_source from dept;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addDept"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Dept"</span>&gt;</span><br>INSERT INTO dept(dname,db_source) VALUES(#&#123;dname&#125;,DATABASE());<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>报了个错误：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: No constructor found in com.atguigu.springcloud.entities.Dept matching [java.lang.Long, java.lang.String, java.lang.String]<br></code></pre></td></tr></table></figure><p>没有找到om.atguigu.springcloud.entities.Dept的全参数构造方法，放开@AllArgsConstructor注解后错误解决，原理有待探究</p><p><strong>编码顺序为dao(方法名自定义)-&gt;service(方法名建议Rest风格)-&gt;serviceImp-&gt;Controller</strong></p><h3 id="微服务消费者"><a href="#微服务消费者" class="headerlink" title="微服务消费者"></a>微服务消费者</h3><p><strong>microservicecloud-consumer-dept-80：</strong></p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-consumer-dept-80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>部门微服务消费者<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 自己定义的api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ConfigBean.java：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.controller;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptController_Consumer</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REST_URL_PREFIX = <span class="hljs-string">"http://localhost:8001"</span>;<br><br>   <span class="hljs-comment">/**<br> * 使用 使用restTemplate访问restful接口非常的简单粗暴无脑。 (url, requestMap,<br> * ResponseBean.class)这三个参数分别代表 REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。<br> */</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><br><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/consumer/dept/add"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="hljs-string">"/dept/add"</span>, dept, Boolean.class);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/consumer/dept/get/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable Long id)</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="hljs-string">"/dept/get/"</span>+id, Dept.class);<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)<br><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/consumer/dept/list"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="hljs-string">"/dept/list"</span>, List.class);<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h3><p>Eureka是什么：功能类似dubbo的注册中心，比如Zookeeper</p><p>1.在pom.xml中加入Eureka的坐标</p><p>2.在主启动类上加入注解@EnableEurekaServer</p><p>3.编写相关的业务代码</p><p>microservicecloud-eureka-7001</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-eureka-7001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--eureka-server服务端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">7001</span><br>  <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    hostname:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br><span class="hljs-attr">    fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>       <span class="hljs-comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span><br></code></pre></td></tr></table></figure><p>启动类：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">// EurekaServer服务器端启动类,接受其它微服务注册进来</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServer7001_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(EurekaServer7001_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将microservicecloud-provider-dept-8001注册到eureka服务端</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将微服务provider侧注册进eureka --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改microservicecloud-provider-dept-8001的application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://localhost:7001/eureka</span><br></code></pre></td></tr></table></figure><p>主启动类加上@EnableEurekaClient</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//本服务启动后会自动注册进eureka服务中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider8001_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptProvider8001_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="actuator与注册微服务信息完善"><a href="#actuator与注册微服务信息完善" class="headerlink" title="actuator与注册微服务信息完善"></a>actuator与注册微服务信息完善</h3><p>服务名称修改</p><p>microservicecloud-provider-dept-8001：</p><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://localhost:7001/eureka</span><br>  <span class="hljs-comment">#起别名</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservice-dept8001</span><br></code></pre></td></tr></table></figure><p>微服务主机IP显示</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://localhost:7001/eureka</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservicecloud-dept8001</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址</span><br></code></pre></td></tr></table></figure><p>微服务Info内容构建</p><p>microservicecloud-provider-dept-8001</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- actuator监控信息完善 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总的父工程：</p><p>修改pom.xml添加构建build信息</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delimiters</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delimit</span>&gt;</span>$<span class="hljs-tag">&lt;/<span class="hljs-name">delimit</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delimiters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>microservicecloud-provider-dept-8001</p><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">info:</span> <br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microservicecloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br></code></pre></td></tr></table></figure><h3 id="Eureka的自我保护"><a href="#Eureka的自我保护" class="headerlink" title="Eureka的自我保护"></a>Eureka的自我保护</h3><p>一句话：某时刻某一微服务不可用了。eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p><p>可以使用eureka.server.enable-self-preservation = false禁用自我保护模式。</p><h3 id="Eureka服务发现"><a href="#Eureka服务发现" class="headerlink" title="Eureka服务发现"></a>Eureka服务发现</h3><p>微服务提供者：microservicecloud-provider-dept-8001:</p><p>主启动类    :</p><p>@EnableDiscoveryClient //服务发现</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//本服务启动后会自动注册进eureka服务中</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">//服务发现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider8001_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptProvider8001_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DeptController.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DiscoveryClient client;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/discovery"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">discovery</span><span class="hljs-params">()</span><br></span>&#123;<br>List&lt;String&gt; list = client.getServices();<br>System.out.println(<span class="hljs-string">"**********"</span> + list);<br><br>List&lt;ServiceInstance&gt; srvList = client.getInstances(<span class="hljs-string">"MICROSERVICECLOUD-DEPT"</span>);<br><span class="hljs-keyword">for</span> (ServiceInstance element : srvList) &#123;<br>System.out.println(element.getServiceId() + <span class="hljs-string">"\t"</span> + element.getHost() + <span class="hljs-string">"\t"</span> + element.getPort() + <span class="hljs-string">"\t"</span> + element.getUri());<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.client;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者：microservicecloud-consumer-dept-80</p><p>DeptController_Consumer.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试@EnableDiscoveryClient,消费端可以调用服务发现</span><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/consumer/dept/discovery"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">discovery</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="hljs-string">"/dept/discovery"</span>, Object.class);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Eureka的集群配置"><a href="#Eureka的集群配置" class="headerlink" title="Eureka的集群配置"></a>Eureka的集群配置</h3><p>microservicecloud-eureka-7002，microservicecloud-eureka-7003</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--eureka-server服务端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改各自的主启动类</p><p>修改HOST</p><p>127.0.0.1 eureka7001.com<br>127.0.0.1 eureka7002.com<br>127.0.0.1 eureka7003.com</p><p>eureka yml文件的配置</p><p><strong>eureka 注册中心：</strong></p><p>以7001为例</p><p>更改hostname,defaultZone</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">7001</span><br>  <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br><span class="hljs-attr">    fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="hljs-attr">    service-url:</span> <br>     <span class="hljs-comment"># defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></code></pre></td></tr></table></figure><p><strong>微服务提供者</strong></p><p>microservicecloud-provider-dept-8001</p><p>更改defaultZone</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr"> client:</span><br><span class="hljs-attr">   service-url:</span><br>     <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br><span class="hljs-attr">     defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><span class="hljs-attr"> instance:</span><br><span class="hljs-attr">   instance-id:</span> <span class="hljs-string">microservicecloud-dept8001</span><br><span class="hljs-attr">   prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址</span><br></code></pre></td></tr></table></figure><h3 id="Eureka比Zookeeper好在哪"><a href="#Eureka比Zookeeper好在哪" class="headerlink" title="Eureka比Zookeeper好在哪"></a>Eureka比Zookeeper好在哪</h3><p>Eureka满足AP原则（高可用），Zookeeper满足CP原则（高一致性）</p><p><strong>Zookeeper保证CP </strong><br>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p><p><strong>Eureka保证AP </strong><br>Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况： </p><ol><li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务 </li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用) </li><li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li></ol><p>因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringCloud学习笔记.md</title>
      <link href="/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-md/"/>
      <url>/2019/04/16/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-md/</url>
      
        <content type="html"><![CDATA[<p>与Dubbo的区别：Dubbo的定位始终是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案</p><p>[TOC]</p><h3 id="构建微服务父工程"><a href="#构建微服务父工程" class="headerlink" title="构建微服务父工程"></a>构建微服务父工程</h3><p>父工程：microserviceclod</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 保证每次编译是java8 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.18<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>microservicecloud-api:</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><span class="hljs-comment">&lt;!-- 子类里面显示声明才能有明确的继承表现，无意外就是父类的默认版本否则自己定义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前Module我自己叫什么名字 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前Module需要用到的jar包，按自己需求添加，如果父类已经包含了，可以不用写版本号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解决lombok没用的问题:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">如果你是用eclipse作为开发环境，配置了maven依赖以后，还需要在eclipse/myeclipse中手动安装lombok。<br><br>其实就是加一个jar包，添加2行代码<br><br>1. 将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下<br><br>2. 在eclipse文件夹中，找到打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存： <br><br>-Xbootclasspath/a:lombok.jar<br><br>-javaagent:lombok.jar<br><br>3.重启 eclipse / myeclip<br></code></pre></td></tr></table></figure><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>microservicecloud-provider-dept-8001:</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-provider-dept-8001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Dept部门Entity --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">  config-location:</span> <span class="hljs-attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="hljs-comment"># mybatis配置文件所在路径</span><br><span class="hljs-attr">  type-aliases-package:</span> <span class="hljs-string">com.atguigu.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><span class="hljs-attr">  mapper-locations:</span><br><span class="hljs-attr">  - classpath:</span><span class="hljs-string">mybatis/mapper/**/*.xml</span>                       <span class="hljs-comment"># mapper映射文件</span><br><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">   application:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">microservicecloud-dept</span> <br><span class="hljs-attr">   datasource:</span><br><span class="hljs-attr">    type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br><span class="hljs-attr">    driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql://localhost:3306/cloudDB01</span>              <span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">    dbcp2:</span><br><span class="hljs-attr">      min-idle:</span> <span class="hljs-number">5</span>                                           <span class="hljs-comment"># 数据库连接池的最小维持连接数</span><br><span class="hljs-attr">      initial-size:</span> <span class="hljs-number">5</span>                                       <span class="hljs-comment"># 初始化连接数</span><br><span class="hljs-attr">      max-total:</span> <span class="hljs-number">5</span>                                          <span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">      max-wait-millis:</span> <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 等待连接获取的最大超时时间</span><br></code></pre></td></tr></table></figure><p>mybatis.cfg.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE configuration<br>  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"<br>  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span> /&gt;</span><span class="hljs-comment">&lt;!-- 二级缓存开启 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>数据库脚本：</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">use</span> clouddb01;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept<br>(<br>deptno <span class="hljs-built_in">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT,<br>dname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>),<br>db_source <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'开发部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'人事部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'财务部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'市场部'</span>,<span class="hljs-keyword">DATABASE</span>());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> dept(dname,db_source) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'运维部'</span>,<span class="hljs-keyword">DATABASE</span>());<br></code></pre></td></tr></table></figure><p>DeptMapper.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"<br>"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.atguigu.springcloud.dao.DeptDao"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Dept"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Long"</span>&gt;</span><br>select deptno,dname,db_source from dept where deptno=#&#123;deptno&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Dept"</span>&gt;</span><br>select deptno,dname,db_source from dept;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addDept"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Dept"</span>&gt;</span><br>INSERT INTO dept(dname,db_source) VALUES(#&#123;dname&#125;,DATABASE());<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>报了个错误：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: No constructor found in com.atguigu.springcloud.entities.Dept matching [java.lang.Long, java.lang.String, java.lang.String]<br></code></pre></td></tr></table></figure><p>没有找到om.atguigu.springcloud.entities.Dept的全参数构造方法，放开@AllArgsConstructor注解后错误解决，原理有待探究</p><p><strong>编码顺序为dao(方法名自定义)-&gt;service(方法名建议Rest风格)-&gt;serviceImp-&gt;Controller</strong></p><h3 id="微服务消费者"><a href="#微服务消费者" class="headerlink" title="微服务消费者"></a>微服务消费者</h3><p><strong>microservicecloud-consumer-dept-80：</strong></p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-consumer-dept-80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>部门微服务消费者<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 自己定义的api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ConfigBean.java：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.controller;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Dept;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptController_Consumer</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REST_URL_PREFIX = <span class="hljs-string">"http://localhost:8001"</span>;<br><br>   <span class="hljs-comment">/**<br> * 使用 使用restTemplate访问restful接口非常的简单粗暴无脑。 (url, requestMap,<br> * ResponseBean.class)这三个参数分别代表 REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。<br> */</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><br><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/consumer/dept/add"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="hljs-string">"/dept/add"</span>, dept, Boolean.class);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/consumer/dept/get/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">get</span><span class="hljs-params">(@PathVariable Long id)</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="hljs-string">"/dept/get/"</span>+id, Dept.class);<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)<br><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/consumer/dept/list"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="hljs-string">"/dept/list"</span>, List.class);<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h3><p>Eureka是什么：功能类似dubbo的注册中心，比如Zookeeper</p><p>1.在pom.xml中加入Eureka的坐标</p><p>2.在主启动类上加入注解@EnableEurekaServer</p><p>3.编写相关的业务代码</p><p>microservicecloud-eureka-7001</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>microservicecloud-eureka-7001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--eureka-server服务端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">7001</span><br>  <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    hostname:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br><span class="hljs-attr">    fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="hljs-attr">    service-url:</span> <br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>       <span class="hljs-comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span><br></code></pre></td></tr></table></figure><p>启动类：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">// EurekaServer服务器端启动类,接受其它微服务注册进来</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServer7001_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(EurekaServer7001_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将microservicecloud-provider-dept-8001注册到eureka服务端</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将微服务provider侧注册进eureka --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改microservicecloud-provider-dept-8001的application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://localhost:7001/eureka</span><br></code></pre></td></tr></table></figure><p>主启动类加上@EnableEurekaClient</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//本服务启动后会自动注册进eureka服务中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider8001_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptProvider8001_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="actuator与注册微服务信息完善"><a href="#actuator与注册微服务信息完善" class="headerlink" title="actuator与注册微服务信息完善"></a>actuator与注册微服务信息完善</h3><p>服务名称修改</p><p>microservicecloud-provider-dept-8001：</p><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://localhost:7001/eureka</span><br>  <span class="hljs-comment">#起别名</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservice-dept8001</span><br></code></pre></td></tr></table></figure><p>微服务主机IP显示</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">  client:</span><br><span class="hljs-attr">    service-url:</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://localhost:7001/eureka</span><br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    instance-id:</span> <span class="hljs-string">microservicecloud-dept8001</span><br><span class="hljs-attr">    prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址</span><br></code></pre></td></tr></table></figure><p>微服务Info内容构建</p><p>microservicecloud-provider-dept-8001</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- actuator监控信息完善 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总的父工程：</p><p>修改pom.xml添加构建build信息</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>microservicecloud<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delimiters</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delimit</span>&gt;</span>$<span class="hljs-tag">&lt;/<span class="hljs-name">delimit</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delimiters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>microservicecloud-provider-dept-8001</p><p>application.yml</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">info:</span> <br>  <span class="hljs-string">app.name:</span> <span class="hljs-string">atguigu-microservicecloud</span><br>  <span class="hljs-string">company.name:</span> <span class="hljs-string">www.atguigu.com</span><br>  <span class="hljs-string">build.artifactId:</span> <span class="hljs-string">$project.artifactId$</span><br>  <span class="hljs-string">build.version:</span> <span class="hljs-string">$project.version$</span><br></code></pre></td></tr></table></figure><h3 id="Eureka的自我保护"><a href="#Eureka的自我保护" class="headerlink" title="Eureka的自我保护"></a>Eureka的自我保护</h3><p>一句话：某时刻某一微服务不可用了。eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p><p>可以使用eureka.server.enable-self-preservation = false禁用自我保护模式。</p><h3 id="Eureka服务发现"><a href="#Eureka服务发现" class="headerlink" title="Eureka服务发现"></a>Eureka服务发现</h3><p>微服务提供者：microservicecloud-provider-dept-8001:</p><p>主启动类    :</p><p>@EnableDiscoveryClient //服务发现</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//本服务启动后会自动注册进eureka服务中</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">//服务发现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptProvider8001_App</span><br></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><br></span>&#123;<br>SpringApplication.run(DeptProvider8001_App.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DeptController.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DiscoveryClient client;<br><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/dept/discovery"</span>, method = RequestMethod.GET)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">discovery</span><span class="hljs-params">()</span><br></span>&#123;<br>List&lt;String&gt; list = client.getServices();<br>System.out.println(<span class="hljs-string">"**********"</span> + list);<br><br>List&lt;ServiceInstance&gt; srvList = client.getInstances(<span class="hljs-string">"MICROSERVICECLOUD-DEPT"</span>);<br><span class="hljs-keyword">for</span> (ServiceInstance element : srvList) &#123;<br>System.out.println(element.getServiceId() + <span class="hljs-string">"\t"</span> + element.getHost() + <span class="hljs-string">"\t"</span> + element.getPort() + <span class="hljs-string">"\t"</span> + element.getUri());<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.client;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者：microservicecloud-consumer-dept-80</p><p>DeptController_Consumer.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试@EnableDiscoveryClient,消费端可以调用服务发现</span><br><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/consumer/dept/discovery"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">discovery</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="hljs-string">"/dept/discovery"</span>, Object.class);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Eureka的集群配置"><a href="#Eureka的集群配置" class="headerlink" title="Eureka的集群配置"></a>Eureka的集群配置</h3><p>microservicecloud-eureka-7002，microservicecloud-eureka-7003</p><p>pom.xml</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--eureka-server服务端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springloaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改各自的主启动类</p><p>修改HOST</p><p>127.0.0.1 eureka7001.com<br>127.0.0.1 eureka7002.com<br>127.0.0.1 eureka7003.com</p><p>eureka yml文件的配置</p><p><strong>eureka 注册中心：</strong></p><p>以7001为例</p><p>更改hostname,defaultZone</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">  port:</span> <span class="hljs-number">7001</span><br>  <br><span class="hljs-attr">eureka:</span> <br><span class="hljs-attr">  instance:</span><br><span class="hljs-attr">    hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br><span class="hljs-attr">  client:</span> <br><span class="hljs-attr">    register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br><span class="hljs-attr">    fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="hljs-attr">    service-url:</span> <br>     <span class="hljs-comment"># defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span><br><span class="hljs-attr">      defaultZone:</span> <span class="hljs-attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></code></pre></td></tr></table></figure><p><strong>微服务提供者</strong></p><p>microservicecloud-provider-dept-8001</p><p>更改defaultZone</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br><span class="hljs-attr"> client:</span><br><span class="hljs-attr">   service-url:</span><br>     <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br><span class="hljs-attr">     defaultZone:</span> <span class="hljs-attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><span class="hljs-attr"> instance:</span><br><span class="hljs-attr">   instance-id:</span> <span class="hljs-string">microservicecloud-dept8001</span><br><span class="hljs-attr">   prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#访问路径可以显示IP地址</span><br></code></pre></td></tr></table></figure><h3 id="Eureka比Zookeeper好在哪"><a href="#Eureka比Zookeeper好在哪" class="headerlink" title="Eureka比Zookeeper好在哪"></a>Eureka比Zookeeper好在哪</h3><p>Eureka满足AP原则（高可用），Zookeeper满足CP原则（高一致性）</p><p><strong>Zookeeper保证CP </strong><br>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p><p><strong>Eureka保证AP </strong><br>Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况： </p><ol><li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务 </li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用) </li><li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li></ol><p>因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>小知识点</title>
      <link href="/2019/03/08/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/03/08/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>Reflection的getCallerClass的使用：Reflection.getCallerClass()可以得到调用者的类.这个方法是很好用的。</p><p>SecurityManager ：当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SecurityManager security = System.getSecurityManager();<br><span class="hljs-keyword">if</span> (security != <span class="hljs-keyword">null</span>) &#123;<br>    security.checkWrite(name);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringBoot与Web开发</title>
      <link href="/2018/12/25/SpringBoot%E4%B8%8EWeb%E5%BC%80%E5%8F%91/"/>
      <url>/2018/12/25/SpringBoot%E4%B8%8EWeb%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><p>[TOC]</p><p>使用SpringBoot：</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码</strong></p><h2 id="1-起步"><a href="#1-起步" class="headerlink" title="1 起步"></a>1 起步</h2><h3 id="1-1-SpringBoot对静态资源的映射规则"><a href="#1-1-SpringBoot对静态资源的映射规则" class="headerlink" title="1.1 SpringBoot对静态资源的映射规则"></a>1.1 SpringBoot对静态资源的映射规则</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(<br>    prefix = <span class="hljs-string">"spring.resources"</span>,<br>    ignoreUnknownFields = <span class="hljs-keyword">false</span><br>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceProperties</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ResourceLoaderAware</span>, <span class="hljs-title">InitializingBean</span> </span>&#123;<br>    <span class="hljs-comment">//可以设置与静态资源有关的参数，缓存时间等</span><br></code></pre></td></tr></table></figure><a id="more"></a><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) &#123;<br>                logger.debug(<span class="hljs-string">"Default resource handling disabled"</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Integer cachePeriod = <span class="hljs-keyword">this</span>.resourceProperties.getCachePeriod();<br>                <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">"/webjars/**"</span>)) &#123;<br>                    <span class="hljs-keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(cachePeriod));<br>                &#125;<br><br>                String staticPathPattern = <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern();<br>                <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>                    <span class="hljs-keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations()).setCachePeriod(cachePeriod));<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>       <span class="hljs-comment">//配置喜欢的图标</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnProperty</span>(value = <span class="hljs-string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="hljs-keyword">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaviconConfiguration</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResourceProperties resourceProperties;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FaviconConfiguration</span><span class="hljs-params">(ResourceProperties resourceProperties)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.resourceProperties = resourceProperties;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> SimpleUrlHandlerMapping <span class="hljs-title">faviconHandlerMapping</span><span class="hljs-params">()</span> </span>&#123;<br>SimpleUrlHandlerMapping mapping = <span class="hljs-keyword">new</span> SimpleUrlHandlerMapping();<br>mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="hljs-number">1</span>);<br>              <span class="hljs-comment">//所有  **/favicon.ico </span><br>mapping.setUrlMap(Collections.singletonMap(<span class="hljs-string">"**/favicon.ico"</span>,<br>faviconRequestHandler()));<br><span class="hljs-keyword">return</span> mapping;<br>&#125;<br><br><br><span class="hljs-comment">//配置欢迎页映射</span><br> <span class="hljs-meta">@Bean</span><br>        <span class="hljs-keyword">public</span> WebMvcAutoConfiguration.<span class="hljs-function">WelcomePageHandlerMapping <span class="hljs-title">welcomePageHandlerMapping</span><span class="hljs-params">(ResourceProperties resourceProperties)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WebMvcAutoConfiguration.WelcomePageHandlerMapping(resourceProperties.getWelcomePage(), <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern());<br>        &#125;<br></code></pre></td></tr></table></figure><p>1）、所有/webjars/**，都去 classpath:/META-INF/resources/webjars/找资源</p><p>webjars：以jar包的方式引入静态资源；</p><p><a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p><p><img src="/images/pageImg/10.png" alt="路径图"></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）、”/**”访问当前项目的任何资源，（静态资源文件夹）</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&quot;classpath:/META-INF/resources/&quot;, <br>&quot;classpath:/resources/&quot;,<br>&quot;classpath:/static/&quot;, <br>&quot;classpath:/public/&quot;,<br>&quot;/&quot;：当前项目的根路径<br></code></pre></td></tr></table></figure><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p>3）、欢迎页： 静态资源文件夹下的所有index.html页面；被”/**”映射；</p><p>​    localhost:8080/   找index页面</p><p>4）、所有的 **/favicon.ico  都是在静态资源文件下找；</p><p>可以用<strong>spring.resources.staticLocations=classpath:/hello/,classpath:/demo/</strong>来定义静态资源存放的位置</p><h2 id="2-模板引擎"><a href="#2-模板引擎" class="headerlink" title="2 模板引擎"></a>2 模板引擎</h2><h3 id="2-1-引入Thymeleaf"><a href="#2-1-引入Thymeleaf" class="headerlink" title="2.1 引入Thymeleaf"></a>2.1 引入Thymeleaf</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认版本2.1.6 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">thymeleaf.version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span><br><span class="hljs-comment">&lt;!-- thymeleaf2   layout1--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">thymeleaf-layout-dialect.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-Thymeleaf使用"><a href="#2-2-Thymeleaf使用" class="headerlink" title="2.2 Thymeleaf使用"></a>2.2 Thymeleaf使用</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.thymeleaf"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafProperties</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="hljs-string">"UTF-8"</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="hljs-string">"text/html"</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_PREFIX = <span class="hljs-string">"classpath:/templates/"</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SUFFIX = <span class="hljs-string">".html"</span>;<br></code></pre></td></tr></table></figure><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、使用thymeleaf语法；</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>成功！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-语法规则"><a href="#2-3-语法规则" class="headerlink" title="2.3 语法规则"></a>2.3 语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="/images/pageImg/11.png" alt=""></p><p>2）、表达式</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs properties">Simple expressions:（表达式语法）<br>    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；<br>    1）、获取对象的属性、调用方法<br>    2）、使用内置的基本对象：<br>    #ctx : the context object.<br>    #vars: the context variables.<br>                #locale : the context locale.<br>                #request : (only in Web Contexts) the HttpServletRequest object.<br>                #response : (only in Web Contexts) the HttpServletResponse object.<br>                #session : (only in Web Contexts) the HttpSession object.<br>                #servletContext : (only in Web Contexts) the ServletContext object.<br>                <br>                $&#123;session.foo&#125;<br>            3）、内置的一些工具对象：<br>#execInfo : information about the template being processed.<br>#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.<br>#uris : methods for escaping parts of URLs/URIs<br>#conversions : methods for executing the configured conversion service (if any).<br>#dates : methods for java.util.Date objects: formatting, component extraction, etc.<br>#calendars : analogous to #dates , but for java.util.Calendar objects.<br>#numbers : methods for formatting numeric objects.<br>#strings : methods for String objects: contains, startsWith, prepending/appending, etc.<br>#objects : methods for objects in general.<br>#bools : methods for boolean evaluation.<br>#arrays : methods for arrays.<br>#lists : methods for lists.<br>#sets : methods for sets.<br>#maps : methods for maps.<br>#aggregates : methods for creating aggregates on arrays or collections.<br>#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).<br><br>    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；<br>    补充：配合 th:object=&quot;$&#123;session.user&#125;：<br>   &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;<br>    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;<br>    &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;<br>    &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;<br>    &lt;/div&gt;<br>    <br>    Message Expressions: #&#123;...&#125;：获取国际化内容<br>    Link URL Expressions: @&#123;...&#125;：定义URL；<br>    @&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125;<br>    Fragment Expressions: ~&#123;...&#125;：片段引用表达式<br>    &lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;<br>    <br>Literals（字面量）<br>      Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,…<br>      Number literals: 0 , 34 , 3.0 , 12.3 ,…<br>      Boolean literals: true , false<br>      Null literal: null<br>      Literal tokens: one , sometext , main ,…<br>Text operations:（文本操作）<br>    String concatenation: +<br>    Literal substitutions: |The name is $&#123;name&#125;|<br>Arithmetic operations:（数学运算）<br>    Binary operators: + , - , * , / , %<br>    Minus sign (unary operator): -<br>Boolean operations:（布尔运算）<br>    Binary operators: and , or<br>    Boolean negation (unary operator): ! , not<br>Comparisons and equality:（比较运算）<br>    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )<br>    Equality operators: == , != ( eq , ne )<br>Conditional operators:条件运算（三元运算符）<br>    If-then: (if) ? (then)<br>    If-then-else: (if) ? (then) : (else)<br>    Default: (value) ?: (defaultvalue)<br>Special tokens:<br>    No-Operation: _<br></code></pre></td></tr></table></figure><h2 id="3-SpringMVC的配置"><a href="#3-SpringMVC的配置" class="headerlink" title="3 SpringMVC的配置"></a>3 SpringMVC的配置</h2><h3 id="3-1-自动配置"><a href="#3-1-自动配置" class="headerlink" title="3.1 自动配置"></a>3.1 自动配置</h3><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>（WebMvcAutoConfiguration）</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li><strong>如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来</strong></li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnProperty</span>(prefix = <span class="hljs-string">"spring.mvc"</span>, name = <span class="hljs-string">"date-format"</span>)<span class="hljs-comment">//在文件中配置日期格式化的规则</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Formatter&lt;Date&gt; <span class="hljs-title">dateFormatter</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DateFormatter(<span class="hljs-keyword">this</span>.mvcProperties.getDateFormat());<span class="hljs-comment">//日期格式化组件</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自己添加的格式化器转换器，我们只需要放在容器中即可</strong></p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p><p>​</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">初始化WebDataBinder；<br>请求数据=====JavaBean；<br></code></pre></td></tr></table></figure></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="3-2-扩展SpringMVC"><a href="#3-2-扩展SpringMVC" class="headerlink" title="3.2 扩展SpringMVC"></a>3.2 扩展SpringMVC</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/hello"</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">"success"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/hello"</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc</strong></p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>       <span class="hljs-comment">// super.addViewControllers(registry);</span><br>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span><br>        registry.addViewController(<span class="hljs-string">"/demo"</span>).setViewName(<span class="hljs-string">"success"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> </span>&#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WebMvcConfigurerComposite configurers = <span class="hljs-keyword">new</span> WebMvcConfigurerComposite();<br><br> <span class="hljs-comment">//从容器中获取所有的WebMvcConfigurer</span><br>     <span class="hljs-meta">@Autowired</span>(required = <span class="hljs-keyword">false</span>)<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;<br>             <span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);<br>           <span class="hljs-comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span><br>           <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br>             <span class="hljs-comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span><br>              <span class="hljs-comment">//       delegate.addViewControllers(registry);</span><br>              <span class="hljs-comment">//   &#125;</span><br>             &#125;<br>         &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3-3、全面接管SpringMVC；"><a href="#3-3、全面接管SpringMVC；" class="headerlink" title="3.3、全面接管SpringMVC；"></a>3.3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>       <span class="hljs-comment">// super.addViewControllers(registry);</span><br>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span><br>        registry.addViewController(<span class="hljs-string">"/atguigu"</span>).setViewName(<span class="hljs-string">"success"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import</span>(DelegatingWebMvcConfiguration.class)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;<br></code></pre></td></tr></table></figure><p>2）、</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br></code></pre></td></tr></table></figure><p>3）、</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnWebApplication</span><br><span class="hljs-meta">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class,<br>WebMvcConfigurerAdapter.class &#125;)<br><span class="hljs-comment">//容器中没有这个组件的时候，这个自动配置类才生效</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)<br><span class="hljs-meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class="hljs-number">10</span>)<br><span class="hljs-meta">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class,<br>ValidationAutoConfiguration.class &#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfiguration</span> </span>&#123;<br></code></pre></td></tr></table></figure><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h3 id="3-4如何修改SpringBoot的默认配置"><a href="#3-4如何修改SpringBoot的默认配置" class="headerlink" title="3.4如何修改SpringBoot的默认配置"></a>3.4如何修改SpringBoot的默认配置</h3><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="4-RestfulCRUD"><a href="#4-RestfulCRUD" class="headerlink" title="4 RestfulCRUD"></a>4 RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><br><span class="hljs-comment">//@EnableWebMvc   不要接管SpringMVC</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>       <span class="hljs-comment">// super.addViewControllers(registry);</span><br>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span><br>        registry.addViewController(<span class="hljs-string">"/atguigu"</span>).setViewName(<span class="hljs-string">"success"</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将组件注册在容器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> WebMvcConfigurerAdapter <span class="hljs-title">webMvcConfigurerAdapter</span><span class="hljs-params">()</span></span>&#123;<br>        WebMvcConfigurerAdapter adapter = <span class="hljs-keyword">new</span> WebMvcConfigurerAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>                registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"login"</span>);<br>                registry.addViewController(<span class="hljs-string">"/index.html"</span>).setViewName(<span class="hljs-string">"login"</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> adapter;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="/images/pageImg/12.png" alt=""></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.messages"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageSourceAutoConfiguration</span> </span>&#123;<br>    <br>    <span class="hljs-comment">/**<br> * Comma-separated list of basenames (essentially a fully-qualified classpath<br> * location), each following the ResourceBundle convention with relaxed support for<br> * slash based locations. If it doesn't contain a package qualifier (such as<br> * "org.mypackage"), it will be resolved from the classpath root.<br> */</span><br><span class="hljs-keyword">private</span> String basename = <span class="hljs-string">"messages"</span>;  <br>    <span class="hljs-comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span><br>    <br>    <span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MessageSource <span class="hljs-title">messageSource</span><span class="hljs-params">()</span> </span>&#123;<br>ResourceBundleMessageSource messageSource = <span class="hljs-keyword">new</span> ResourceBundleMessageSource();<br><span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-keyword">this</span>.basename)) &#123;<br>            <span class="hljs-comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span><br>messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(<br>StringUtils.trimAllWhitespace(<span class="hljs-keyword">this</span>.basename)));<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.encoding != <span class="hljs-keyword">null</span>) &#123;<br>messageSource.setDefaultEncoding(<span class="hljs-keyword">this</span>.encoding.name());<br>&#125;<br>messageSource.setFallbackToSystemLocale(<span class="hljs-keyword">this</span>.fallbackToSystemLocale);<br>messageSource.setCacheSeconds(<span class="hljs-keyword">this</span>.cacheSeconds);<br>messageSource.setAlwaysUseMessageFormat(<span class="hljs-keyword">this</span>.alwaysUseMessageFormat);<br><span class="hljs-keyword">return</span> messageSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties">spring.messages.basename=i18n.login<br></code></pre></td></tr></table></figure><p>3）、去页面获取国际化的值；</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"author"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Signin Template for Bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Bootstrap core CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"asserts/css/bootstrap.min.css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"asserts/css/signin.css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-signin"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"dashboard.html"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-4"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"asserts/img/bootstrap-solid.svg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"72"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"72"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"h3 mb-3 font-weight-normal"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sr-only"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Username"</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">"#&#123;login.username&#125;"</span> <span class="hljs-attr">required</span>=<span class="hljs-string">""</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">""</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sr-only"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Password"</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">"#&#123;login.password&#125;"</span> <span class="hljs-attr">required</span>=<span class="hljs-string">""</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"checkbox mb-3"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"remember-me"</span>/&gt;</span> [[#&#123;login.remember&#125;]]<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-meta">@ConditionalOnProperty</span>(prefix = <span class="hljs-string">"spring.mvc"</span>, name = <span class="hljs-string">"locale"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.mvcProperties<br>.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FixedLocaleResolver(<span class="hljs-keyword">this</span>.mvcProperties.getLocale());<br>&#125;<br>AcceptHeaderLocaleResolver localeResolver = <span class="hljs-keyword">new</span> AcceptHeaderLocaleResolver();<br>localeResolver.setDefaultLocale(<span class="hljs-keyword">this</span>.mvcProperties.getLocale());<br><span class="hljs-keyword">return</span> localeResolver;<br>&#125;<br>默认的就是根据请求头带来的区域信息获取Locale进行国际化<br></code></pre></td></tr></table></figure><p>4）、点击链接切换国际化</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">MyLocaleResolver.java<br><span class="hljs-comment">/**<br>     * 可以在连接上携带区域信息<br>     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        String l = request.getParameter(<span class="hljs-string">"l"</span>);<br>        Locale locale = Locale.getDefault();<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(l))&#123;<br>            String[] split = l.split(<span class="hljs-string">"_"</span>);<br>            locale = <span class="hljs-keyword">new</span> Locale(split[<span class="hljs-number">0</span>],split[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br>MyMVCConfig.java<br> <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># 禁用缓存<br>spring.thymeleaf.cache=false<br></code></pre></td></tr></table></figure><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;msg&#125;"</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>LoginController.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Logger logger = LoggerFactory.getLogger(LoginController.class);<br>    <span class="hljs-comment">//@RequestMapping(value = "/user/login" , method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/user/login"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"username"</span>)</span> String username,<br>                        @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"password"</span>)</span> String password , Map&lt;String,Object&gt; map)</span>&#123;<br>        logger.info(username+password);<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class="hljs-string">"123456"</span>.equals(password))&#123;<br>            <span class="hljs-comment">//登陆成功，防重复提交</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/main.html"</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"用户名密码错误"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>MyMVCConfig.java</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">WebMvcConfigurerAdapter adapter =  <span class="hljs-keyword">new</span> WebMvcConfigurerAdapter()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>                registry.addViewController(<span class="hljs-string">"/main.html"</span>).setViewName(<span class="hljs-string">"dashboard"</span>);<br>            &#125;<br>        &#125;;<br></code></pre></td></tr></table></figure><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 登陆检查，<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <span class="hljs-comment">//目标方法执行之前</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Object user = request.getSession().getAttribute(<span class="hljs-string">"loginUser"</span>);<br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//未登陆，返回登陆页面</span><br>            request.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"没有权限请先登陆"</span>);<br>            request.getRequestDispatcher(<span class="hljs-string">"/index.html"</span>).forward(request,response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//已登陆，放行请求</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册拦截器</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span><br>  <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将组件注册在容器</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> WebMvcConfigurerAdapter <span class="hljs-title">webMvcConfigurerAdapter</span><span class="hljs-params">()</span></span>&#123;<br>      WebMvcConfigurerAdapter adapter = <span class="hljs-keyword">new</span> WebMvcConfigurerAdapter() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>              registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"login"</span>);<br>              registry.addViewController(<span class="hljs-string">"/index.html"</span>).setViewName(<span class="hljs-string">"login"</span>);<br>              registry.addViewController(<span class="hljs-string">"/main.html"</span>).setViewName(<span class="hljs-string">"dashboard"</span>);<br>          &#125;<br><br>          <span class="hljs-comment">//注册拦截器</span><br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>              <span class="hljs-comment">//super.addInterceptors(registry);</span><br>              <span class="hljs-comment">//静态资源；  *.css , *.js</span><br>              <span class="hljs-comment">//SpringBoot已经做好了静态资源映射</span><br>              registry.addInterceptor(<span class="hljs-keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="hljs-string">"/**"</span>)<br>                      .excludePathPatterns(<span class="hljs-string">"/index.html"</span>,<span class="hljs-string">"/"</span>,<span class="hljs-string">"/user/login"</span>);<br>          &#125;<br>      &#125;;<br>      <span class="hljs-keyword">return</span> adapter;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><p>2）、实验的请求架构;</p><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">1、抽取公共片段<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">"copy"</span>&gt;</span><br>&amp;copy; 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>2、引入公共片段<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>~&#123;templatename::selector&#125;：模板名::选择器<br>~&#123;templatename::fragmentname&#125;:模板名::片段名<br><br>3、默认效果：<br>insert的公共片段在div标签中<br>如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：<br>行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；<br></code></pre></td></tr></table></figure><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">"copy"</span>&gt;</span><br>&amp;copy; 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><br>引入方式<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">"footer :: copy"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">"footer :: copy"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">"footer :: copy"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>效果<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    &amp;copy; 2011 The Good Thymes Virtual Grocery<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>&amp;copy; 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>&amp;copy; 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入片段的时候传入参数： </p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sidebar"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sidebar-sticky"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav flex-column"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-item"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-link active"</span><br>                   <span class="hljs-attr">th:class</span>=<span class="hljs-string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span><br>                   <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/main.html&#125;"</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.w3.org/2000/svg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"24"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"24"</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">"0 0 24 24"</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">"none"</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">"currentColor"</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">stroke-linecap</span>=<span class="hljs-string">"round"</span> <span class="hljs-attr">stroke-linejoin</span>=<span class="hljs-string">"round"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"feather feather-home"</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">polyline</span> <span class="hljs-attr">points</span>=<span class="hljs-string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">polyline</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>                    Dashboard <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sr-only"</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入侧边栏;传入参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>LastName<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"zhangsan"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"zhangsan@atguigu.com"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Gender<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check form-check-inline"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-input"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-label"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check form-check-inline"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-input"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-label"</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Birth<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"zhangsan"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">"@&#123;/emp&#125;"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--发送put请求修改员工数据--&gt;</span><br>    <span class="hljs-comment">&lt;!--<br>1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）<br>2、页面创建一个post表单<br>3、创建一个input项，name="_method";值就是我们指定的请求方式<br>--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"_method"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"put"</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;emp!=null&#125;"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;emp!=null&#125;"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;emp.id&#125;"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>LastName<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lastName"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"zhangsan"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"zhangsan@atguigu.com"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;emp!=null&#125;?$&#123;emp.email&#125;"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Gender<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check form-check-inline"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-input"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-label"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check form-check-inline"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-input"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-label"</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--提交的是部门的id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"department.id"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:selected</span>=<span class="hljs-string">"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;dept.id&#125;"</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">"dept:$&#123;depts&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Birth<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"birth"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"zhangsan"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;emp!=null&#125;?'修改':'添加'"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">"emp:$&#123;emps&#125;"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm btn-primary"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="undefined"><br>    $(".deleteBtn").click(function()&#123;<br>        //删除当前员工的<br>        $("#deleteEmpForm").attr("action",$(this).attr("del_uri")).submit();<br>        return false;<br>    &#125;);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p><p>​        1）、浏览器，返回一个默认的错误页面</p><p><img src="/images/pageImg/13.png" alt=""></p><p>  浏览器发送请求的请求头：</p><p><img src="/images/pageImg/16.png" alt=""></p><p>​        2）、如果是其他客户端，默认响应一个json数据</p><p><img src="/images/pageImg/14.png" alt=""></p><p>​        <img src="/images/pageImg/15.png" alt=""></p><p>原理：</p><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">帮我们在页面共享信息；<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getErrorAttributes</span><span class="hljs-params">(RequestAttributes requestAttributes,<br><span class="hljs-keyword">boolean</span> includeStackTrace)</span> </span>&#123;<br>Map&lt;String, Object&gt; errorAttributes = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;();<br>errorAttributes.put(<span class="hljs-string">"timestamp"</span>, <span class="hljs-keyword">new</span> Date());<br>addStatus(errorAttributes, requestAttributes);<br>addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);<br>addPath(errorAttributes, requestAttributes);<br><span class="hljs-keyword">return</span> errorAttributes;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    2、BasicErrorController：处理默认/error请求</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractErrorController</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@RequestMapping</span>(produces = <span class="hljs-string">"text/html"</span>)<span class="hljs-comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">errorHtml</span><span class="hljs-params">(HttpServletRequest request,<br>HttpServletResponse response)</span> </span>&#123;<br>HttpStatus status = getStatus(request);<br>Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(<br>request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));<br>response.setStatus(status.value());<br>        <br>        <span class="hljs-comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span><br>ModelAndView modelAndView = resolveErrorView(request, response, status, model);<br><span class="hljs-keyword">return</span> (modelAndView == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">"error"</span>, model) : modelAndView);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span><br><span class="hljs-meta">@ResponseBody</span>    <span class="hljs-comment">//产生json数据，其他客户端来到这个方法处理；</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;<br>Map&lt;String, Object&gt; body = getErrorAttributes(request,<br>isIncludeStackTrace(request, MediaType.ALL));<br>HttpStatus status = getStatus(request);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    3、ErrorPageCustomizer：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;error.path:/error&#125;"</span>)<br><span class="hljs-keyword">private</span> String path = <span class="hljs-string">"/error"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）<br></code></pre></td></tr></table></figure><p>​    4、DefaultErrorViewResolver：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpStatus status,<br>Map&lt;String, Object&gt; model)</span> </span>&#123;<br>ModelAndView modelAndView = resolve(String.valueOf(status), model);<br><span class="hljs-keyword">if</span> (modelAndView == <span class="hljs-keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;<br>modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);<br>&#125;<br><span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> ModelAndView <span class="hljs-title">resolve</span><span class="hljs-params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;<br>        <span class="hljs-comment">//默认SpringBoot可以去找到一个页面？  error/404</span><br>String errorViewName = <span class="hljs-string">"error/"</span> + viewName;<br>        <br>        <span class="hljs-comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span><br>TemplateAvailabilityProvider provider = <span class="hljs-keyword">this</span>.templateAvailabilityProviders<br>.getProvider(errorViewName, <span class="hljs-keyword">this</span>.applicationContext);<br><span class="hljs-keyword">if</span> (provider != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ModelAndView(errorViewName, model);<br>&#125;<br>        <span class="hljs-comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span><br><span class="hljs-keyword">return</span> resolveResource(errorViewName, model);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    步骤：</p><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request,<br>      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;<br>    <span class="hljs-comment">//所有的ErrorViewResolver得到ModelAndView</span><br>   <span class="hljs-keyword">for</span> (ErrorViewResolver resolver : <span class="hljs-keyword">this</span>.errorViewResolvers) &#123;<br>      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);<br>      <span class="hljs-keyword">if</span> (modelAndView != <span class="hljs-keyword">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> modelAndView;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p><p>​            页面能获取的信息；</p><p>​                timestamp：时间戳</p><p>​                status：状态码</p><p>​                error：错误提示</p><p>​                exception：异常对象</p><p>​                message：异常消息</p><p>​                errors：JSR303数据校验的错误都在这里</p><p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p><p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p><h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@ExceptionHandler</span>(UserNotExistException.class)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">handleException</span><span class="hljs-params">(Exception e)</span></span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">"code"</span>,<span class="hljs-string">"user.notexist"</span>);<br>        map.put(<span class="hljs-string">"message"</span>,e.getMessage());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//没有自适应效果...</span><br></code></pre></td></tr></table></figure><p>​        2）、转发到/error进行自适应响应效果处理</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler</span>(UserNotExistException.class)<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handleException</span><span class="hljs-params">(Exception e, HttpServletRequest request)</span></span>&#123;<br>       Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>       <span class="hljs-comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span><br>       <span class="hljs-comment">/**<br>        * Integer statusCode = (Integer) request<br>        .getAttribute("javax.servlet.error.status_code");<br>        */</span><br>       request.setAttribute(<span class="hljs-string">"javax.servlet.error.status_code"</span>,<span class="hljs-number">500</span>);<br>       map.put(<span class="hljs-string">"code"</span>,<span class="hljs-string">"user.notexist"</span>);<br>       map.put(<span class="hljs-string">"message"</span>,e.getMessage());<br>       <span class="hljs-comment">//转发到/error</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">"forward:/error"</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//给容器中加入我们自己定义的ErrorAttributes</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyErrorAttributes</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultErrorAttributes</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getErrorAttributes</span><span class="hljs-params">(RequestAttributes requestAttributes, <span class="hljs-keyword">boolean</span> includeStackTrace)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);<br>        map.put(<span class="hljs-string">"company"</span>,<span class="hljs-string">"atguigu"</span>);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><p><img src="/images/pageImg/17.png" alt=""></p><h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><p><img src="/images/pageImg/18.png" alt=""></p><p>问题？</p><h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties">server.port=8081<br>server.context-path=/crud<br><br>server.tomcat.uri-encoding=UTF-8<br><br>//通用的Servlet容器设置<br>server.xxx<br>//Tomcat的设置<br>server.tomcat.xxx<br></code></pre></td></tr></table></figure><p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>  <span class="hljs-comment">//一定要将这个定制器加入到容器中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> EmbeddedServletContainerCustomizer <span class="hljs-title">embeddedServletContainerCustomizer</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> EmbeddedServletContainerCustomizer() &#123;<br><br>        <span class="hljs-comment">//定制嵌入式的Servlet容器相关的规则</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customize</span><span class="hljs-params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;<br>            container.setPort(<span class="hljs-number">8083</span>);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册三大组件</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">myServlet</span><span class="hljs-params">()</span></span>&#123;<br>    ServletRegistrationBean registrationBean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> MyServlet(),<span class="hljs-string">"/myServlet"</span>);<br>    <span class="hljs-keyword">return</span> registrationBean;<br>&#125;<br></code></pre></td></tr></table></figure><p>FilterRegistrationBean</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">myFilter</span><span class="hljs-params">()</span></span>&#123;<br>    FilterRegistrationBean registrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean();<br>    registrationBean.setFilter(<span class="hljs-keyword">new</span> MyFilter());<br>    registrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">"/hello"</span>,<span class="hljs-string">"/myServlet"</span>));<br>    <span class="hljs-keyword">return</span> registrationBean;<br>&#125;<br></code></pre></td></tr></table></figure><p>ServletListenerRegistrationBean</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title">myListener</span><span class="hljs-params">()</span></span>&#123;<br>    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="hljs-keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="hljs-keyword">new</span> MyListener());<br>    <span class="hljs-keyword">return</span> registrationBean;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)<br><span class="hljs-meta">@ConditionalOnBean</span>(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)<br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">dispatcherServletRegistration</span><span class="hljs-params">(<br>      DispatcherServlet dispatcherServlet)</span> </span>&#123;<br>   ServletRegistrationBean registration = <span class="hljs-keyword">new</span> ServletRegistrationBean(<br>         dispatcherServlet, <span class="hljs-keyword">this</span>.serverProperties.getServletMapping());<br>    <span class="hljs-comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span><br>    <span class="hljs-comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span><br>    <br>   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);<br>   registration.setLoadOnStartup(<br>         <span class="hljs-keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.multipartConfig != <span class="hljs-keyword">null</span>) &#123;<br>      registration.setMultipartConfig(<span class="hljs-keyword">this</span>.multipartConfig);<br>   &#125;<br>   <span class="hljs-keyword">return</span> registration;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）、SpringBoot能不能支持其他的Servlet容器；</p><h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src="/images/pageImg/19.png" alt=""></p><p>默认支持：</p><p>Tomcat（默认使用）</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Jetty</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入web模块 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入其他的Servlet容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Undertow</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入web模块 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入其他的Servlet容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnWebApplication</span><br><span class="hljs-meta">@Import</span>(BeanPostProcessorsRegistrar.class)<br><span class="hljs-comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span><br><span class="hljs-comment">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span><br><span class="hljs-comment">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass</span>(&#123; Servlet.class, Tomcat.class &#125;)<span class="hljs-comment">//判断当前是否引入了Tomcat依赖；</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)<span class="hljs-comment">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedTomcat</span> </span>&#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="hljs-title">tomcatEmbeddedServletContainerFactory</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TomcatEmbeddedServletContainerFactory();<br>&#125;<br><br>&#125;<br>    <br>    <span class="hljs-comment">/**<br> * Nested configuration if Jetty is being used.<br> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass</span>(&#123; Servlet.class, Server.class, Loader.class,<br>WebAppContext.class &#125;)<br><span class="hljs-meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedJetty</span> </span>&#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> JettyEmbeddedServletContainerFactory <span class="hljs-title">jettyEmbeddedServletContainerFactory</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JettyEmbeddedServletContainerFactory();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">/**<br> * Nested configuration if Undertow is being used.<br> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass</span>(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)<br><span class="hljs-meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedUndertow</span> </span>&#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="hljs-title">undertowEmbeddedServletContainerFactory</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UndertowEmbeddedServletContainerFactory();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmbeddedServletContainerFactory</span> </span>&#123;<br><br>   <span class="hljs-comment">//获取嵌入式的Servlet容器</span><br>   <span class="hljs-function">EmbeddedServletContainer <span class="hljs-title">getEmbeddedServletContainer</span><span class="hljs-params">(<br>         ServletContextInitializer... initializers)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="G:/SpringBoot2.0/%E6%96%87%E6%A1%A3/Spring%20Boot%20%E7%AC%94%E8%AE%B0/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png" alt=""></p><p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p><p><img src="G:/SpringBoot2.0/%E6%96%87%E6%A1%A3/Spring%20Boot%20%E7%AC%94%E8%AE%B0/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png" alt=""></p><p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> EmbeddedServletContainer <span class="hljs-title">getEmbeddedServletContainer</span><span class="hljs-params">(<br>      ServletContextInitializer... initializers)</span> </span>&#123;<br>    <span class="hljs-comment">//创建一个Tomcat</span><br>   Tomcat tomcat = <span class="hljs-keyword">new</span> Tomcat();<br>    <br>    <span class="hljs-comment">//配置Tomcat的基本环节</span><br>   File baseDir = (<span class="hljs-keyword">this</span>.baseDirectory != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">this</span>.baseDirectory<br>         : createTempDir(<span class="hljs-string">"tomcat"</span>));<br>   tomcat.setBaseDir(baseDir.getAbsolutePath());<br>   Connector connector = <span class="hljs-keyword">new</span> Connector(<span class="hljs-keyword">this</span>.protocol);<br>   tomcat.getService().addConnector(connector);<br>   customizeConnector(connector);<br>   tomcat.setConnector(connector);<br>   tomcat.getHost().setAutoDeploy(<span class="hljs-keyword">false</span>);<br>   configureEngine(tomcat.getEngine());<br>   <span class="hljs-keyword">for</span> (Connector additionalConnector : <span class="hljs-keyword">this</span>.additionalTomcatConnectors) &#123;<br>      tomcat.getService().addConnector(additionalConnector);<br>   &#125;<br>   prepareContext(tomcat.getHost(), initializers);<br>    <br>    <span class="hljs-comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span><br>   <span class="hljs-keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);<br>&#125;<br></code></pre></td></tr></table></figure><p>4）、我们对嵌入式容器的配置修改是怎么生效？</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ServerProperties、EmbeddedServletContainerCustomizer<br></code></pre></td></tr></table></figure><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化之前</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span><br>      <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <span class="hljs-comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span><br>   <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;<br>       <span class="hljs-comment">//</span><br>      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);<br>   &#125;<br>   <span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(<br>ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;<br>    <span class="hljs-comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span><br>    <span class="hljs-keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;<br>        customizer.customize(bean);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="hljs-title">getCustomizers</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.customizers == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// Look up does not include the parent context</span><br>        <span class="hljs-keyword">this</span>.customizers = <span class="hljs-keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(<br>            <span class="hljs-keyword">this</span>.beanFactory<br>            <span class="hljs-comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span><br>            <span class="hljs-comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span><br>            .getBeansOfType(EmbeddedServletContainerCustomizer.class,<br>                            <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>)<br>            .values());<br>        Collections.sort(<span class="hljs-keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);<br>        <span class="hljs-keyword">this</span>.customizers = Collections.unmodifiableList(<span class="hljs-keyword">this</span>.customizers);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.customizers;<br>&#125;<br><br>ServerProperties也是定制器<br></code></pre></td></tr></table></figure><p>步骤：</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringBoot与日志</title>
      <link href="/2018/12/20/SpringBoot%E4%B8%8E%E6%97%A5%E5%BF%97/"/>
      <url>/2018/12/20/SpringBoot%E4%B8%8E%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot与日志"><a href="#SpringBoot与日志" class="headerlink" title="SpringBoot与日志"></a>SpringBoot与日志</h1><p>[TOC]</p><h2 id="1-SLF4j使用"><a href="#1-SLF4j使用" class="headerlink" title="1.SLF4j使用"></a>1.SLF4j使用</h2><h3 id="1-1-如何在系统中使用SLF4j"><a href="#1-1-如何在系统中使用SLF4j" class="headerlink" title="1.1 如何在系统中使用SLF4j"></a>1.1 如何在系统中使用SLF4j</h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层的方法；</p><p>给系统导入slf4j的jar和logback的实现jar</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Logger logger = LoggerFactory.getLogger(HelloWorld.class);<br>    logger.info(<span class="hljs-string">"Hello World"</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2遗留问题"><a href="#1-2遗留问题" class="headerlink" title="1.2遗留问题"></a>1.2遗留问题</h3><p>a(slf4j+logback),Spring(commons-logging),Hibernate(jboss-logging)…</p><p>统一日志记录，即使是别的框架和我一起用slf4j输出？</p><p><img src="/images/pageImg/08.png" alt="统一日志"></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>1、将系统中其他日志框架排除出去；</p><p>2、用中间包来替换原有的日志框架；</p><p>3、再导入slf4j其他的实现；</p><h2 id="2-SpringBoot日志关系"><a href="#2-SpringBoot日志关系" class="headerlink" title="2. SpringBoot日志关系"></a>2. SpringBoot日志关系</h2><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能；</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>依赖关系</strong></p><p><img src="/images/pageImg/09.png" alt="startlog"></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他日志转成了slf4j</p><p>​    3）、中间替换包？</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFactory</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="hljs-string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;<br>    <span class="hljs-keyword">static</span> LogFactory logFactory = <span class="hljs-keyword">new</span> SLF4JLogFactory();<br></code></pre></td></tr></table></figure><p>​    4）、如果我们要引入其他框架。一定要把这个框架的默认日志依赖移除掉</p><p>​        Spring框架使用的是commons-logging；</p><p>SpringBoot排除了commons-logging</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>SpringBoot能自动适配所以的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉</strong></p><h2 id="3-日志使用"><a href="#3-日志使用" class="headerlink" title="3.日志使用"></a>3.日志使用</h2><h3 id="3-1-默认配置"><a href="#3-1-默认配置" class="headerlink" title="3.1 默认配置"></a>3.1 默认配置</h3><p>SpringBoot默认帮我们配置好了日志</p><p>java代码：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Logger logger = LoggerFactory.getLogger(getClass());<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br><br><span class="hljs-comment">//日志的级别，由低到高</span><br>logger.trace(<span class="hljs-string">"这是trace日志"</span>);<br>logger.debug(<span class="hljs-string">"这是debug日志"</span>);<br><span class="hljs-comment">//SpringBoot默认给我们使用info级别,没有指定基本就用SpringBoot默认级别；root级别</span><br>logger.info(<span class="hljs-string">"这是info日志"</span>);<br>logger.warn(<span class="hljs-string">"这是warn日志"</span>);<br>logger.error(<span class="hljs-string">"这是error日志"</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>propertices的配置</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties">logging.level.com.example=trace<br><br>#不指定路径在当前项目下生成springboot.log日志<br>#可指定完整路径<br>logging.file=G:/springboot.log<br>#在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用spring.log作为默认文件<br>logging.path=/spring/log<br><br>#在控制台输出日志的格式<br>logging.pattern.console=<br>#在文件输出日志的格式<br>logging.pattern.file=<br></code></pre></td></tr></table></figure><p>配置文件官方说明：<a href="https://docs.spring.io/spring-boot/docs/1.5.18.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="noopener">日志配置</a></p><h3 id="3-2指定配置"><a href="#3-2指定配置" class="headerlink" title="3.2指定配置"></a>3.2指定配置</h3><p>给类路径下放上每个日志框架的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p>logback.xml：直接被日志框架识别了</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能，否则就会报错</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"staging"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dev, staging"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"!production"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-切换日志框架"><a href="#4-切换日志框架" class="headerlink" title="4.切换日志框架"></a>4.切换日志框架</h2><p>slf4j+log4j的方式</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>切换到log4j2</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringBoot配置文件</title>
      <link href="/2018/12/16/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2018/12/16/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="4-SpringBoot的配置"><a href="#4-SpringBoot的配置" class="headerlink" title="4 SpringBoot的配置"></a>4 SpringBoot的配置</h2><h3 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1.配置文件"></a>4.1.配置文件</h3><p>Springboot使用一个全局配置文件，配置文件名字是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用：修改SpringBoot自动配置的默认值；</p><h3 id="4-2-yml语法"><a href="#4-2-yml语法" class="headerlink" title="4.2 yml语法"></a>4.2 yml语法</h3><p><strong>基本语法</strong></p><p>k:(空格)v    表示一对键值对（空格必须有）；</p><p>​    以空格缩进来控制层级关系；只要是左对齐的一列数据都是同一层级的</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sercer:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">/hello</span><br></code></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><p><strong>值的写法</strong></p><p><strong>字面量：普通的值（数字，字符串，布尔</strong></p><p>​    k: v    字面量直接来写，默认不用加单引号或者双引号；</p><p>​    “”：双引号；不会转义字符串里的特殊字符；特殊字符作为本身想表示的意思</p><p>​        name: “张三 \n lisi”    输出为：zhangsan 换行 lisi</p><p>​    ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串</p><p>​        name: ‘张三 \n lisi’    输出为：zhangsan \n lisi</p><p><strong>对象（属性和值）（键值对）</strong></p><p>​    k: v     在下一行写来写对象属性和值的关系</p><p>​        对象还是k: v的方式</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">friends:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">zhangsan</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>行内写法：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">friends:</span> <span class="hljs-string">&#123;name:</span> <span class="hljs-string">zhangsan,age:</span> <span class="hljs-number">20</span><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><a id="more"></a><p>数组（List、Set:）**</p><p>用- 值表示数组中的一个元素</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span><br><span class="hljs-bullet"> -</span> <span class="hljs-string">cat</span><br><span class="hljs-bullet"> -</span> <span class="hljs-string">dag</span><br><span class="hljs-bullet"> -</span> <span class="hljs-string">pig</span><br></code></pre></td></tr></table></figure><p>行内写法</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> <span class="hljs-string">[cat,dog,pig]</span><br></code></pre></td></tr></table></figure><h3 id="4-3配置文件值注入"><a href="#4-3配置文件值注入" class="headerlink" title="4.3配置文件值注入"></a>4.3配置文件值注入</h3><p>配置文件</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br><span class="hljs-attr">  lastName:</span> <span class="hljs-string">zhangsan</span><br><span class="hljs-attr">  age:</span> <span class="hljs-number">18</span><br><span class="hljs-attr">  boss:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  birth:</span> <span class="hljs-number">2018</span><span class="hljs-string">/12/16</span><br><span class="hljs-attr">  maps:</span> <span class="hljs-string">&#123;k1:</span> <span class="hljs-string">v1,k2:</span> <span class="hljs-number">12</span><span class="hljs-string">&#125;</span><br><span class="hljs-attr">  lists:</span> <span class="hljs-string">[lisi,zhaoliu]</span><br><span class="hljs-attr">  dog:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">小狗</span><br><span class="hljs-attr">    age:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>javaBean:</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 将配置文件中配置的每一个属性的值，映射到这个组中<br> * <span class="hljs-doctag">@ConfigurationProperties</span>：告诉Springboot将本类所有属性和配置文件中的相关配置进行绑定<br> * prefix = "person"：配置文件中哪个下面的所有属性进行一一映射<br> * 只有这个组件是容器中的组件，才能使用<span class="hljs-doctag">@ConfigurationProperties</span>功能<br> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置文件就有提示了</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>properties配置文件的编码问题</strong></p><p><img src="/images/pageImg/03.png" alt="idea设置"></p><h3 id="4-4-Value获取值与-ConfigurationProperties获取值的比较"><a href="#4-4-Value获取值与-ConfigurationProperties获取值的比较" class="headerlink" title="4.4 @Value获取值与@ConfigurationProperties获取值的比较"></a>4.4 @Value获取值与@ConfigurationProperties获取值的比较</h3><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>JSR303数据校验：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Email</span><br>    <span class="hljs-comment">//意思必须是邮箱格式</span><br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Integer age;<br></code></pre></td></tr></table></figure><p>如果说，只需要获取配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h3 id="4-5-PropertySource和-ImportResource"><a href="#4-5-PropertySource和-ImportResource" class="headerlink" title="4.5 @PropertySource和@ImportResource"></a>4.5 @PropertySource和@ImportResource</h3><p><strong>@PropertySource：</strong>加载指定的配置文件</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 将配置文件中配置的每一个属性的值，映射到这个组中<br> * <span class="hljs-doctag">@ConfigurationProperties</span>：告诉Springboot将本类所有属性和配置文件中的相关配置进行绑定(默认从全局配置文件获取值)<br> * prefix = "person"：配置文件中哪个下面的所有属性进行一一映射<br> * 只有这个组件是容器中的组件，才能使用<span class="hljs-doctag">@ConfigurationProperties</span>功能<br> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<br><span class="hljs-meta">@Validated</span><br><span class="hljs-meta">@PropertySource</span>(value = &#123;<span class="hljs-string">"classpath:person.properties"</span>&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br><br><span class="hljs-comment">//    @Email</span><br>    <span class="hljs-comment">//意思必须是邮箱格式</span><br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><p>person.properties：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">person.last-name=李四<br>person.age=18<br>person.boss=false<br>person.birth=2017/12/17<br>person.maps.k1=v1<br>person.maps.k2=v2<br>person.lists=a,b,c<br>person.dog.name=dog<br>person.dog.age=4<br></code></pre></td></tr></table></figure><p><strong>@ImportResource：</strong>导入Spring的配置文件，让配置文件里的内容生效；</p><p>SpringBoot里没有我们自己编写的配置文件，不能自动识别，想让自己编写的Spring配置文件生效；要把@ImportResource标注在一个配置类上</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource</span>(locations = &#123;<span class="hljs-string">"classpath:beans.xml"</span>&#125;)<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootConfigApplication</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(SpringBootConfigApplication.class, args);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span><br>       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"helloService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.yukino.config.service.HelloService"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringBoot推荐给容器中添加组件的方式；推荐全注解的方式</p><p>1.配置类===Spring配置文件</p><p>2.@Bean给容器中添加组件</p><p>配置类：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.yukino.config.service.HelloService;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@Configuration</span>：指明当前类是一个配置类，用来代替之前的Spring配置文件<br> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAppConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//将方法的返回值添加到容器中，默认id是这个方法名</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloService <span class="hljs-title">helloService</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"添加了helloService组件-16"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HelloService();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>ApplicationContext ioc;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHello</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">boolean</span> b  = ioc.containsBean(<span class="hljs-string">"helloService"</span>);<br>System.out.println(b);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-配置文件的随机数和占位符"><a href="#4-6-配置文件的随机数和占位符" class="headerlink" title="4.6 配置文件的随机数和占位符"></a>4.6 配置文件的随机数和占位符</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties">person.last-name=张三$&#123;random.uuid&#125;<br>person.age=$&#123;random.int&#125;<br>person.boss=false<br>person.birth=2017/12/17<br>person.maps.k1=v1<br>person.maps.k2=v2<br>person.lists=a,b,c<br>person.dog.name=$&#123;person.last-name&#125;_dog<br>person.dog.age=$&#123;person.hello:1&#125;4<br></code></pre></td></tr></table></figure><p>占位符获取之前配置的值，如果没有，可以用:指定默认值</p><h3 id="4-7-配置-Profile多环境支持"><a href="#4-7-配置-Profile多环境支持" class="headerlink" title="4.7 配置-Profile多环境支持"></a>4.7 配置-Profile多环境支持</h3><p>我们编写主配置文件时，文件名可以是application-${profile}.propertice/yml    </p><p>默认使用application.properties</p><p><strong>激活指定profile</strong></p><p>​    1.在配置文件中指定：spring.profiles.active=dev</p><p>​    2.命令行：</p><p>​        –spring.profiles.active=dev</p><p>​    或者：java -jar xxx.jar –spring.profiles.active=dev</p><p><img src="/images/pageImg/04.png" alt="命令行"></p><p>3.虚拟机参数</p><p>-Dspring.profiles.active=prod</p><p><img src="/images/pageImg/05.png" alt="命令行"></p><p><strong>yml支持多文档块方式</strong></p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  profiles:</span><br><span class="hljs-attr">    active:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">  profiles:</span> <span class="hljs-string">prod</span><br></code></pre></td></tr></table></figure><h3 id="4-8-配置文件的加载位置"><a href="#4-8-配置文件的加载位置" class="headerlink" title="4.8 配置文件的加载位置"></a>4.8 配置文件的加载位置</h3><p>优先级从高到低，高优先级的配置会覆盖低优先级的配置；</p><p>springBoot会从这四个位置加载配置文件；互补配置</p><p>- file:./config/</p><p>- file:./</p><p>- classpath:/config/</p><p>- classpath:/</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties">server.servlet.context-path=/boot02 #配置项目名<br>spring.config.location=G:/application.properties #定义配置文件位置<br></code></pre></td></tr></table></figure><p>项目打包好后，可以用命令行参数的形式，启动项目的时候来指定配置文件的新位置：</p><p><strong>java -jar xxx.jar –spring.config.location=G:/application.properties</strong></p><p><strong>外部配置的加载顺序</strong></p><p><img src="/images/pageImg/06.png" alt="顺序"></p><p>由jar包外向jar包内进行寻找，优先加载带profile的，再来加载不带profile的</p><p>具体参考官方文档：<a href="https://docs.spring.io/spring-boot/docs/1.5.19.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">配置官方文档</a></p><h3 id="4-9-自动配置原理"><a href="#4-9-自动配置原理" class="headerlink" title="4.9 自动配置原理"></a>4.9 自动配置原理</h3><p>能配置哪些属性：<a href="https://docs.spring.io/spring-boot/docs/1.5.18.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">官方文档</a></p><p>自动配置原理：</p><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能<strong>@EnableAutoConfiguration</strong><br>2）、@EnableAutoConfiguration的作用：</p><ul><li><p>利用EnableAutoConfigurationImportSelector给容器导入一些组件</p></li><li><p>可以查看selectImports()的内容</p></li><li><p>List<string> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);//获取候选的配置</string></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringFactoriesLoader.loadFactoryNames();<br>扫描所以jar包类路径下的META-INF/spring.factories<br>扫描到的这些内容包装成Properties对象，<br>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中<br></code></pre></td></tr></table></figure><p>将类路径下    META-INF/spring.factories里面配置的所有EnableAutoConfiguration的值加到了容器中；</p><p>以下所有配置文件都在spring-boot-autoconfigure-1.5.18.RELEASE.jar内</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\<br>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\<br>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\<br>org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\<br>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\<br>...<br></code></pre></td></tr></table></figure></li></ul><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//表示这是一个配置类，和以前的配置文件一样，也可以给容器中添加组件</span><br><span class="hljs-meta">@EnableConfigurationProperties</span>(&#123;HttpEncodingProperties.class&#125;) <br><span class="hljs-comment">//启用指定类ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来，并把HttpEncodingProperties.class加入到ioc容器中</span><br><br><span class="hljs-meta">@ConditionalOnWebApplication</span> <span class="hljs-comment">//Spring底层@Conditional注解，根据不同的条件，如果满足知道条件，整个配置类里面的配置才会生效；判断当前应用是否是web应用</span><br><br><span class="hljs-meta">@ConditionalOnClass</span>(&#123;CharacterEncodingFilter.class&#125;) <span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中解决乱码的过滤器；</span><br><br><span class="hljs-meta">@ConditionalOnProperty</span>(<br>    prefix = <span class="hljs-string">"spring.http.encoding"</span>,<br>    value = &#123;<span class="hljs-string">"enabled；"</span>&#125;,<br>    matchIfMissing = <span class="hljs-keyword">true</span><br>)<br><span class="hljs-comment">//判断配置文件中是否存在某个配置spring.http.encoding.enabled；matchIfMissing = true如果不存在，判断也是成立的，即使我们不配置spring.http.encoding.enabled=true，也是默认生效的</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span> </span>&#123;<br>   <br>    <span class="hljs-comment">//他已经和springBoot的配置文件映射了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HttpEncodingProperties properties;<br><br>    <span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span><span class="hljs-params">(HttpEncodingProperties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值从propertices中获取</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter.class&#125;) <span class="hljs-comment">//判断容器中没有这个组件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title">characterEncodingFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        CharacterEncodingFilter filter = <span class="hljs-keyword">new</span> OrderedCharacterEncodingFilter();<br>        filter.setEncoding(<span class="hljs-keyword">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(Type.REQUEST));<br>        filter.setForceResponseEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(Type.RESPONSE));<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br></code></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效</p><p>一旦这个配置类生效；这个配置类会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的。</p><p>5）、所有配置文件中能配置的属性都是在xxxPropertices类中封装着；配置文件能配置什么功能就可以参照着某个功能对应的属性类</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.http.encoding"</span>) <span class="hljs-comment">//从配置文件中获取指定的值和bean的属性进行绑定</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingProperties</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="hljs-string">"UTF-8"</span>);<br></code></pre></td></tr></table></figure><p>精髓：</p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类；</strong></p><p>​    <strong>2）、看我们的需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，就不用再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们可以在配置文件中指定这些属性的值；</strong></p><p>​        </p><p>xxxAutoConfiguration：自动配置类；</p><p>给容器中添加组件</p><p>xxxProperties：封装配置文件中相关属性；</p><h4 id="4-9-1-细节"><a href="#4-9-1-细节" class="headerlink" title="4.9.1 细节"></a>4.9.1 细节</h4><p><strong>1、@Conditional派生注解</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置里的所有内容才会生效</p><p><img src="/images/pageImg/07.png" alt="派生注解"></p><p>我们怎么知道哪些自动配置类生效了，我们可以启动debug=true属性，来让控制台打印自动配置报告</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">=========================<br>AUTO-CONFIGURATION REPORT<br>=========================<br><br><br>Positive matches:(启用的)<br>-----------------<br><br>   DispatcherServletAutoConfiguration matched:<br>      - <span class="hljs-meta">@ConditionalOnClass</span> found required <span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">DispatcherServlet</span>'</span>; <span class="hljs-meta">@ConditionalOnMissingClass</span> <span class="hljs-function">did not find unwanted <span class="hljs-title">class</span> <span class="hljs-params">(OnClassCondition)</span><br>      - @<span class="hljs-title">ConditionalOnWebApplication</span> <span class="hljs-params">(required)</span> found 'session' <span class="hljs-title">scope</span> <span class="hljs-params">(OnWebApplicationCondition)</span><br><br>...<br><br>Negative matches:<span class="hljs-params">(未启用的)</span><br>-----------------<br><br>   ActiveMQAutoConfiguration:<br>      Did not match:<br>         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="hljs-params">(OnClassCondition)</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SpringBoot学习</title>
      <link href="/2018/12/12/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/12/12/SpringBoot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot学习笔记"><a href="#SpringBoot学习笔记" class="headerlink" title="SpringBoot学习笔记"></a>SpringBoot学习笔记</h1><p>[TOC]</p><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1 配置"></a>1 配置</h2><h3 id="1-1-配置maven"><a href="#1-1-配置maven" class="headerlink" title="1.1 配置maven"></a>1.1 配置maven</h3><ul><li><p>给maven的setting.xml加上以下</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-SpringBoot-HelloWorld"><a href="#2-SpringBoot-HelloWorld" class="headerlink" title="2 SpringBoot HelloWorld"></a>2 SpringBoot HelloWorld</h2><h3 id="2-1-创建maven工程；（jar）"><a href="#2-1-创建maven工程；（jar）" class="headerlink" title="2.1 创建maven工程；（jar）"></a>2.1 创建maven工程；（jar）</h3><h3 id="2-2-导入SpringBoot相关依赖"><a href="#2-2-导入SpringBoot相关依赖" class="headerlink" title="2.2 导入SpringBoot相关依赖"></a>2.2 导入SpringBoot相关依赖</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-编写一个主程序"><a href="#2-3-编写一个主程序" class="headerlink" title="2.3 编写一个主程序"></a>2.3 编写一个主程序</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**<br> *  <span class="hljs-doctag">@SpringBootApplication</span> 来标注一个主程序类，来说明这是一个SpringBoot应用<br> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//启动应用</span><br>        SpringApplication.run(HelloWorldMainApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="2-4-编写相关的Controller，Service"><a href="#2-4-编写相关的Controller，Service" class="headerlink" title="2.4 编写相关的Controller，Service"></a>2.4 编写相关的Controller，Service</h3>  <figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello World"</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-启动和访问"><a href="#2-5-启动和访问" class="headerlink" title="2.5 启动和访问"></a>2.5 启动和访问</h3><p>  <img src="/images/pageImg/01.png" alt="访问"></p><h3 id="2-6-简化部署"><a href="#2-6-简化部署" class="headerlink" title="2.6 简化部署"></a>2.6 简化部署</h3><p>  pom.xml增加插件</p>  <figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这个插件可以将应用打成一个可执行的jar包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  <img src="/images/pageImg/02.png" alt="访问"></p><p>  然后执行：</p><p>  java -jar SpringBoot01-1.0-SNAPSHOT.jar</p><h2 id="3-HelloWorld-研究"><a href="#3-HelloWorld-研究" class="headerlink" title="3 HelloWorld 研究"></a>3 HelloWorld 研究</h2><h3 id="3-1-pom文件"><a href="#3-1-pom文件" class="headerlink" title="3.1 pom文件"></a>3.1 pom文件</h3><p><strong>父项目</strong></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>他的父项目：SpringBoot的版本仲裁中心<br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>导入的启动器</strong></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong><em>-web</em></p><p>spring-boot-starter：SpringBoot场景启动器（WEB项目正常运行的依赖），starters，SpringBoot根据各个场景做成的各种启动器</p><h3 id="3-2-主程序类，主入口类"><a href="#3-2-主程序类，主入口类" class="headerlink" title="3.2 主程序类，主入口类"></a>3.2 主程序类，主入口类</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**<br> *  <span class="hljs-doctag">@SpringBootApplication</span> 来标注一个主程序类，来说明这是一个SpringBoot应用<br> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//启动应用</span><br>        SpringApplication.run(HelloWorldMainApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@SpringBootApplication</strong>：表明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target</span>(&#123;ElementType.TYPE&#125;)<br><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan</span>(<br>    excludeFilters = &#123;<span class="hljs-meta">@Filter</span>(<br>    type = FilterType.CUSTOM,<br>    classes = &#123;TypeExcludeFilter.class&#125;<br>), <span class="hljs-meta">@Filter</span>(<br>    type = FilterType.CUSTOM,<br>    classes = &#123;AutoConfigurationExcludeFilter.class&#125;<br>)&#125;<br>)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br></code></pre></td></tr></table></figure><p>@SpringBootConfiguration：SpringBoot的配置类；</p><p>​    标注在某个类上，表示该类是SpringBoot的配置类</p><p>​    @Configuration：配置类上标注这个注解</p><p>​        配置类—-配置文件；配置类也是容器中的一个组件@Component</p><p>@EnableAutoConfiguration：开启自动配置功能；</p><p>​    告诉SpringBoot开启自动配置功能，这样自动配置才能生效</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector.class&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br></code></pre></td></tr></table></figure><p><strong>@AutoConfigurationPackage</strong>：自动配置包    </p><p>​    @Import({AutoConfigurationPackages.Registrar.class})：</p><p>​    Spring的底层注解@Import，给容器导入一个组件；由AutoConfigurationPackages.Registrar.class指定</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">将主配置类（@SpringBootApplication标注的类）所在的包及下面所有的子包里面的所有组件扫描到Spring容器中。<br></code></pre></td></tr></table></figure><p><strong>@Import({EnableAutoConfigurationImportSelector.class})</strong></p><p>EnableAutoConfigurationImportSelector：导入哪些组件的选择器；</p><p>​    将所有要导入的组件以全类名的方式返回；这些组件就会添加到容器中</p><p>​    会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给这个容器导入这个场景所需要的所有组件，并配置好这些组件。有了自动配置类，免去了我们手动编写配置注入组件等工作；</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader)<br></code></pre></td></tr></table></figure><p>从类路径下META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就会生效，帮我们做自动配置工作；</p><p>J2EE的整体解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2018/12/11/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/12/11/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h5 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h5><p>​    类似于html中的<code>&lt;h1</code>到<code>&lt;h6&gt;</code>标签，要想把一段文字定义为标题，只需在前面加上若干的#号即可。</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># h1</span><br><br><span class="hljs-section">## h2</span><br><br><span class="hljs-section">### h3</span><br></code></pre></td></tr></table></figure><h5 id="2-区块"><a href="#2-区块" class="headerlink" title="2.区块"></a>2.区块</h5><blockquote><p>区块</p><blockquote><p>区块2</p></blockquote></blockquote><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块</span><br><span class="hljs-quote">&gt; 区块2</span><br></code></pre></td></tr></table></figure><a id="more"></a><h5 id="3-修饰与强调"><a href="#3-修饰与强调" class="headerlink" title="3.修饰与强调"></a>3.修饰与强调</h5><p><em>倾斜</em>     Some of these words <em>are emphasized</em>.<br>_倾斜_    Some of these words <em>are emphasized also</em>.<br><strong>加粗</strong>    Use two asterisks for <strong>strong emphasis</strong>.<br><strong>加粗</strong>    Or, if you prefer, <strong>use two underscores instead</strong>.    </p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Some of these words <span class="hljs-emphasis">*are emphasized*</span>.<br>Some of these words <span class="hljs-emphasis">_are emphasized also_</span>.<br>Use two asterisks for <span class="hljs-strong">**strong emphasis**</span>.<br>Or, if you prefer, <span class="hljs-strong">__use two underscores instead__</span>.<br></code></pre></td></tr></table></figure><h5 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h5><p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p><ul><li>无序列表</li></ul><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">星号：<br><br><span class="hljs-bullet">* </span>无序列表<br><span class="hljs-bullet">* </span>无序列表2<br><span class="hljs-bullet">* </span>无序列表3<br>加号：<br><br><span class="hljs-bullet">+ </span>无序列表<br><span class="hljs-bullet">+ </span>无序列表2<br><span class="hljs-bullet">+ </span>无序列表3<br>和减号<br><br><span class="hljs-bullet">- </span>无序列表<br><span class="hljs-bullet">- </span>无序列表2<br><span class="hljs-bullet">- </span>无序列表3<br></code></pre></td></tr></table></figure><p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p><ol><li>有序列表1</li><li>有序列表2</li></ol><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1. </span>Red<br><span class="hljs-bullet">2. </span>Green<br><span class="hljs-bullet">3. </span>Blue<br></code></pre></td></tr></table></figure><h5 id="5-链接"><a href="#5-链接" class="headerlink" title="5.链接"></a>5.链接</h5><p>分为<strong>行内</strong>和<strong>参考</strong>两种形式，两种都是使用角括号来把文字转成链接。</p><p>​    <strong>行内</strong></p><p>​        This is an <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>.</p><p>​    加上title属性:</p><p>​        This is an <a href="http://example.com/" title="With a Title" target="_blank" rel="noopener">example link</a>.</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is an [<span class="hljs-string">GitHub</span>](<span class="hljs-link">http://github.com/</span>).<br>This is an [<span class="hljs-string">example link</span>](<span class="hljs-link">http://example.com/ "With a Title"</span>).<br></code></pre></td></tr></table></figure><p>​    <strong>参考</strong></p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">I get 10 times more traffic from [<span class="hljs-string">Google</span>][<span class="hljs-symbol">1</span>] than from [<span class="hljs-string">Yahoo</span>][<span class="hljs-symbol">2</span>] or [<span class="hljs-string">MSN</span>][<span class="hljs-symbol">3</span>].<br><br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">http://google.com/ "Google"</span><br>[<span class="hljs-symbol">2</span>]: <span class="hljs-link">http://search.yahoo.com/ "Yahoo Search"</span><br>[<span class="hljs-symbol">3</span>]: <span class="hljs-link">http://search.msn.com/ "MSN Search"</span><br></code></pre></td></tr></table></figure><p>​    <strong>自动链接</strong></p><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><p><a href="mailto:&#97;&#x64;&#100;&#x72;&#x65;&#115;&#x73;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#97;&#x64;&#100;&#x72;&#x65;&#115;&#x73;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#x6d;</a></p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;http://example.com/&gt;<br>&lt;address@example.com&gt;<br></code></pre></td></tr></table></figure><h5 id="6-图片"><a href="#6-图片" class="headerlink" title="6.图片"></a>6.图片</h5><p>​    图片的语法和链接很像。</p><p>​        <strong>行内</strong></p><p><img src="http://css.photophoto.cn/img/logo.gif" alt="alt text" title="Title"></p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt text</span>](<span class="hljs-link">http://css.photophoto.cn/img/logo.gif "Title"</span>)<br></code></pre></td></tr></table></figure><p>​        <strong>参考形式</strong></p><p><img src="http://css.photophoto.cn/img/logo.gif" alt="alt text" title="Title"></p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt text</span>][<span class="hljs-symbol">id</span>]<br><br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://css.photophoto.cn/img/logo.gif "Title"</span><br></code></pre></td></tr></table></figure><h5 id="7-代码"><a href="#7-代码" class="headerlink" title="7.代码"></a>7.代码</h5><p>\<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 表示代码块"><br>\``表示代码区块<br><br>如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 `&amp;`、`&lt;` 和 `&gt;` 也一样会自动转成 HTML 实体。<br><br>**Markdown 语法:**<br><br>```markdown<br>If you want your page to validate under XHTML 1.0 Strict,<br>you&apos;ve got to put paragraph tags in your blockquotes:<br><br>&lt;blockquote&gt;<br>&lt;p&gt;For example.&lt;/p&gt;<br>&lt;/blockquote&gt;<br></code></pre></td></tr></table></figure></p><h5 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h5><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="hljs highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">* </span><span class="hljs-bullet">* *</span><br><br><span class="hljs-emphasis">***</span><br><br><span class="hljs-strong">*****</span><br><br><span class="hljs-bullet">- </span>- -<br><br>---------------------------------------<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index-1.html"/>
      <url>/categories/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>about</title>
      <link href="/about/index-1.html"/>
      <url>/about/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>page title</title>
      <link href="/page-title/index.html"/>
      <url>/page-title/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
